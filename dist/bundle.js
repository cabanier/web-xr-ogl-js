/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@webxr-input-profiles/motion-controllers/dist/motion-controllers.module.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@webxr-input-profiles/motion-controllers/dist/motion-controllers.module.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Constants\": () => (/* binding */ Constants),\n/* harmony export */   \"MotionController\": () => (/* binding */ MotionController),\n/* harmony export */   \"fetchProfile\": () => (/* binding */ fetchProfile),\n/* harmony export */   \"fetchProfilesList\": () => (/* binding */ fetchProfilesList)\n/* harmony export */ });\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nconst Constants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath);\n\n  // Find the relative path to the first requested profile that is recognized\n  let match;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n\n  let assetPath;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(\n        `No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`\n      );\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return { profile, assetPath };\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: Constants.ComponentState.DEFAULT\n};\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt((x * x) + (y * y));\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: (xAxis * 0.5) + 0.5,\n    normalizedYAxis: (yAxis * 0.5) + 0.5\n  };\n  return result;\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis, yAxis, button, state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case Constants.ComponentProperty.X_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedXAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.Y_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedYAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.BUTTON:\n        this.value = (this.states.includes(state)) ? button : 0;\n        break;\n      case Constants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\n          this.value = (this.states.includes(state));\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId\n     || !componentDescription\n     || !componentDescription.visualResponses\n     || !componentDescription.gamepadIndices\n     || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n\n    // Build all the visual responses for this component\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n\n    this.values = {\n      state: Constants.ComponentState.DEFAULT,\n      button: (this.gamepadIndices.button !== undefined) ? 0 : undefined,\n      xAxis: (this.gamepadIndices.xAxis !== undefined) ? 0 : undefined,\n      yAxis: (this.gamepadIndices.yAxis !== undefined) ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = Constants.ComponentState.DEFAULT;\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined\n        && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = (this.values.button < 0) ? 0 : this.values.button;\n      this.values.button = (this.values.button > 1) ? 1 : this.values.button;\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = Constants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = (this.values.xAxis < -1) ? -1 : this.values.xAxis;\n      this.values.xAxis = (this.values.xAxis > 1) ? 1 : this.values.xAxis;\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = (this.values.yAxis < -1) ? -1 : this.values.yAxis;\n      this.values.yAxis = (this.values.yAxis > 1) ? 1 : this.values.yAxis;\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\n\n/**\n  * @description Builds a motion controller with components and visual responses based on the\n  * supplied profile description. Data is polled from the xrInputSource's gamepad.\n  * @author Nell Waliczek / https://github.com/NellWaliczek\n*/\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\n\n\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/@webxr-input-profiles/motion-controllers/dist/motion-controllers.module.js?");

/***/ }),

/***/ "./node_modules/ogl/src/core/Camera.js":
/*!*********************************************!*\
  !*** ./node_modules/ogl/src/core/Camera.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Camera\": () => (/* binding */ Camera)\n/* harmony export */ });\n/* harmony import */ var _Transform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transform.js */ \"./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Mat4.js */ \"./node_modules/ogl/src/math/Mat4.js\");\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vec3.js */ \"./node_modules/ogl/src/math/Vec3.js\");\n\n\n\n\nconst tempMat4 = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\nconst tempVec3a = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3();\nconst tempVec3b = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3();\n\nclass Camera extends _Transform_js__WEBPACK_IMPORTED_MODULE_2__.Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.viewMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.projectionViewMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.worldPosition = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left,\n        right = this.right,\n        bottom = this.bottom,\n        top = this.top,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(), new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(), new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(), new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(), new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(), new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(node.worldMatrix);\n\n        const radius = node.geometry.bounds.radius * node.worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/core/Camera.js?");

/***/ }),

/***/ "./node_modules/ogl/src/core/Geometry.js":
/*!***********************************************!*\
  !*** ./node_modules/ogl/src/core/Geometry.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Geometry\": () => (/* binding */ Geometry)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"./node_modules/ogl/src/math/Vec3.js\");\n// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\n\n\nconst tempVec3 = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nclass Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\n            const offset = numLoc === 1 ? 0 : numLoc * numLoc;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * 2,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                max: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                center: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                scale: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/core/Geometry.js?");

/***/ }),

/***/ "./node_modules/ogl/src/core/Mesh.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/core/Mesh.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mesh\": () => (/* binding */ Mesh)\n/* harmony export */ });\n/* harmony import */ var _Transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transform.js */ \"./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _math_Mat3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Mat3.js */ \"./node_modules/ogl/src/math/Mat3.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Mat4.js */ \"./node_modules/ogl/src/math/Mat4.js\");\n\n\n\n\nlet ID = 0;\n\nclass Mesh extends _Transform_js__WEBPACK_IMPORTED_MODULE_0__.Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__.Mat4();\n        this.normalMatrix = new _math_Mat3_js__WEBPACK_IMPORTED_MODULE_2__.Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/core/Mesh.js?");

/***/ }),

/***/ "./node_modules/ogl/src/core/Program.js":
/*!**********************************************!*\
  !*** ./node_modules/ogl/src/core/Program.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Program\": () => (/* binding */ Program)\n/* harmony export */ });\n// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nclass Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/core/Program.js?");

/***/ }),

/***/ "./node_modules/ogl/src/core/Renderer.js":
/*!***********************************************!*\
  !*** ./node_modules/ogl/src/core/Renderer.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Renderer\": () => (/* binding */ Renderer)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"./node_modules/ogl/src/math/Vec3.js\");\n\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nlet ID = 1;\n\nclass Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = null;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LESS;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/core/Renderer.js?");

/***/ }),

/***/ "./node_modules/ogl/src/core/Texture.js":
/*!**********************************************!*\
  !*** ./node_modules/ogl/src/core/Texture.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Texture\": () => (/* binding */ Texture)\n/* harmony export */ });\n// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nclass Texture {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmaps = true,\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == gl.TEXTURE_2D ? true : false,\n            anisotropy = 0,\n            level = 0,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(\n                this.target,\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\n                this.anisotropy\n            );\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        this.level,\n                        this.internalFormat,\n                        this.format,\n                        this.type,\n                        this.image[i]\n                    );\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage2D(\n                        this.target,\n                        level,\n                        this.internalFormat,\n                        this.image[level].width,\n                        this.image[level].height,\n                        0,\n                        this.image[level].data\n                    );\n                }\n            } else {\n                // Regular texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        0,\n                        this.gl.RGBA,\n                        1,\n                        1,\n                        0,\n                        this.gl.RGBA,\n                        this.gl.UNSIGNED_BYTE,\n                        emptyPixel\n                    );\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/core/Texture.js?");

/***/ }),

/***/ "./node_modules/ogl/src/core/Transform.js":
/*!************************************************!*\
  !*** ./node_modules/ogl/src/core/Transform.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Transform\": () => (/* binding */ Transform)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vec3.js */ \"./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var _math_Quat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Quat.js */ \"./node_modules/ogl/src/math/Quat.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Mat4.js */ \"./node_modules/ogl/src/math/Mat4.js\");\n/* harmony import */ var _math_Euler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/Euler.js */ \"./node_modules/ogl/src/math/Euler.js\");\n\n\n\n\n\nclass Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.worldMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.matrixAutoUpdate = true;\n\n        this.position = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3();\n        this.quaternion = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_2__.Quat();\n        this.scale = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(1);\n        this.rotation = new _math_Euler_js__WEBPACK_IMPORTED_MODULE_3__.Euler();\n        this.up = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(0, 1, 0);\n\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.getTranslation(this.position);\n        this.matrix.getRotation(this.quaternion);\n        this.matrix.getScaling(this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/core/Transform.js?");

/***/ }),

/***/ "./node_modules/ogl/src/extras/Box.js":
/*!********************************************!*\
  !*** ./node_modules/ogl/src/extras/Box.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Box\": () => (/* binding */ Box)\n/* harmony export */ });\n/* harmony import */ var _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Geometry.js */ \"./node_modules/ogl/src/core/Geometry.js\");\n/* harmony import */ var _Plane_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Plane.js */ \"./node_modules/ogl/src/extras/Plane.js\");\n\n\n\nclass Box extends _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__.Geometry {\n    constructor(gl, { width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n        const dSegs = depthSegments;\n\n        const num = (wSegs + 1) * (hSegs + 1) * 2 + (wSegs + 1) * (dSegs + 1) * 2 + (hSegs + 1) * (dSegs + 1) * 2;\n        const numIndices = (wSegs * hSegs * 2 + wSegs * dSegs * 2 + hSegs * dSegs * 2) * 6;\n\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        let i = 0;\n        let ii = 0;\n\n        // left, right\n        _Plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane.buildPlane(position, normal, uv, index, depth, height, width, dSegs, hSegs, 2, 1, 0, -1, -1, i, ii);\n        i += (dSegs + 1) * (hSegs + 1);\n        ii += dSegs * hSegs;\n\n        _Plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane.buildPlane(position, normal, uv, index, depth, height, -width, dSegs, hSegs, 2, 1, 0, 1, -1, i, ii);\n        i += (dSegs + 1) * (hSegs + 1);\n        ii += dSegs * hSegs;\n\n        // top, bottom\n        _Plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane.buildPlane(position, normal, uv, index, width, depth, height, dSegs, wSegs, 0, 2, 1, 1, 1, i, ii);\n        i += (wSegs + 1) * (dSegs + 1);\n        ii += wSegs * dSegs;\n\n        _Plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane.buildPlane(position, normal, uv, index, width, depth, -height, dSegs, wSegs, 0, 2, 1, 1, -1, i, ii);\n        i += (wSegs + 1) * (dSegs + 1);\n        ii += wSegs * dSegs;\n\n        // front, back\n        _Plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane.buildPlane(position, normal, uv, index, width, height, -depth, wSegs, hSegs, 0, 1, 2, -1, -1, i, ii);\n        i += (wSegs + 1) * (hSegs + 1);\n        ii += wSegs * hSegs;\n\n        _Plane_js__WEBPACK_IMPORTED_MODULE_1__.Plane.buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, 0, 1, 2, 1, -1, i, ii);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/extras/Box.js?");

/***/ }),

/***/ "./node_modules/ogl/src/extras/GLTFAnimation.js":
/*!******************************************************!*\
  !*** ./node_modules/ogl/src/extras/GLTFAnimation.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GLTFAnimation\": () => (/* binding */ GLTFAnimation)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var _math_Quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Quat.js */ \"./node_modules/ogl/src/math/Quat.js\");\n\n\n\nconst tmpVec3A = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nconst tmpVec3B = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nconst tmpVec3C = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nconst tmpVec3D = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\n\nconst tmpQuatA = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_1__.Quat();\nconst tmpQuatB = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_1__.Quat();\nconst tmpQuatC = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_1__.Quat();\nconst tmpQuatD = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_1__.Quat();\n\nclass GLTFAnimation {\n    constructor(data, weight = 1) {\n        this.data = data;\n        this.elapsed = 0;\n        this.weight = weight;\n\n        // Set to false to not apply modulo to elapsed against duration\n        this.loop = true;\n\n        // Find starting time as exports from blender (perhaps others too) don't always start from 0\n        this.startTime = data.reduce((a, { times }) => Math.min(a, times[0]), Infinity);\n        // Get largest final time in all channels to calculate duration\n        this.endTime = data.reduce((a, { times }) => Math.max(a, times[times.length - 1]), 0);\n        this.duration = this.endTime - this.startTime;\n    }\n\n    update(totalWeight = 1, isSet) {\n        const weight = isSet ? 1 : this.weight / totalWeight;\n        const elapsed = !this.duration\n            ? 0\n            : (this.loop ? this.elapsed % this.duration : Math.min(this.elapsed, this.duration - 0.001)) + this.startTime;\n\n        this.data.forEach(({ node, transform, interpolation, times, values }) => {\n            if (!this.duration) {\n                let val = tmpVec3A;\n                let size = 3;\n                if (transform === 'quaternion') {\n                    val = tmpQuatA;\n                    size = 4;\n                }\n                val.fromArray(values, 0);\n                if (size === 4) node[transform].slerp(val, weight);\n                else node[transform].lerp(val, weight);\n                return;\n            }\n\n            // Get index of two time values elapsed is between\n            const prevIndex =\n                Math.max(\n                    1,\n                    times.findIndex((t) => t > elapsed)\n                ) - 1;\n            const nextIndex = prevIndex + 1;\n\n            // Get linear blend/alpha between the two\n            let alpha = (elapsed - times[prevIndex]) / (times[nextIndex] - times[prevIndex]);\n            if (interpolation === 'STEP') alpha = 0;\n\n            let prevVal = tmpVec3A;\n            let prevTan = tmpVec3B;\n            let nextTan = tmpVec3C;\n            let nextVal = tmpVec3D;\n            let size = 3;\n\n            if (transform === 'quaternion') {\n                prevVal = tmpQuatA;\n                prevTan = tmpQuatB;\n                nextTan = tmpQuatC;\n                nextVal = tmpQuatD;\n                size = 4;\n            }\n\n            if (interpolation === 'CUBICSPLINE') {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size * 3 + size * 1);\n                prevTan.fromArray(values, prevIndex * size * 3 + size * 2);\n                nextTan.fromArray(values, nextIndex * size * 3 + size * 0);\n                nextVal.fromArray(values, nextIndex * size * 3 + size * 1);\n\n                // interpolate for final value\n                prevVal = this.cubicSplineInterpolate(alpha, prevVal, prevTan, nextTan, nextVal);\n                if (size === 4) prevVal.normalize();\n            } else {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size);\n                nextVal.fromArray(values, nextIndex * size);\n\n                // interpolate for final value\n                if (size === 4) prevVal.slerp(nextVal, alpha);\n                else prevVal.lerp(nextVal, alpha);\n            }\n\n            // interpolate between multiple possible animations\n            if (size === 4) node[transform].slerp(prevVal, weight);\n            else node[transform].lerp(prevVal, weight);\n        });\n    }\n\n    cubicSplineInterpolate(t, prevVal, prevTan, nextTan, nextVal) {\n        const t2 = t * t;\n        const t3 = t2 * t;\n\n        const s2 = 3 * t2 - 2 * t3;\n        const s3 = t3 - t2;\n        const s0 = 1 - s2;\n        const s1 = s3 - t2 + t;\n\n        for (let i = 0; i < prevVal.length; i++) {\n            prevVal[i] = s0 * prevVal[i] + s1 * (1 - t) * prevTan[i] + s2 * nextVal[i] + s3 * t * nextTan[i];\n        }\n\n        return prevVal;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/extras/GLTFAnimation.js?");

/***/ }),

/***/ "./node_modules/ogl/src/extras/GLTFLoader.js":
/*!***************************************************!*\
  !*** ./node_modules/ogl/src/extras/GLTFLoader.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GLTFLoader\": () => (/* binding */ GLTFLoader)\n/* harmony export */ });\n/* harmony import */ var _core_Geometry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/Geometry.js */ \"./node_modules/ogl/src/core/Geometry.js\");\n/* harmony import */ var _core_Transform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/Transform.js */ \"./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Texture.js */ \"./node_modules/ogl/src/core/Texture.js\");\n/* harmony import */ var _core_Mesh_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Mesh.js */ \"./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var _GLTFAnimation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./GLTFAnimation.js */ \"./node_modules/ogl/src/extras/GLTFAnimation.js\");\n/* harmony import */ var _GLTFSkin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GLTFSkin.js */ \"./node_modules/ogl/src/extras/GLTFSkin.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../math/Mat4.js */ \"./node_modules/ogl/src/math/Mat4.js\");\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../math/Vec3.js */ \"./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var _NormalProgram_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./NormalProgram.js */ \"./node_modules/ogl/src/extras/NormalProgram.js\");\n\n\n\n\n\n\n\n\n\n\n// Supports\n// [x] glb\n// [x] Geometry\n// [x] Nodes and Hierarchy\n// [x] Instancing\n// [x] Skins\n// [x] Textures\n// [x] Animation\n// [x] GLB support\n// [x] Basis/ktx2\n// [x] KHR_lights_punctual lights\n// [ ] Morph Targets\n// [ ] Materials\n// [ ] Cameras\n\n// TODO: Sparse accessor packing? For morph targets basically\n// TODO: init accessor missing bufferView with 0s\n// TODO: morph target animations\n// TODO: option to turn off GPU instancing\n\nconst TYPE_ARRAY = {\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array,\n    'image/jpeg': Uint8Array,\n    'image/png': Uint8Array,\n};\n\nconst TYPE_SIZE = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16,\n};\n\nconst ATTRIBUTES = {\n    POSITION: 'position',\n    NORMAL: 'normal',\n    TANGENT: 'tangent',\n    TEXCOORD_0: 'uv',\n    TEXCOORD_1: 'uv2',\n    COLOR_0: 'color',\n    WEIGHTS_0: 'skinWeight',\n    JOINTS_0: 'skinIndex',\n};\n\nconst TRANSFORMS = {\n    translation: 'position',\n    rotation: 'quaternion',\n    scale: 'scale',\n};\n\nclass GLTFLoader {\n    static setBasisManager(manager) {\n        this.basisManager = manager;\n    }\n\n    static async load(gl, src) {\n        const dir = src.split('/').slice(0, -1).join('/') + '/';\n\n        // load main description json\n        const desc = await this.parseDesc(src);\n\n        return await this.parse(gl, desc, dir);\n    }\n\n    static async parse(gl, desc, dir) {\n        if (desc.asset === undefined || desc.asset.version[0] < 2) console.warn('Only GLTF >=2.0 supported. Attempting to parse.');\n\n        if (desc.extensionsRequired?.includes('KHR_texture_basisu') && !this.basisManager)\n            console.warn('KHR_texture_basisu extension required but no manager supplied. Use .setBasisManager()');\n\n        // Load buffers async\n        const buffers = await this.loadBuffers(desc, dir);\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        gl.renderer.bindVertexArray(null);\n\n        // Create gl buffers from bufferViews\n        const bufferViews = this.parseBufferViews(gl, desc, buffers);\n\n        // Create images from either bufferViews or separate image files\n        const images = await this.parseImages(gl, desc, dir, bufferViews);\n\n        const textures = this.parseTextures(gl, desc, images);\n\n        // Just pass through material data for now\n        const materials = this.parseMaterials(gl, desc, textures);\n\n        // Fetch the inverse bind matrices for skeleton joints\n        const skins = this.parseSkins(gl, desc, bufferViews);\n\n        // Create geometries for each mesh primitive\n        const meshes = this.parseMeshes(gl, desc, bufferViews, materials, skins);\n\n        // Create transforms, meshes and hierarchy\n        const nodes = this.parseNodes(gl, desc, meshes, skins, images);\n\n        // Place nodes in skeletons\n        this.populateSkins(skins, nodes);\n\n        // Create animation handlers\n        const animations = this.parseAnimations(gl, desc, nodes, bufferViews);\n\n        // Get top level nodes for each scene\n        const scenes = this.parseScenes(desc, nodes);\n        const scene = scenes[desc.scene];\n\n        // Create uniforms for scene lights (TODO: light linking?)\n        const lights = this.parseLights(gl, desc, nodes, scenes);\n\n        // Remove null nodes (instanced transforms)\n        for (let i = nodes.length; i >= 0; i--) if (!nodes[i]) nodes.splice(i, 1);\n\n        return {\n            json: desc,\n            buffers,\n            bufferViews,\n            images,\n            textures,\n            materials,\n            meshes,\n            nodes,\n            lights,\n            animations,\n            scenes,\n            scene,\n        };\n    }\n\n    static async parseDesc(src) {\n        if (!src.match(/\\.glb/)) {\n            return await fetch(src).then((res) => res.json());\n        } else {\n            return await fetch(src)\n                .then((res) => res.arrayBuffer())\n                .then((glb) => this.unpackGLB(glb));\n        }\n    }\n\n    // From https://github.com/donmccurdy/glTF-Transform/blob/e4108cc/packages/core/src/io/io.ts#L32\n    static unpackGLB(glb) {\n        // Decode and verify GLB header.\n        const header = new Uint32Array(glb, 0, 3);\n        if (header[0] !== 0x46546c67) {\n            throw new Error('Invalid glTF asset.');\n        } else if (header[1] !== 2) {\n            throw new Error(`Unsupported glTF binary version, \"${header[1]}\".`);\n        }\n        // Decode and verify chunk headers.\n        const jsonChunkHeader = new Uint32Array(glb, 12, 2);\n        const jsonByteOffset = 20;\n        const jsonByteLength = jsonChunkHeader[0];\n        if (jsonChunkHeader[1] !== 0x4e4f534a) {\n            throw new Error('Unexpected GLB layout.');\n        }\n\n        // Decode JSON.\n        const jsonText = new TextDecoder().decode(glb.slice(jsonByteOffset, jsonByteOffset + jsonByteLength));\n        const json = JSON.parse(jsonText);\n        // JSON only\n        if (jsonByteOffset + jsonByteLength === glb.byteLength) return json;\n\n        const binaryChunkHeader = new Uint32Array(glb, jsonByteOffset + jsonByteLength, 2);\n        if (binaryChunkHeader[1] !== 0x004e4942) {\n            throw new Error('Unexpected GLB layout.');\n        }\n        // Decode content.\n        const binaryByteOffset = jsonByteOffset + jsonByteLength + 8;\n        const binaryByteLength = binaryChunkHeader[0];\n        const binary = glb.slice(binaryByteOffset, binaryByteOffset + binaryByteLength);\n        // Attach binary to buffer\n        json.buffers[0].binary = binary;\n        return json;\n    }\n\n    // Threejs GLTF Loader https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js#L1085\n    static resolveURI(uri, dir) {\n        // Invalid URI\n        if (typeof uri !== 'string' || uri === '') return '';\n\n        // Host Relative URI\n        if (/^https?:\\/\\//i.test(dir) && /^\\//.test(uri)) {\n            dir = dir.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n        }\n\n        // Absolute URI http://, https://, //\n        if (/^(https?:)?\\/\\//i.test(uri)) return uri;\n\n        // Data URI\n        if (/^data:.*,.*$/i.test(uri)) return uri;\n\n        // Blob URI\n        if (/^blob:.*$/i.test(uri)) return uri;\n\n        // Relative URI\n        return dir + uri;\n    }\n\n    static async loadBuffers(desc, dir) {\n        if (!desc.buffers) return null;\n        return await Promise.all(\n            desc.buffers.map((buffer) => {\n                // For GLB, binary buffer ready to go\n                if (buffer.binary) return buffer.binary;\n                const uri = this.resolveURI(buffer.uri, dir);\n                return fetch(uri).then((res) => res.arrayBuffer());\n            })\n        );\n    }\n\n    static parseBufferViews(gl, desc, buffers) {\n        if (!desc.bufferViews) return null;\n        // Clone to leave description pure\n        const bufferViews = desc.bufferViews.map((o) => Object.assign({}, o));\n\n        desc.meshes &&\n            desc.meshes.forEach(({ primitives }) => {\n                primitives.forEach(({ attributes, indices }) => {\n                    // Flag bufferView as an attribute, so it knows to create a gl buffer\n                    for (let attr in attributes) bufferViews[desc.accessors[attributes[attr]].bufferView].isAttribute = true;\n\n                    if (indices === undefined) return;\n                    bufferViews[desc.accessors[indices].bufferView].isAttribute = true;\n\n                    // Make sure indices bufferView have a target property for gl buffer binding\n                    bufferViews[desc.accessors[indices].bufferView].target = gl.ELEMENT_ARRAY_BUFFER;\n                });\n            });\n\n        // Get componentType of each bufferView from the accessors\n        desc.accessors.forEach(({ bufferView: i, componentType }) => {\n            bufferViews[i].componentType = componentType;\n        });\n\n        // Get mimetype of bufferView from images\n        desc.images &&\n            desc.images.forEach(({ uri, bufferView: i, mimeType }) => {\n                if (i === undefined) return;\n                bufferViews[i].mimeType = mimeType;\n            });\n\n        // Push each bufferView to the GPU as a separate buffer\n        bufferViews.forEach(\n            (\n                {\n                    buffer: bufferIndex, // required\n                    byteOffset = 0, // optional\n                    byteLength, // required\n                    byteStride, // optional\n                    target = gl.ARRAY_BUFFER, // optional, added above for elements\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n\n                    componentType, // optional, added from accessor above\n                    mimeType, // optional, added from images above\n                    isAttribute,\n                },\n                i\n            ) => {\n                bufferViews[i].data = buffers[bufferIndex].slice(byteOffset, byteOffset + byteLength);\n\n                if (!isAttribute) return;\n                // Create gl buffers for the bufferView, pushing it to the GPU\n                const buffer = gl.createBuffer();\n                gl.bindBuffer(target, buffer);\n                gl.renderer.state.boundBuffer = buffer;\n                gl.bufferData(target, bufferViews[i].data, gl.STATIC_DRAW);\n                bufferViews[i].buffer = buffer;\n            }\n        );\n\n        return bufferViews;\n    }\n\n    static async parseImages(gl, desc, dir, bufferViews) {\n        if (!desc.images) return null;\n        return await Promise.all(\n            desc.images.map(async ({ uri, bufferView: bufferViewIndex, mimeType, name }) => {\n                if (mimeType === 'image/ktx2') {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const image = await this.basisManager.parseTexture(data);\n                    return image;\n                }\n\n                // jpg / png\n                const image = new Image();\n                image.name = name;\n                if (uri) {\n                    image.src = this.resolveURI(uri, dir);\n                } else if (bufferViewIndex !== undefined) {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const blob = new Blob([data], { type: mimeType });\n                    image.src = URL.createObjectURL(blob);\n                }\n                image.ready = new Promise((res) => {\n                    image.onload = () => res();\n                });\n                return image;\n            })\n        );\n    }\n\n    static parseTextures(gl, desc, images) {\n        if (!desc.textures) return null;\n        return desc.textures.map((textureInfo) => this.createTexture(gl, desc, images, textureInfo));\n    }\n\n    static createTexture(gl, desc, images, { sampler: samplerIndex, source: sourceIndex, name, extensions, extras }) {\n        if (sourceIndex === undefined && !!extensions) {\n            // Basis extension source index\n            if (extensions.KHR_texture_basisu) sourceIndex = extensions.KHR_texture_basisu.source;\n        }\n\n        const image = images[sourceIndex];\n        if (image.texture) return image.texture;\n\n        const options = {\n            flipY: false,\n            wrapS: gl.REPEAT, // Repeat by default, opposed to OGL's clamp by default\n            wrapT: gl.REPEAT,\n        };\n        const sampler = samplerIndex !== undefined ? desc.samplers[samplerIndex] : null;\n        if (sampler) {\n            ['magFilter', 'minFilter', 'wrapS', 'wrapT'].forEach((prop) => {\n                if (sampler[prop]) options[prop] = sampler[prop];\n            });\n        }\n\n        // For compressed textures\n        if (image.isBasis) {\n            options.image = image;\n            options.internalFormat = image.internalFormat;\n            if (image.isCompressedTexture) {\n                options.generateMipmaps = false;\n                if (image.length > 1) this.minFilter = gl.NEAREST_MIPMAP_LINEAR;\n            }\n            const texture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__.Texture(gl, options);\n            texture.name = name;\n            image.texture = texture;\n            return texture;\n        }\n\n        const texture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__.Texture(gl, options);\n        texture.name = name;\n        image.texture = texture;\n        image.ready.then(() => {\n            texture.image = image;\n        });\n\n        return texture;\n    }\n\n    static parseMaterials(gl, desc, textures) {\n        if (!desc.materials) return null;\n        return desc.materials.map(\n            ({\n                name,\n                extensions,\n                extras,\n                pbrMetallicRoughness = {},\n                normalTexture,\n                occlusionTexture,\n                emissiveTexture,\n                emissiveFactor = [0, 0, 0],\n                alphaMode = 'OPAQUE',\n                alphaCutoff = 0.5,\n                doubleSided = false,\n            }) => {\n                const {\n                    baseColorFactor = [1, 1, 1, 1],\n                    baseColorTexture,\n                    metallicFactor = 1,\n                    roughnessFactor = 1,\n                    metallicRoughnessTexture,\n                    //   extensions,\n                    //   extras,\n                } = pbrMetallicRoughness;\n\n                if (baseColorTexture) {\n                    baseColorTexture.texture = textures[baseColorTexture.index];\n                    // texCoord\n                }\n                if (normalTexture) {\n                    normalTexture.texture = textures[normalTexture.index];\n                    // scale: 1\n                    // texCoord\n                }\n                if (metallicRoughnessTexture) {\n                    metallicRoughnessTexture.texture = textures[metallicRoughnessTexture.index];\n                    // texCoord\n                }\n                if (occlusionTexture) {\n                    occlusionTexture.texture = textures[occlusionTexture.index];\n                    // strength 1\n                    // texCoord\n                }\n                if (emissiveTexture) {\n                    emissiveTexture.texture = textures[emissiveTexture.index];\n                    // texCoord\n                }\n\n                return {\n                    name,\n                    extensions,\n                    extras,\n                    baseColorFactor,\n                    baseColorTexture,\n                    metallicFactor,\n                    roughnessFactor,\n                    metallicRoughnessTexture,\n                    normalTexture,\n                    occlusionTexture,\n                    emissiveTexture,\n                    emissiveFactor,\n                    alphaMode,\n                    alphaCutoff,\n                    doubleSided,\n                };\n            }\n        );\n    }\n\n    static parseSkins(gl, desc, bufferViews) {\n        if (!desc.skins) return null;\n        return desc.skins.map(\n            ({\n                inverseBindMatrices, // optional\n                skeleton, // optional\n                joints, // required\n                // name,\n                // extensions,\n                // extras,\n            }) => {\n                return {\n                    inverseBindMatrices: this.parseAccessor(inverseBindMatrices, desc, bufferViews),\n                    skeleton,\n                    joints,\n                };\n            }\n        );\n    }\n\n    static parseMeshes(gl, desc, bufferViews, materials, skins) {\n        if (!desc.meshes) return null;\n        return desc.meshes.map(\n            (\n                {\n                    primitives, // required\n                    weights, // optional\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n                },\n                meshIndex\n            ) => {\n                // TODO: weights stuff ?\n                // Parse through nodes to see how many instances there are\n                // and if there is a skin attached\n                // If multiple instances of a skin, need to create each\n                let numInstances = 0;\n                let skinIndices = [];\n                let isLightmap = false;\n                desc.nodes &&\n                    desc.nodes.forEach(({ mesh, skin, extras }) => {\n                        if (mesh === meshIndex) {\n                            numInstances++;\n                            if (skin !== undefined) skinIndices.push(skin);\n                            if (extras && extras.lightmap_scale_offset) isLightmap = true;\n                        }\n                    });\n                let isSkin = !!skinIndices.length;\n\n                // For skins, return array of skin meshes to account for multiple instances\n                if (isSkin) {\n                    primitives = skinIndices.map((skinIndex) => {\n                        return this.parsePrimitives(gl, primitives, desc, bufferViews, materials, 1, isLightmap).map(\n                            ({ geometry, program, mode }) => {\n                                const mesh = new _GLTFSkin_js__WEBPACK_IMPORTED_MODULE_1__.GLTFSkin(gl, { skeleton: skins[skinIndex], geometry, program, mode });\n                                mesh.name = name;\n                                // TODO: support skin frustum culling\n                                mesh.frustumCulled = false;\n                                return mesh;\n                            }\n                        );\n                    });\n                    // For retrieval to add to node\n                    primitives.instanceCount = 0;\n                    primitives.numInstances = numInstances;\n                } else {\n                    primitives = this.parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances, isLightmap).map(\n                        ({ geometry, program, mode }) => {\n                            const mesh = new _core_Mesh_js__WEBPACK_IMPORTED_MODULE_2__.Mesh(gl, { geometry, program, mode });\n                            mesh.name = name;\n                            // Tag mesh so that nodes can add their transforms to the instance attribute\n                            mesh.numInstances = numInstances;\n                            if (mesh.geometry.attributes.instanceMatrix) {\n                                // Avoid incorrect culling for instances\n                                mesh.frustumCulled = false;\n                            }\n                            return mesh;\n                        }\n                    );\n                }\n\n                return {\n                    primitives,\n                    weights,\n                    name,\n                };\n            }\n        );\n    }\n\n    static parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances, isLightmap) {\n        return primitives.map(\n            ({\n                attributes, // required\n                indices, // optional\n                material: materialIndex, // optional\n                mode = 4, // optional\n                targets, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                // TODO: materials\n                const program = new _NormalProgram_js__WEBPACK_IMPORTED_MODULE_3__.NormalProgram(gl);\n                if (materialIndex !== undefined) {\n                    program.gltfMaterial = materials[materialIndex];\n                }\n\n                const geometry = new _core_Geometry_js__WEBPACK_IMPORTED_MODULE_4__.Geometry(gl);\n\n                // Add each attribute found in primitive\n                for (let attr in attributes) {\n                    geometry.addAttribute(ATTRIBUTES[attr], this.parseAccessor(attributes[attr], desc, bufferViews));\n                }\n\n                // Add index attribute if found\n                if (indices !== undefined) {\n                    geometry.addAttribute('index', this.parseAccessor(indices, desc, bufferViews));\n                }\n\n                // Add instanced transform attribute if multiple instances\n                // Ignore if skin as we don't support instanced skins out of the box\n                if (numInstances > 1) {\n                    geometry.addAttribute('instanceMatrix', {\n                        instanced: 1,\n                        size: 16,\n                        data: new Float32Array(numInstances * 16),\n                    });\n                }\n\n                // Always supply lightmapScaleOffset as an instanced attribute\n                // Instanced skin lightmaps not supported\n                if (isLightmap) {\n                    geometry.addAttribute('lightmapScaleOffset', {\n                        instanced: 1,\n                        size: 4,\n                        data: new Float32Array(numInstances * 4),\n                    });\n                }\n\n                return {\n                    geometry,\n                    program,\n                    mode,\n                };\n            }\n        );\n    }\n\n    static parseAccessor(index, desc, bufferViews) {\n        // TODO: init missing bufferView with 0s\n        // TODO: support sparse\n\n        const {\n            bufferView: bufferViewIndex, // optional\n            byteOffset = 0, // optional\n            componentType, // required\n            normalized = false, // optional\n            count, // required\n            type, // required\n            min, // optional\n            max, // optional\n            sparse, // optional\n            // name, // optional\n            // extensions, // optional\n            // extras, // optional\n        } = desc.accessors[index];\n\n        const {\n            data, // attached in parseBufferViews\n            buffer, // replaced to be the actual GL buffer\n            byteOffset: bufferByteOffset = 0,\n            // byteLength, // applied in parseBufferViews\n            byteStride = 0,\n            target,\n            // name,\n            // extensions,\n            // extras,\n        } = bufferViews[bufferViewIndex];\n\n        const size = TYPE_SIZE[type];\n\n        // Parse data from joined buffers\n        const TypeArray = TYPE_ARRAY[componentType];\n        const elementBytes = data.BYTES_PER_ELEMENT;\n        const componentStride = byteStride / elementBytes;\n        const isInterleaved = !!byteStride && componentStride !== size;\n\n        // TODO: interleaved\n        // Convert data to typed array for various uses (bounding boxes, animation etc)\n        const newData = isInterleaved ? new TypeArray(data) : new TypeArray(data, byteOffset, count * size);\n\n        // Return attribute data\n        return {\n            data: newData,\n            size,\n            type: componentType,\n            normalized,\n            buffer,\n            stride: byteStride,\n            offset: byteOffset,\n            count,\n            min,\n            max,\n        };\n    }\n\n    static parseNodes(gl, desc, meshes, skins, images) {\n        if (!desc.nodes) return null;\n        const nodes = desc.nodes.map(\n            ({\n                camera, // optional\n                children, // optional\n                skin: skinIndex, // optional\n                matrix, // optional\n                mesh: meshIndex, // optional\n                rotation, // optional\n                scale, // optional\n                translation, // optional\n                weights, // optional\n                name, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                const node = new _core_Transform_js__WEBPACK_IMPORTED_MODULE_5__.Transform();\n                if (name) node.name = name;\n                node.extras = extras;\n                node.extensions = extensions;\n\n                // Need to attach to node as may have same material but different lightmap\n                if (extras && extras.lightmapTexture !== undefined) {\n                    extras.lightmapTexture.texture = this.createTexture(gl, desc, images, { source: extras.lightmapTexture.index });\n                }\n\n                // Apply transformations\n                if (matrix) {\n                    node.matrix.copy(matrix);\n                    node.decompose();\n                } else {\n                    if (rotation) node.quaternion.copy(rotation);\n                    if (scale) node.scale.copy(scale);\n                    if (translation) node.position.copy(translation);\n                    node.updateMatrix();\n                }\n\n                // Flags for avoiding duplicate transforms and removing unused instance nodes\n                let isInstanced = false;\n                let isFirstInstance = true;\n                let isInstancedMatrix = false;\n                let isSkin = skinIndex !== undefined;\n\n                // add mesh if included\n                if (meshIndex !== undefined) {\n                    if (isSkin) {\n                        meshes[meshIndex].primitives[meshes[meshIndex].primitives.instanceCount].forEach((mesh) => {\n                            mesh.extras = extras;\n                            mesh.setParent(node);\n                        });\n                        meshes[meshIndex].primitives.instanceCount++;\n                        // Remove properties once all instances added\n                        if (meshes[meshIndex].primitives.instanceCount === meshes[meshIndex].primitives.numInstances) {\n                            delete meshes[meshIndex].primitives.numInstances;\n                            delete meshes[meshIndex].primitives.instanceCount;\n                        }\n                    } else {\n                        meshes[meshIndex].primitives.forEach((mesh) => {\n                            mesh.extras = extras;\n\n                            // instanced mesh might only have 1\n                            if (mesh.geometry.isInstanced) {\n                                isInstanced = true;\n                                if (!mesh.instanceCount) {\n                                    mesh.instanceCount = 0;\n                                } else {\n                                    isFirstInstance = false;\n                                }\n                                if (mesh.geometry.attributes.instanceMatrix) {\n                                    isInstancedMatrix = true;\n                                    node.matrix.toArray(mesh.geometry.attributes.instanceMatrix.data, mesh.instanceCount * 16);\n                                }\n\n                                if (mesh.geometry.attributes.lightmapScaleOffset) {\n                                    mesh.geometry.attributes.lightmapScaleOffset.data.set(extras.lightmap_scale_offset, mesh.instanceCount * 4);\n                                }\n\n                                mesh.instanceCount++;\n\n                                if (mesh.instanceCount === mesh.numInstances) {\n                                    // Remove properties once all instances added\n                                    delete mesh.numInstances;\n                                    delete mesh.instanceCount;\n                                    // Flag attribute as dirty\n                                    if (mesh.geometry.attributes.instanceMatrix) {\n                                        mesh.geometry.attributes.instanceMatrix.needsUpdate = true;\n                                    }\n                                    if (mesh.geometry.attributes.lightmapScaleOffset) {\n                                        mesh.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n                                    }\n                                }\n                            }\n\n                            // For instances, only the first node will actually have the mesh\n                            if (isInstanced) {\n                                if (isFirstInstance) mesh.setParent(node);\n                            } else {\n                                mesh.setParent(node);\n                            }\n                        });\n                    }\n                }\n\n                // Reset node if instanced to not duplicate transforms\n                if (isInstancedMatrix) {\n                    // Remove unused nodes just providing an instance transform\n                    if (!isFirstInstance) return null;\n                    // Avoid duplicate transform for node containing the instanced mesh\n                    node.matrix.identity();\n                    node.decompose();\n                }\n\n                return node;\n            }\n        );\n\n        desc.nodes.forEach(({ children = [] }, i) => {\n            // Set hierarchy now all nodes created\n            children.forEach((childIndex) => {\n                if (!nodes[childIndex]) return;\n                nodes[childIndex].setParent(nodes[i]);\n            });\n        });\n\n        return nodes;\n    }\n\n    static populateSkins(skins, nodes) {\n        if (!skins) return;\n        skins.forEach((skin) => {\n            skin.joints = skin.joints.map((i, index) => {\n                const joint = nodes[i];\n                joint.bindInverse = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_6__.Mat4(...skin.inverseBindMatrices.data.slice(index * 16, (index + 1) * 16));\n                return joint;\n            });\n            if (skin.skeleton) skin.skeleton = nodes[skin.skeleton];\n        });\n    }\n\n    static parseAnimations(gl, desc, nodes, bufferViews) {\n        if (!desc.animations) return null;\n        return desc.animations.map(\n            ({\n                channels, // required\n                samplers, // required\n                name, // optional\n                // extensions, // optional\n                // extras,  // optional\n            }) => {\n                const data = channels.map(\n                    ({\n                        sampler: samplerIndex, // required\n                        target, // required\n                        // extensions, // optional\n                        // extras, // optional\n                    }) => {\n                        const {\n                            input: inputIndex, // required\n                            interpolation = 'LINEAR',\n                            output: outputIndex, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = samplers[samplerIndex];\n\n                        const {\n                            node: nodeIndex, // optional - TODO: when is it not included?\n                            path, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = target;\n\n                        const node = nodes[nodeIndex];\n                        const transform = TRANSFORMS[path];\n                        const times = this.parseAccessor(inputIndex, desc, bufferViews).data;\n                        const values = this.parseAccessor(outputIndex, desc, bufferViews).data;\n\n                        return {\n                            node,\n                            transform,\n                            interpolation,\n                            times,\n                            values,\n                        };\n                    }\n                );\n\n                return {\n                    name,\n                    animation: new _GLTFAnimation_js__WEBPACK_IMPORTED_MODULE_7__.GLTFAnimation(data),\n                };\n            }\n        );\n    }\n\n    static parseScenes(desc, nodes) {\n        if (!desc.scenes) return null;\n        return desc.scenes.map(\n            ({\n                nodes: nodesIndices = [],\n                name, // optional\n                extensions,\n                extras,\n            }) => {\n                const scene = nodesIndices.reduce((map, i) => {\n                    // Don't add null nodes (instanced transforms)\n                    if (nodes[i]) map.push(nodes[i]);\n                    return map;\n                }, []);\n                scene.extras = extras;\n                return scene;\n            }\n        );\n    }\n\n    static parseLights(gl, desc, nodes, scenes) {\n        const lights = {\n            directional: [],\n            point: [],\n            spot: [],\n        };\n\n        // Update matrices on root nodes\n        scenes.forEach((scene) => scene.forEach((node) => node.updateMatrixWorld()));\n\n        // uses KHR_lights_punctual extension\n        const lightsDescArray = desc.extensions?.KHR_lights_punctual?.lights || [];\n\n        // Need nodes for transforms\n        nodes.forEach((node) => {\n            if (!node?.extensions?.KHR_lights_punctual) return;\n            const lightIndex = node.extensions.KHR_lights_punctual.light;\n            const lightDesc = lightsDescArray[lightIndex];\n            const light = {\n                name: lightDesc.name || '',\n                color: { value: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_8__.Vec3().set(lightDesc.color || 1) },\n            };\n            // Apply intensity directly to color\n            if (lightDesc.intensity !== undefined) light.color.value.multiply(lightDesc.intensity);\n\n            switch (lightDesc.type) {\n                case 'directional':\n                    light.direction = { value: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_8__.Vec3(0, 0, 1).transformDirection(node.worldMatrix) };\n                    break;\n                case 'point':\n                    light.position = { value: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_8__.Vec3().applyMatrix4(node.worldMatrix) };\n                    light.distance = { value: lightDesc.range };\n                    light.decay = { value: 2 };\n                    break;\n                case 'spot':\n                    // TODO: support spot uniforms\n                    Object.assign(light, lightDesc);\n                    break;\n            }\n\n            lights[lightDesc.type].push(light);\n        });\n\n        return lights;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/extras/GLTFLoader.js?");

/***/ }),

/***/ "./node_modules/ogl/src/extras/GLTFSkin.js":
/*!*************************************************!*\
  !*** ./node_modules/ogl/src/extras/GLTFSkin.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GLTFSkin\": () => (/* binding */ GLTFSkin)\n/* harmony export */ });\n/* harmony import */ var _core_Mesh_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/Mesh.js */ \"./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Mat4.js */ \"./node_modules/ogl/src/math/Mat4.js\");\n/* harmony import */ var _core_Texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Texture.js */ \"./node_modules/ogl/src/core/Texture.js\");\n\n\n\n\nconst tempMat4 = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\nconst identity = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n\nclass GLTFSkin extends _core_Mesh_js__WEBPACK_IMPORTED_MODULE_1__.Mesh {\n    constructor(gl, { skeleton, geometry, program, mode = gl.TRIANGLES } = {}) {\n        super(gl, { geometry, program, mode });\n        this.skeleton = skeleton;\n        this.program = program;\n        this.createBoneTexture();\n        this.animations = [];\n    }\n\n    createBoneTexture() {\n        if (!this.skeleton.joints.length) return;\n        const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.skeleton.joints.length * 4)) / Math.LN2)));\n        this.boneMatrices = new Float32Array(size * size * 4);\n        this.boneTextureSize = size;\n        this.boneTexture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture(this.gl, {\n            image: this.boneMatrices,\n            generateMipmaps: false,\n            type: this.gl.FLOAT,\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n            minFilter: this.gl.NEAREST,\n            magFilter: this.gl.NEAREST,\n            flipY: false,\n            width: size,\n        });\n    }\n\n    // addAnimation(data) {\n    //     const animation = new Animation({ objects: this.bones, data });\n    //     this.animations.push(animation);\n    //     return animation;\n    // }\n\n    // updateAnimations() {\n    //     // Calculate combined animation weight\n    //     let total = 0;\n    //     this.animations.forEach((animation) => (total += animation.weight));\n\n    //     this.animations.forEach((animation, i) => {\n    //         // force first animation to set in order to reset frame\n    //         animation.update(total, i === 0);\n    //     });\n    // }\n\n    updateUniforms() {\n        // Update bone texture\n        this.skeleton.joints.forEach((bone, i) => {\n            // Find difference between current and bind pose\n            tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n            this.boneMatrices.set(tempMat4, i * 16);\n        });\n        if (this.boneTexture) this.boneTexture.needsUpdate = true;\n    }\n\n    draw({ camera } = {}) {\n        if (!this.program.uniforms.boneTexture) {\n            Object.assign(this.program.uniforms, {\n                boneTexture: { value: this.boneTexture },\n                boneTextureSize: { value: this.boneTextureSize },\n            });\n        }\n\n        this.updateUniforms();\n\n        // Switch the world matrix with identity to ignore any transforms\n        // on the mesh itself - only use skeleton's transforms\n        const _worldMatrix = this.worldMatrix;\n        this.worldMatrix = identity;\n\n        super.draw({ camera });\n\n        // Switch back to leave identity untouched\n        this.worldMatrix = _worldMatrix;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/extras/GLTFSkin.js?");

/***/ }),

/***/ "./node_modules/ogl/src/extras/NormalProgram.js":
/*!******************************************************!*\
  !*** ./node_modules/ogl/src/extras/NormalProgram.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NormalProgram\": () => (/* binding */ NormalProgram)\n/* harmony export */ });\n/* harmony import */ var _core_Program_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Program.js */ \"./node_modules/ogl/src/core/Program.js\");\n\n\nconst vertex = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    attribute vec3 position;\n    attribute vec3 normal;\n\n    uniform mat3 normalMatrix;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vNormal;\n\n    void main() {\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst fragment = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    varying vec3 vNormal;\n\n    void main() {\n        gl_FragColor.rgb = normalize(vNormal);\n        gl_FragColor.a = 1.0;\n    }\n`;\n\nfunction NormalProgram(gl) {\n    return new _core_Program_js__WEBPACK_IMPORTED_MODULE_0__.Program(gl, {\n        vertex: vertex,\n        fragment: fragment,\n        cullFace: null,\n    });\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/extras/NormalProgram.js?");

/***/ }),

/***/ "./node_modules/ogl/src/extras/Plane.js":
/*!**********************************************!*\
  !*** ./node_modules/ogl/src/extras/Plane.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Plane\": () => (/* binding */ Plane)\n/* harmony export */ });\n/* harmony import */ var _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Geometry.js */ \"./node_modules/ogl/src/core/Geometry.js\");\n\n\nclass Plane extends _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__.Geometry {\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n\n        // Determine length of arrays\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        // Generate empty arrays once\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = numIndices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\n        const io = i;\n        const segW = width / wSegs;\n        const segH = height / hSegs;\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let y = iy * segH - height / 2;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let x = ix * segW - width / 2;\n\n                position[i * 3 + u] = x * uDir;\n                position[i * 3 + v] = y * vDir;\n                position[i * 3 + w] = depth / 2;\n\n                normal[i * 3 + u] = 0;\n                normal[i * 3 + v] = 0;\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n                uv[i * 2] = ix / wSegs;\n                uv[i * 2 + 1] = 1 - iy / hSegs;\n\n                if (iy === hSegs || ix === wSegs) continue;\n                let a = io + ix + iy * (wSegs + 1);\n                let b = io + ix + (iy + 1) * (wSegs + 1);\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n                let d = io + ix + iy * (wSegs + 1) + 1;\n\n                index[ii * 6] = a;\n                index[ii * 6 + 1] = b;\n                index[ii * 6 + 2] = d;\n                index[ii * 6 + 3] = b;\n                index[ii * 6 + 4] = c;\n                index[ii * 6 + 5] = d;\n                ii++;\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/extras/Plane.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/Euler.js":
/*!********************************************!*\
  !*** ./node_modules/ogl/src/math/Euler.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Euler\": () => (/* binding */ Euler)\n/* harmony export */ });\n/* harmony import */ var _functions_EulerFunc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functions/EulerFunc.js */ \"./node_modules/ogl/src/math/functions/EulerFunc.js\");\n/* harmony import */ var _Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mat4.js */ \"./node_modules/ogl/src/math/Mat4.js\");\n\n\n\nconst tmpMat4 = new _Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n\nclass Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        _functions_EulerFunc_js__WEBPACK_IMPORTED_MODULE_1__.fromRotationMatrix(this, m, order);\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order) {\n        tmpMat4.fromQuaternion(q);\n        return this.fromRotationMatrix(tmpMat4, order);\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/Euler.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/Mat3.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Mat3.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mat3\": () => (/* binding */ Mat3)\n/* harmony export */ });\n/* harmony import */ var _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Mat3Func.js */ \"./node_modules/ogl/src/math/functions/Mat3Func.js\");\n\n\nclass Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, ma, mb);\n        } else {\n            _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.normalFromMat4(this, m);\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/Mat3.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/Mat4.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Mat4.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mat4\": () => (/* binding */ Mat4)\n/* harmony export */ });\n/* harmony import */ var _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Mat4Func.js */ \"./node_modules/ogl/src/math/functions/Mat4Func.js\");\n\n\nclass Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, ma, mb);\n        } else {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.fromRotationTranslationScale(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/Mat4.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/Quat.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Quat.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Quat\": () => (/* binding */ Quat)\n/* harmony export */ });\n/* harmony import */ var _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/QuatFunc.js */ \"./node_modules/ogl/src/math/functions/QuatFunc.js\");\n\n\nclass Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.set(this, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateX(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateY(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateZ(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.conjugate(this, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.normalize(this, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, qA, qB);\n        } else {\n            _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.dot(this, v);\n    }\n\n    fromMatrix3(matrix3) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.fromMat3(this, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.fromEuler(this, euler, euler.order);\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.setAxisAngle(this, axis, a);\n        return this;\n    }\n\n    slerp(q, t) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.slerp(this, this, q, t);\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/Quat.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/Vec3.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Vec3.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vec3\": () => (/* binding */ Vec3)\n/* harmony export */ });\n/* harmony import */ var _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Vec3Func.js */ \"./node_modules/ogl/src/math/functions/Vec3Func.js\");\n\n\nclass Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, v);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.divide(this, this, v);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length(this);\n    }\n\n    distance(v) {\n        if (v) return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.distance(this, v);\n        else return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length(this);\n    }\n\n    squaredLen() {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredDistance(this, v);\n        else return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredLength(this);\n    }\n\n    negate(v = this) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.cross(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.dot(this, v);\n    }\n\n    equals(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.angle(this, v);\n    }\n\n    lerp(v, t) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/Vec3.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/functions/EulerFunc.js":
/*!**********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/EulerFunc.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fromRotationMatrix\": () => (/* binding */ fromRotationMatrix)\n/* harmony export */ });\n// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nfunction fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/functions/EulerFunc.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/functions/Mat3Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Mat3Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"determinant\": () => (/* binding */ determinant),\n/* harmony export */   \"fromMat4\": () => (/* binding */ fromMat4),\n/* harmony export */   \"fromQuat\": () => (/* binding */ fromQuat),\n/* harmony export */   \"identity\": () => (/* binding */ identity),\n/* harmony export */   \"invert\": () => (/* binding */ invert),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"multiplyScalar\": () => (/* binding */ multiplyScalar),\n/* harmony export */   \"normalFromMat4\": () => (/* binding */ normalFromMat4),\n/* harmony export */   \"projection\": () => (/* binding */ projection),\n/* harmony export */   \"rotate\": () => (/* binding */ rotate),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"translate\": () => (/* binding */ translate),\n/* harmony export */   \"transpose\": () => (/* binding */ transpose)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nfunction fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nfunction fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nfunction identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nfunction translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nfunction rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nfunction scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nfunction normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nfunction projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nfunction multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/functions/Mat3Func.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/functions/Mat4Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Mat4Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"determinant\": () => (/* binding */ determinant),\n/* harmony export */   \"fromQuat\": () => (/* binding */ fromQuat),\n/* harmony export */   \"fromRotationTranslationScale\": () => (/* binding */ fromRotationTranslationScale),\n/* harmony export */   \"getMaxScaleOnAxis\": () => (/* binding */ getMaxScaleOnAxis),\n/* harmony export */   \"getRotation\": () => (/* binding */ getRotation),\n/* harmony export */   \"getScaling\": () => (/* binding */ getScaling),\n/* harmony export */   \"getTranslation\": () => (/* binding */ getTranslation),\n/* harmony export */   \"identity\": () => (/* binding */ identity),\n/* harmony export */   \"invert\": () => (/* binding */ invert),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"multiplyScalar\": () => (/* binding */ multiplyScalar),\n/* harmony export */   \"ortho\": () => (/* binding */ ortho),\n/* harmony export */   \"perspective\": () => (/* binding */ perspective),\n/* harmony export */   \"rotate\": () => (/* binding */ rotate),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"targetTo\": () => (/* binding */ targetTo),\n/* harmony export */   \"translate\": () => (/* binding */ translate),\n/* harmony export */   \"transpose\": () => (/* binding */ transpose)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nfunction identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nfunction multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nfunction translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nfunction scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nfunction rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nfunction getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nfunction getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nfunction getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nconst getRotation = (function () {\n    const temp = [0, 0, 0];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nfunction fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nfunction fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nfunction targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nfunction multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/functions/Mat4Func.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/functions/QuatFunc.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/QuatFunc.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"conjugate\": () => (/* binding */ conjugate),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"fromEuler\": () => (/* binding */ fromEuler),\n/* harmony export */   \"fromMat3\": () => (/* binding */ fromMat3),\n/* harmony export */   \"identity\": () => (/* binding */ identity),\n/* harmony export */   \"invert\": () => (/* binding */ invert),\n/* harmony export */   \"length\": () => (/* binding */ length),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"rotateX\": () => (/* binding */ rotateX),\n/* harmony export */   \"rotateY\": () => (/* binding */ rotateY),\n/* harmony export */   \"rotateZ\": () => (/* binding */ rotateZ),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"setAxisAngle\": () => (/* binding */ setAxisAngle),\n/* harmony export */   \"slerp\": () => (/* binding */ slerp)\n/* harmony export */ });\n/* harmony import */ var _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec4Func.js */ \"./node_modules/ogl/src/math/functions/Vec4Func.js\");\n\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nfunction identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nfunction setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nfunction multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nfunction slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nfunction invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nfunction conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nfunction fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nfunction fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nconst copy = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nconst set = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nconst add = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nconst scale = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nconst dot = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nconst lerp = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nconst length = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nconst normalize = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.normalize;\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/functions/QuatFunc.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/functions/Vec3Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Vec3Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"angle\": () => (/* binding */ angle),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"cross\": () => (/* binding */ cross),\n/* harmony export */   \"distance\": () => (/* binding */ distance),\n/* harmony export */   \"divide\": () => (/* binding */ divide),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"inverse\": () => (/* binding */ inverse),\n/* harmony export */   \"length\": () => (/* binding */ length),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"negate\": () => (/* binding */ negate),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"scaleRotateMat4\": () => (/* binding */ scaleRotateMat4),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"squaredDistance\": () => (/* binding */ squaredDistance),\n/* harmony export */   \"squaredLength\": () => (/* binding */ squaredLength),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"transformMat3\": () => (/* binding */ transformMat3),\n/* harmony export */   \"transformMat4\": () => (/* binding */ transformMat4),\n/* harmony export */   \"transformQuat\": () => (/* binding */ transformQuat)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nfunction copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nfunction set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nfunction scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nfunction negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nfunction inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nfunction lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nfunction scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nfunction transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nconst angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/functions/Vec3Func.js?");

/***/ }),

/***/ "./node_modules/ogl/src/math/functions/Vec4Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Vec4Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"length\": () => (/* binding */ length),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"set\": () => (/* binding */ set)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nfunction copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nfunction set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nfunction scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nfunction normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nfunction lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/ogl/src/math/functions/Vec4Func.js?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Texture.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Camera.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/extras/Box.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/extras/NormalProgram.js\");\n/* harmony import */ var _xr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xr */ \"./src/xr/index.ts\");\n/* harmony import */ var _xr_layers___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xr/layers/ */ \"./src/xr/layers/index.ts\");\n/* harmony import */ var _xr_XRInputModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./xr/XRInputModel */ \"./src/xr/XRInputModel.ts\");\n/* harmony import */ var _xr_XRRenderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./xr/XRRenderer */ \"./src/xr/XRRenderer.ts\");\n\n\n\n\n\nconst params = new URLSearchParams(window.location.search);\nconst requestButton = document.querySelector(\"#request-xr\");\nconst canvas = document.createElement(\"canvas\");\nconst renderer = new _xr_XRRenderer__WEBPACK_IMPORTED_MODULE_3__.XRRenderer({\n    dpr: window.devicePixelRatio,\n    canvas,\n    antialias: true,\n    autoClear: true,\n});\ndocument.body.appendChild(canvas);\n_xr_layers___WEBPACK_IMPORTED_MODULE_1__.OGLXRLayer.ALLOW_NATIVE = true;\n_xr_layers___WEBPACK_IMPORTED_MODULE_1__.OGLXRLayer.ALLOW_ALPHA_CLIP = true;\n_xr__WEBPACK_IMPORTED_MODULE_0__.XRRenderTarget.USE_MSAA_TEXTURE_WHEN_EXIST = false; //!params.get('no-ext');\n/**\n * @type {WebGLRenderingContext}\n */\nconst gl = renderer.gl;\nconst genCanvasLayer = ({ width = 200, height = 100, fill = '#ccc', outline = 'red', name = 'Layer 1' } = {}) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = width;\n    canvas.height = height;\n    ctx.fillStyle = fill;\n    ctx.strokeStyle = outline;\n    ctx.lineWidth = 3;\n    ctx.fillRect(0, 0, width, height);\n    ctx.strokeRect(10, 10, width - 20, height - 20);\n    ctx.fillStyle = outline;\n    ctx.font = 'Arial 32px';\n    ctx.fillText(name, 10 * 2 + 5, 10 * 2 + 5);\n    const t = new ogl__WEBPACK_IMPORTED_MODULE_4__.Texture(gl, { image: canvas });\n    const l = new _xr_layers___WEBPACK_IMPORTED_MODULE_1__.OGLQuadLayer({ width: width / 400, height: height / 400, viewPixelHeight: height, viewPixelWidth: width });\n    l.texture = t;\n    return l;\n};\nconst textCanvas = document.createElement('canvas');\ntextCanvas.width = 1024;\ntextCanvas.height = 512;\ngl.clearColor(1, 1, 1, 1);\nconst camera = new ogl__WEBPACK_IMPORTED_MODULE_5__.Camera(gl, { fov: 90 });\ncamera.lookAt([0, 0, 0]);\nfunction resize() {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.perspective({ aspect: gl.canvas.width / gl.canvas.height });\n}\nwindow.addEventListener(\"resize\", resize, false);\nresize();\nrequestButton.addEventListener(\"click\", async () => {\n    await renderer.requestXR();\n});\nconst scene = new ogl__WEBPACK_IMPORTED_MODULE_6__.Transform();\nscene.position.set(0, 0, -2);\nconst layer1 = genCanvasLayer({ width: 300, height: 200 });\nconst layer2 = genCanvasLayer({ width: 100, height: 200, name: 'Vert Layer', fill: '#22cc22', outline: 'blue' });\nconst layer3 = genCanvasLayer({ width: 300, height: 200, fill: '#cc2222', outline: '#ccc' });\nconst layer4 = genCanvasLayer({ width: 300, height: 200, fill: 'blue', outline: 'white', name: 'Out of board' });\nlayer1.position.x -= 2;\nlayer1.rotation.y = Math.PI / 6;\nlayer3.position.x = 2;\nlayer3.rotation.y = -Math.PI / 6;\nconst board = new ogl__WEBPACK_IMPORTED_MODULE_6__.Transform();\nboard.addChild(layer1);\nboard.addChild(layer2);\nboard.addChild(layer3);\nconst outOfBoardTree = new ogl__WEBPACK_IMPORTED_MODULE_6__.Transform();\noutOfBoardTree.addChild(layer4);\nscene.addChild(board);\nscene.addChild(outOfBoardTree);\noutOfBoardTree.visible = false;\n//emulate loop lag\nconst longTask = () => {\n    const start = performance.now();\n    let i = 100000000;\n    while (i-- > 0) { }\n    ;\n    console.log(performance.now() - start);\n};\nconst flipBoards = () => {\n    longTask();\n    outOfBoardTree.visible = !outOfBoardTree.visible;\n    board.visible = !outOfBoardTree.visible;\n};\nconst map = new Map();\nconst rayLiner = () => {\n    const geometry = new ogl__WEBPACK_IMPORTED_MODULE_7__.Box(gl, { width: 0.01, height: 0.01 });\n    const t = new ogl__WEBPACK_IMPORTED_MODULE_8__.Mesh(gl, { program: new ogl__WEBPACK_IMPORTED_MODULE_9__.NormalProgram(gl), geometry });\n    t.scale.set(1, 1, 0.2);\n    t.position.set(0, 0, -0.1);\n    return t;\n};\nrenderer.xr.addEventListener('xrstart', () => {\n    renderer.xr.session.addEventListener('selectstart', flipBoards);\n});\nrenderer.xr.addEventListener('xrinputsourceschange', (e) => {\n    const inputs = [...renderer.xr.inputSources];\n    const last = [...map.keys()];\n    const added = inputs.filter(e => !last.includes(e));\n    const removed = last.filter(e => !inputs.includes(e));\n    removed.forEach((e) => {\n        const m = map.get(e);\n        m.source = null;\n        m.setParent(null);\n        map.delete(e);\n    });\n    added.forEach((e) => {\n        const model = new _xr_XRInputModel__WEBPACK_IMPORTED_MODULE_2__.XRInputModel(gl, { inputSource: e });\n        model.rayNode = rayLiner();\n        scene.addChild(model);\n        map.set(e, model);\n    });\n});\nrenderer.requestAnimationFrame(update);\nfunction update() {\n    renderer.requestAnimationFrame(update);\n    renderer.render({ scene, camera });\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/index.ts?");

/***/ }),

/***/ "./src/xr/GLTFShader.ts":
/*!******************************!*\
  !*** ./src/xr/GLTFShader.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GLTFShader\": () => (/* binding */ GLTFShader),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var _core_ExtendedProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/ExtendedProgram */ \"./src/xr/core/ExtendedProgram.ts\");\n// https://github.com/oframe/ogl/blob/master/examples/load-gltf.html\n\n\nconst GLTFShader = {\n    vertex: /* glsl */ `\r\n\t\tattribute vec3 position;\r\n\t\t#ifdef UV\r\n\t\t\tattribute vec2 uv;\r\n\t\t#else\r\n\t\t\tconst vec2 uv = vec2(0);\r\n\t\t#endif\r\n\t\t#ifdef NORMAL\r\n\t\t\tattribute vec3 normal;\r\n\t\t#else\r\n\t\t\tconst vec3 normal = vec3(0);\r\n\t\t#endif\r\n\t\t#ifdef INSTANCED\r\n\t\t\tattribute mat4 instanceMatrix;\r\n\t\t#endif\r\n\t\t#ifdef SKINNING\r\n\t\t\tattribute vec4 skinIndex;\r\n\t\t\tattribute vec4 skinWeight;\r\n\t\t#endif\r\n\t\tuniform mat4 viewMatrix;\r\n\t\tuniform mat4 projectionMatrix;\r\n\t\tuniform mat4 modelMatrix;\r\n\t\tuniform mat3 normalMatrix;\r\n\t\t#ifdef SKINNING\r\n\t\t\tuniform sampler2D boneTexture;\r\n\t\t\tuniform int boneTextureSize;\r\n\t\t#endif\r\n\t\tvarying vec2 vUv;\r\n\t\tvarying vec3 vNormal;\r\n\t\tvarying vec3 vMPos;\r\n\t\tvarying vec4 vMVPos;\r\n\t\t#ifdef SKINNING\r\n\t\t\tmat4 getBoneMatrix(const in float i) ${'{'}\r\n\t\t\t\tfloat j = i * 4.0;\r\n\t\t\t\tfloat x = mod(j, float(boneTextureSize));\r\n\t\t\t\tfloat y = floor(j / float(boneTextureSize));\r\n\t\t\t\tfloat dx = 1.0 / float(boneTextureSize);\r\n\t\t\t\tfloat dy = 1.0 / float(boneTextureSize);\r\n\t\t\t\ty = dy * (y + 0.5);\r\n\t\t\t\tvec4 v1 = texture2D(boneTexture, vec2(dx * (x + 0.5), y));\r\n\t\t\t\tvec4 v2 = texture2D(boneTexture, vec2(dx * (x + 1.5), y));\r\n\t\t\t\tvec4 v3 = texture2D(boneTexture, vec2(dx * (x + 2.5), y));\r\n\t\t\t\tvec4 v4 = texture2D(boneTexture, vec2(dx * (x + 3.5), y));\r\n\t\t\t\treturn mat4(v1, v2, v3, v4);\r\n\t\t\t}\r\n\t\t\tvoid skin(inout vec4 pos, inout vec3 nml) ${'{'}\r\n\t\t\t\tmat4 boneMatX = getBoneMatrix(skinIndex.x);\r\n\t\t\t\tmat4 boneMatY = getBoneMatrix(skinIndex.y);\r\n\t\t\t\tmat4 boneMatZ = getBoneMatrix(skinIndex.z);\r\n\t\t\t\tmat4 boneMatW = getBoneMatrix(skinIndex.w);\r\n\t\t\t\t// update normal\r\n\t\t\t\tmat4 skinMatrix = mat4(0.0);\r\n\t\t\t\tskinMatrix += skinWeight.x * boneMatX;\r\n\t\t\t\tskinMatrix += skinWeight.y * boneMatY;\r\n\t\t\t\tskinMatrix += skinWeight.z * boneMatZ;\r\n\t\t\t\tskinMatrix += skinWeight.w * boneMatW;\r\n\t\t\t\tnml = vec4(skinMatrix * vec4(nml, 0.0)).xyz;\r\n\t\t\t\t// Update position\r\n\t\t\t\tvec4 transformed = vec4(0.0);\r\n\t\t\t\ttransformed += boneMatX * pos * skinWeight.x;\r\n\t\t\t\ttransformed += boneMatY * pos * skinWeight.y;\r\n\t\t\t\ttransformed += boneMatZ * pos * skinWeight.z;\r\n\t\t\t\ttransformed += boneMatW * pos * skinWeight.w;\r\n\t\t\t\tpos = transformed;\r\n\t\t\t}\r\n\t\t#endif\r\n\t\tvoid main() ${'{'}\r\n\t\t\tvec4 pos = vec4(position, 1);\r\n\t\t\tvec3 nml = normal;\r\n\t\t\t#ifdef SKINNING\r\n\t\t\t\tskin(pos, nml);\r\n\t\t\t#endif\r\n\t\t\t#ifdef INSTANCED\r\n\t\t\t\tpos = instanceMatrix * pos;\r\n\t\t\t\tmat3 m = mat3(instanceMatrix);\r\n\t\t\t\tnml /= vec3(dot(m[0], m[0]), dot(m[1], m[1]), dot(m[2], m[2]));\r\n\t\t\t\tnml = m * nml;\r\n\t\t\t#endif\r\n\t\t\tvUv = uv;\r\n\t\t\tvNormal = normalize(nml);\r\n\t\t\tvec4 mPos = modelMatrix * pos;\r\n\t\t\tvMPos = mPos.xyz / mPos.w;\r\n\t\t\tvMVPos = viewMatrix * modelMatrix * pos;\r\n\t\t\tgl_Position = projectionMatrix * vMVPos;\r\n\t\t}\r\n\t\t`,\n    fragment: /* glsl */ `\r\n\t\tuniform mat4 viewMatrix;\r\n\t\tuniform vec3 cameraPosition;\r\n\t\tuniform vec4 uBaseColorFactor;\r\n\t\tuniform sampler2D tBaseColor;\r\n\t\tuniform sampler2D tRM;\r\n\t\tuniform float uRoughness;\r\n\t\tuniform float uMetallic;\r\n\t\tuniform sampler2D tNormal;\r\n\t\tuniform float uNormalScale;\r\n\t\tuniform sampler2D tEmissive;\r\n\t\tuniform vec3 uEmissive;\r\n\t\tuniform sampler2D tOcclusion;\r\n\t\tuniform sampler2D tLUT;\r\n\t\tuniform sampler2D tEnvDiffuse;\r\n\t\tuniform sampler2D tEnvSpecular;\r\n\t\tuniform float uEnvDiffuse;\r\n\t\tuniform float uEnvSpecular;\r\n\t\tuniform vec3 uLightDirection;\r\n\t\tuniform vec3 uLightColor;\r\n\t\tuniform float uAlpha;\r\n\t\tuniform float uAlphaCutoff;\r\n\t\tvarying vec2 vUv;\r\n\t\tvarying vec3 vNormal;\r\n\t\tvarying vec3 vMPos;\r\n\t\tvarying vec4 vMVPos;\r\n\t\tconst float PI = 3.14159265359;\r\n\t\tconst float RECIPROCAL_PI = 0.31830988618;\r\n\t\tconst float RECIPROCAL_PI2 = 0.15915494;\r\n\t\tconst float LN2 = 0.6931472;\r\n\t\tconst float ENV_LODS = 6.0;\r\n\t\tvec4 SRGBtoLinear(vec4 srgb) ${'{'}\r\n\t\t\tvec3 linOut = pow(srgb.xyz, vec3(2.2));\r\n\t\t\treturn vec4(linOut, srgb.w);\r\n\t\t}\r\n\t\tvec4 RGBMToLinear(in vec4 value) ${'{'}\r\n\t\t\tfloat maxRange = 6.0;\r\n\t\t\treturn vec4(value.xyz * value.w * maxRange, 1.0);\r\n\t\t}\r\n\t\tvec3 linearToSRGB(vec3 color) ${'{'}\r\n\t\t\treturn pow(color, vec3(1.0 / 2.2));\r\n\t\t}\r\n\t\tvec3 getNormal() ${'{'}\r\n\t\t\t#ifdef NORMAL_MAP\r\n\t\t\t\tvec3 pos_dx = dFdx(vMPos.xyz);\r\n\t\t\t\tvec3 pos_dy = dFdy(vMPos.xyz);\r\n\t\t\t\tvec2 tex_dx = dFdx(vUv);\r\n\t\t\t\tvec2 tex_dy = dFdy(vUv);\r\n\t\t\t\t// Tangent, Bitangent\r\n\t\t\t\tvec3 t = normalize(pos_dx * tex_dy.t - pos_dy * tex_dx.t);\r\n\t\t\t\tvec3 b = normalize(-pos_dx * tex_dy.s + pos_dy * tex_dx.s);\r\n\t\t\t\tmat3 tbn = mat3(t, b, normalize(vNormal));\r\n\t\t\t\tvec3 n = texture2D(tNormal, vUv).rgb * 2.0 - 1.0;\r\n\t\t\t\tn.xy *= uNormalScale;\r\n\t\t\t\tvec3 normal = normalize(tbn * n);\r\n\t\t\t\t// Get world normal from view normal (normalMatrix * normal)\r\n\t\t\t\t// return normalize((vec4(normal, 0.0) * viewMatrix).xyz);\r\n\t\t\t\treturn normalize(normal);\r\n\t\t\t#else\r\n\t\t\t\treturn normalize(vNormal);\r\n\t\t\t#endif\r\n\t\t}\r\n\t\tvec3 specularReflection(vec3 specularEnvR0, vec3 specularEnvR90, float VdH) ${'{'}\r\n\t\t\treturn specularEnvR0 + (specularEnvR90 - specularEnvR0) * pow(clamp(1.0 - VdH, 0.0, 1.0), 5.0);\r\n\t\t}\r\n\t\tfloat geometricOcclusion(float NdL, float NdV, float roughness) ${'{'}\r\n\t\t\tfloat r = roughness;\r\n\t\t\tfloat attenuationL = 2.0 * NdL / (NdL + sqrt(r * r + (1.0 - r * r) * (NdL * NdL)));\r\n\t\t\tfloat attenuationV = 2.0 * NdV / (NdV + sqrt(r * r + (1.0 - r * r) * (NdV * NdV)));\r\n\t\t\treturn attenuationL * attenuationV;\r\n\t\t}\r\n\t\tfloat microfacetDistribution(float roughness, float NdH) ${'{'}\r\n\t\t\tfloat roughnessSq = roughness * roughness;\r\n\t\t\tfloat f = (NdH * roughnessSq - NdH) * NdH + 1.0;\r\n\t\t\treturn roughnessSq / (PI * f * f);\r\n\t\t}\r\n\t\tvec2 cartesianToPolar(vec3 n) ${'{'}\r\n\t\t\tvec2 uv;\r\n\t\t\tuv.x = atan(n.z, n.x) * RECIPROCAL_PI2 + 0.5;\r\n\t\t\tuv.y = asin(n.y) * RECIPROCAL_PI + 0.5;\r\n\t\t\treturn uv;\r\n\t\t}\r\n\t\tvoid getIBLContribution(inout vec3 diffuse, inout vec3 specular, float NdV, float roughness, vec3 n, vec3 reflection, vec3 diffuseColor, vec3 specularColor) ${'{'}\r\n\t\t\t/*\r\n\t\t\tvec3 brdf = SRGBtoLinear(texture2D(tLUT, vec2(NdV, roughness))).rgb;\r\n\t\t\tvec3 diffuseLight = RGBMToLinear(texture2D(tEnvDiffuse, cartesianToPolar(n))).rgb;\r\n\t\t\tdiffuseLight = mix(vec3(1), diffuseLight, uEnvDiffuse);\r\n\t\t\t*/\r\n\t\t\tvec3 diffuseLight = vec3(0.5);\r\n\t\t\t// Sample 2 levels and mix between to get smoother degradation\r\n\t\t\tfloat blend = roughness * ENV_LODS;\r\n\t\t\tfloat level0 = floor(blend);\r\n\t\t\tfloat level1 = min(ENV_LODS, level0 + 1.0);\r\n\t\t\tblend -= level0;\r\n\r\n\t\t\t// Sample the specular env map atlas depending on the roughness value\r\n\t\t\tvec2 uvSpec = cartesianToPolar(reflection);\r\n\t\t\tuvSpec.y /= 2.0;\r\n\t\t\tvec2 uv0 = uvSpec;\r\n\t\t\tvec2 uv1 = uvSpec;\r\n\t\t\tuv0 /= pow(2.0, level0);\r\n\t\t\tuv0.y += 1.0 - exp(-LN2 * level0);\r\n\t\t\tuv1 /= pow(2.0, level1);\r\n\t\t\tuv1.y += 1.0 - exp(-LN2 * level1);\r\n\t\t\t/*\r\n\t\t\tvec3 specular0 = RGBMToLinear(texture2D(tEnvSpecular, uv0)).rgb;\r\n\t\t\tvec3 specular1 = RGBMToLinear(texture2D(tEnvSpecular, uv1)).rgb;\r\n\t\t\t*/\r\n\t\t\tvec3 specularLight = vec3(0.3);//mix(specular0, specular1, blend);\r\n\t\t\tdiffuse = diffuseLight * diffuseColor;\r\n\r\n\t\t\t// Bit of extra reflection for smooth materials\r\n\t\t\tfloat reflectivity = pow((1.0 - roughness), 2.0) * 0.05;\r\n\t\t\t/*\r\n\t\t\tspecular = specularLight * (specularColor * brdf.x + brdf.y + reflectivity);\r\n\t\t\t*/\r\n\t\t\tspecular *= uEnvSpecular;\r\n\t\t}\r\n\t\tvoid main() ${'{'}\r\n\t\t\tvec4 baseColor = uBaseColorFactor;\r\n\t\t\t#ifdef COLOR_MAP\r\n\t\t\t\tbaseColor *= SRGBtoLinear(texture2D(tBaseColor, vUv));\r\n\t\t\t#endif\r\n\t\t\t// Get base alpha\r\n\t\t\tfloat alpha = baseColor.a;\r\n\t\t\t#ifdef ALPHA_MASK\r\n\t\t\t\tif (alpha < uAlphaCutoff) discard;\r\n\t\t\t#endif\r\n\t\t\t// RM map packed as gb = [nothing, roughness, metallic, nothing]\r\n\t\t\tvec4 rmSample = vec4(1);\r\n\t\t\t#ifdef RM_MAP\r\n\t\t\t\trmSample *= texture2D(tRM, vUv);\r\n\t\t\t#endif\r\n\t\t\tfloat roughness = clamp(rmSample.g * uRoughness, 0.04, 1.0);\r\n\t\t\tfloat metallic = clamp(rmSample.b * uMetallic, 0.04, 1.0);\r\n\t\t\tvec3 f0 = vec3(0.04);\r\n\t\t\tvec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0) * (1.0 - metallic);\r\n\t\t\tvec3 specularColor = mix(f0, baseColor.rgb, metallic);\r\n\t\t\tvec3 specularEnvR0 = specularColor;\r\n\t\t\tvec3 specularEnvR90 = vec3(clamp(max(max(specularColor.r, specularColor.g), specularColor.b) * 25.0, 0.0, 1.0));\r\n\t\t\tvec3 N = getNormal();\r\n\t\t\tvec3 V = normalize(cameraPosition - vMPos);\r\n\t\t\tvec3 L = normalize(uLightDirection);\r\n\t\t\tvec3 H = normalize(L + V);\r\n\t\t\tvec3 reflection = normalize(reflect(-V, N));\r\n\t\t\tfloat NdL = clamp(dot(N, L), 0.001, 1.0);\r\n\t\t\tfloat NdV = clamp(abs(dot(N, V)), 0.001, 1.0);\r\n\t\t\tfloat NdH = clamp(dot(N, H), 0.0, 1.0);\r\n\t\t\tfloat LdH = clamp(dot(L, H), 0.0, 1.0);\r\n\t\t\tfloat VdH = clamp(dot(V, H), 0.0, 1.0);\r\n\t\t\tvec3 F = specularReflection(specularEnvR0, specularEnvR90, VdH);\r\n\t\t\tfloat G = geometricOcclusion(NdL, NdV, roughness);\r\n\t\t\tfloat D = microfacetDistribution(roughness, NdH);\r\n\t\t\tvec3 diffuseContrib = (1.0 - F) * (diffuseColor / PI);\r\n\t\t\tvec3 specContrib = F * G * D / (4.0 * NdL * NdV);\r\n\r\n\t\t\t// Shading based off lights\r\n\t\t\tvec3 color = NdL * uLightColor * (diffuseContrib + specContrib);\r\n\t\t\t// Add lights spec to alpha for reflections on transparent surfaces (glass)\r\n\t\t\talpha = max(alpha, max(max(specContrib.r, specContrib.g), specContrib.b));\r\n\t\t\t// Calculate IBL lighting\r\n\t\t\tvec3 diffuseIBL;\r\n\t\t\tvec3 specularIBL;\r\n\t\t\tgetIBLContribution(diffuseIBL, specularIBL, NdV, roughness, N, reflection, diffuseColor, specularColor);\r\n\t\t\t// Add IBL on top of color\r\n\t\t\tcolor += diffuseIBL + specularIBL;\r\n\t\t\t// Add IBL spec to alpha for reflections on transparent surfaces (glass)\r\n\t\t\talpha = max(alpha, max(max(specularIBL.r, specularIBL.g), specularIBL.b));\r\n\t\t\t#ifdef OCC_MAP\r\n\t\t\t\t// TODO: figure out how to apply occlusion\r\n\t\t\t\t// color *= SRGBtoLinear(texture2D(tOcclusion, vUv)).rgb;\r\n\t\t\t#endif\r\n\t\t\t#ifdef EMISSIVE_MAP\r\n\t\t\t\tvec3 emissive = SRGBtoLinear(texture2D(tEmissive, vUv)).rgb * uEmissive;\r\n\t\t\t\tcolor += emissive;\r\n\t\t\t#endif\r\n\t\t\t// Convert to sRGB to display\r\n\t\t\tgl_FragColor.rgb = linearToSRGB(color);\r\n\r\n\t\t\t// Apply uAlpha uniform at the end to overwrite any specular additions on transparent surfaces\r\n\t\t\tgl_FragColor.a = alpha * uAlpha;\r\n\t\t}\r\n\t`,\n};\nfunction createProgram(context, node) {\n    // eslint-disable-next-line no-restricted-globals\n    const isWebgl2 = context instanceof self.WebGL2RenderingContext;\n    const gltf = node.program.gltfMaterial || {};\n    let { vertex, fragment } = GLTFShader;\n    const vertexPrefix = isWebgl2\n        ? /* glsl */ `#version 300 es\r\n\t\t#define attribute in\r\n\t\t#define varying out\r\n\t\t#define texture2D texture\r\n\t`\n        : '';\n    const fragmentPrefix = isWebgl2\n        ? /* glsl */ `#version 300 es\r\n\t\tprecision highp float;\r\n\t\t#define varying in\r\n\t\t#define texture2D texture\r\n\t\t#define gl_FragColor FragColor\r\n\t\tout vec4 FragColor;\r\n\t`\n        : /* glsl */ `#extension GL_OES_standard_derivatives : enable\r\n\t\tprecision highp float;\r\n\t`;\n    const defines = `\r\n\t\t${node.geometry.attributes.uv ? '#define UV' : ''}\r\n\t\t${node.geometry.attributes.normal ? '#define NORMAL' : ''}\r\n\t\t${node.geometry.isInstanced ? '#define INSTANCED' : ''}\r\n\t\t${node.boneTexture ? '#define SKINNING' : ''}\r\n\t\t${gltf.alphaMode === 'MASK' ? '#define ALPHA_MASK' : ''}\r\n\t\t${gltf.baseColorTexture ? '#define COLOR_MAP' : ''}\r\n\t\t${gltf.normalTexture ? '#define NORMAL_MAP' : ''}\r\n\t\t${gltf.metallicRoughnessTexture ? '#define RM_MAP' : ''}\r\n\t\t${gltf.occlusionTexture ? '#define OCC_MAP' : ''}\r\n\t\t${gltf.emissiveTexture ? '#define EMISSIVE_MAP' : ''}\r\n\t`;\n    vertex = vertexPrefix + defines + vertex;\n    fragment = fragmentPrefix + defines + fragment;\n    const program = new _core_ExtendedProgram__WEBPACK_IMPORTED_MODULE_0__.ExtendedProgram(context, {\n        vertex,\n        fragment,\n        uniforms: {\n            uBaseColorFactor: { value: gltf.baseColorFactor || [1, 1, 1, 1] },\n            tBaseColor: { value: gltf.baseColorTexture ? gltf.baseColorTexture.texture : null },\n            tRM: { value: gltf.metallicRoughnessTexture ? gltf.metallicRoughnessTexture.texture : null },\n            uRoughness: { value: gltf.roughnessFactor !== undefined ? gltf.roughnessFactor : 1 },\n            uMetallic: { value: gltf.metallicFactor !== undefined ? gltf.metallicFactor : 1 },\n            tNormal: { value: gltf.normalTexture ? gltf.normalTexture.texture : null },\n            uNormalScale: { value: gltf.normalTexture ? gltf.normalTexture.scale || 1 : 1 },\n            tOcclusion: { value: gltf.occlusionTexture ? gltf.occlusionTexture.texture : null },\n            tEmissive: { value: gltf.emissiveTexture ? gltf.emissiveTexture.texture : null },\n            uEmissive: { value: gltf.emissiveFactor || [0, 0, 0] },\n            /*\n            tLUT: { value: lutTexture },\n            tEnvDiffuse: { value: envDiffuseTexture },\n            tEnvSpecular: { value: envSpecularTexture },\n            */\n            uEnvDiffuse: { value: 0.5 },\n            uEnvSpecular: { value: 0.5 },\n            uLightDirection: { value: new ogl__WEBPACK_IMPORTED_MODULE_1__.Vec3(0, 1, 1) },\n            uLightColor: { value: new ogl__WEBPACK_IMPORTED_MODULE_1__.Vec3(2.5) },\n            uAlpha: { value: 1 },\n            uAlphaCutoff: { value: gltf.alphaCutoff },\n        },\n        transparent: gltf.alphaMode === 'BLEND',\n        cullFace: gltf.doubleSided ? null : context.BACK,\n    });\n    return program;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    createProgram,\n});\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/GLTFShader.ts?");

/***/ }),

/***/ "./src/xr/GLTFTree.ts":
/*!****************************!*\
  !*** ./src/xr/GLTFTree.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"spawn\": () => (/* binding */ spawn)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _GLTFShader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GLTFShader */ \"./src/xr/GLTFShader.ts\");\n\n\nfunction spawn(gl, gltf, shaderBuilder) {\n    const baseRoot = new ogl__WEBPACK_IMPORTED_MODULE_1__.Transform();\n    const s = gltf.scene || gltf.scenes[0];\n    shaderBuilder = shaderBuilder || _GLTFShader__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    s.forEach((root) => {\n        root.setParent(baseRoot);\n        root.traverse((node) => {\n            if (node.program) {\n                node.program = shaderBuilder.createProgram(gl, node);\n            }\n        });\n    });\n    // Calculate world matrices for bounds\n    baseRoot.updateMatrixWorld();\n    return baseRoot;\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/GLTFTree.ts?");

/***/ }),

/***/ "./src/xr/XRInputModel.ts":
/*!********************************!*\
  !*** ./src/xr/XRInputModel.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XRInputModel\": () => (/* binding */ XRInputModel)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/extras/GLTFLoader.js\");\n/* harmony import */ var _webxr_input_profiles_motion_controllers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @webxr-input-profiles/motion-controllers */ \"./node_modules/@webxr-input-profiles/motion-controllers/dist/motion-controllers.module.js\");\n/* harmony import */ var _GLTFTree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GLTFTree */ \"./src/xr/GLTFTree.ts\");\n/* harmony import */ var _XRInputTransform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./XRInputTransform */ \"./src/xr/XRInputTransform.ts\");\n\n\n\n\nconst BASE_PROFILE_URL = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0.10/dist/profiles';\nconst controllersCache = {};\nclass XRInputModel extends _XRInputTransform__WEBPACK_IMPORTED_MODULE_2__.XRInputTransform {\n    constructor(gl, { inputSource = null } = {}) {\n        super();\n        this._status = 'none';\n        this._modelNode = new ogl__WEBPACK_IMPORTED_MODULE_3__.Transform();\n        this.context = gl;\n        if (inputSource)\n            this.source = inputSource;\n    }\n    // react-ogl has bug\n    // see\n    // eslint-disable-next-line no-use-before-define\n    set whenStatusChanged(v) {\n        // eslint-disable-next-line no-debugger\n        this._statusChange = v;\n    }\n    get whenStatusChanged() {\n        return this._statusChange;\n    }\n    get status() {\n        return this._status;\n    }\n    setStatus(status) {\n        this._status = status;\n        this.whenStatusChanged && this.whenStatusChanged(this);\n    }\n    async _loadController() {\n        var _a, _b;\n        const key = this._source.profiles.concat([this._source.handedness]).join(',');\n        this._controller = (_a = controllersCache[key]) === null || _a === void 0 ? void 0 : _a.controller;\n        this._modelNode = (_b = controllersCache[key]) === null || _b === void 0 ? void 0 : _b.model;\n        if (!this._controller) {\n            const { profile, assetPath } = await _webxr_input_profiles_motion_controllers__WEBPACK_IMPORTED_MODULE_0__.fetchProfile(this._source, BASE_PROFILE_URL);\n            this._controller = new _webxr_input_profiles_motion_controllers__WEBPACK_IMPORTED_MODULE_0__.MotionController(this._source, profile, assetPath);\n            this._asset = await ogl__WEBPACK_IMPORTED_MODULE_4__.GLTFLoader.load(this.context, this._controller.assetUrl);\n            this._modelNode = (0,_GLTFTree__WEBPACK_IMPORTED_MODULE_1__.spawn)(this.context, this._asset);\n            controllersCache[key] = {\n                controller: this._controller,\n                model: this._modelNode,\n            };\n            console.log('Load model for:', key, controllersCache);\n        }\n        else {\n            console.log('Restore model cache for:', key, controllersCache);\n        }\n        this.addChild(this._modelNode);\n    }\n    inputUpdated(from, to) {\n        super.inputUpdated(from, to);\n        if (from !== to) {\n            this.reset();\n        }\n        if (!this._source) {\n            this.setStatus('ok');\n            return;\n        }\n        setTimeout(() => {\n            this.setStatus('pending');\n            this._loadController()\n                .then(() => {\n                this.setStatus('ok');\n            })\n                .catch((e) => {\n                this.setStatus('error');\n                throw e;\n            });\n        });\n    }\n    reset() {\n        //\n        // dispose child too\n        this._modelNode.setParent(null);\n        this._modelNode = null;\n        this._controller = null;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/XRInputModel.ts?");

/***/ }),

/***/ "./src/xr/XRInputTransform.ts":
/*!************************************!*\
  !*** ./src/xr/XRInputTransform.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XRInputTransform\": () => (/* binding */ XRInputTransform)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Mat4.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _xrInputCorrection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xrInputCorrection */ \"./src/xr/xrInputCorrection.ts\");\n\n\nfunction path_for_updateMatrixWorld(force) {\n    if (this.matrixAutoUpdate)\n        this.updateMatrix();\n    if (this.worldMatrixNeedsUpdate || force) {\n        if (this.virtualParentMatrix === null)\n            this.worldMatrix.copy(this.matrix);\n        else\n            this.worldMatrix.multiply(this.virtualParentMatrix, this.matrix);\n        this.worldMatrixNeedsUpdate = false;\n        force = true;\n    }\n    for (let i = 0, l = this.children.length; i < l; i++) {\n        this.children[i].updateMatrixWorld(force);\n    }\n}\nconst pathWorldTransform = (node) => {\n    if (!node || node.__transformPatched) {\n        return node;\n    }\n    node.__transformPatched = true;\n    node.updateMatrixWorld = path_for_updateMatrixWorld.bind(node);\n    node.virtualParentMatrix = new ogl__WEBPACK_IMPORTED_MODULE_1__.Mat4();\n    return node;\n};\nconst restoreWorldTransform = (node) => {\n    if (!node || !node.__transformPatched) {\n        return node;\n    }\n    delete node.__transformPatched;\n    // delete override for instance, updateMatrixWorld will be reader from proto\n    delete node.updateMatrixWorld;\n    delete node.virtualParentMatrix;\n    return node;\n};\nclass XRInputTransform extends ogl__WEBPACK_IMPORTED_MODULE_2__.Transform {\n    constructor() {\n        super();\n        this._updateDeltaSpace = true;\n        this.virtualParentMatrix = new ogl__WEBPACK_IMPORTED_MODULE_1__.Mat4();\n        this.hideInvalidState = false;\n        this._rayNodeOffset = new ogl__WEBPACK_IMPORTED_MODULE_2__.Transform();\n        this.addChild(this._rayNodeOffset);\n    }\n    set visible(v) {\n        this._visible = !!v;\n    }\n    get visible() {\n        return this._visible && (this.hideInvalidState ? this._valid : true);\n    }\n    set rayNode(v) {\n        var _a, _b;\n        if (this._rayNode === v) {\n            return;\n        }\n        (_a = this._rayNode) === null || _a === void 0 ? void 0 : _a.setParent(null, true);\n        this._rayNode = v;\n        (_b = this._rayNode) === null || _b === void 0 ? void 0 : _b.setParent(this._rayNodeOffset);\n    }\n    get rayNode() {\n        return this._rayNode;\n    }\n    set source(v) {\n        if (this._source === v) {\n            return;\n        }\n        const activeSource = this._source;\n        if (this._source) {\n            this._source.viewTransformNode = null;\n        }\n        this._source = v;\n        this._valid = !!v;\n        if (this._source) {\n            this._source.viewTransformNode = this;\n            this._updateDeltaSpace = true;\n        }\n        this.inputUpdated(activeSource, v);\n    }\n    get source() {\n        return this._source;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    inputUpdated(from, to) {\n        //\n    }\n    updateRayTransform({ lastXRFrame, space }) {\n        if (!this._source)\n            return;\n        const rootPos = lastXRFrame.getPose(this._source.gripSpace, space);\n        const rayPos = lastXRFrame.getPose(this._source.targetRaySpace, space);\n        if (!rootPos || !rayPos)\n            return;\n        // world to local\n        // use a transforms because WebXR emulator crash when try getPose relative targetRaySpace\n        // we can use a matrix from XR because it Float32Array\n        this._rayNodeOffset.matrix.multiply(rayPos.transform.inverse.matrix, rootPos.transform.matrix);\n        this._rayNodeOffset.matrix.inverse();\n        // apply offset\n        this._rayNodeOffset.matrix.multiply((0,_xrInputCorrection__WEBPACK_IMPORTED_MODULE_0__.getCorrection)(this._source, true).matrix);\n        // decompose matrix to vectors\n        this._rayNodeOffset.decompose();\n        this._updateDeltaSpace = false;\n    }\n    updateMatrixWorld(force) {\n        path_for_updateMatrixWorld.call(this, force);\n    }\n    update(state) {\n        this.updateRayTransform(state);\n        const { lastXRFrame, space } = state;\n        if (!this._source || this._source.viewTransformNode !== this) {\n            this._valid = false;\n            return;\n        }\n        const pose = lastXRFrame.getPose(this._source.gripSpace, space);\n        this._valid = !!pose;\n        if (this.hideInvalidState) {\n            this._rayNodeOffset.visible = this._valid;\n        }\n        if (!this._valid) {\n            return;\n        }\n        this.virtualParentMatrix.copy(pose.transform.matrix);\n        // apply correction\n        this.virtualParentMatrix.multiply((0,_xrInputCorrection__WEBPACK_IMPORTED_MODULE_0__.getCorrection)(this._source, false).matrix);\n        this.worldMatrixNeedsUpdate = true;\n        this._valid = true;\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/XRInputTransform.ts?");

/***/ }),

/***/ "./src/xr/XRRenderTarget.ts":
/*!**********************************!*\
  !*** ./src/xr/XRRenderTarget.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XRRenderTarget\": () => (/* binding */ XRRenderTarget)\n/* harmony export */ });\nclass XRRenderTarget {\n    constructor(context) {\n        this.isMSAA = false;\n        this.supportsInvalidateFramebuffer = /OculusBrowser/g.test(navigator.userAgent);\n        this.viewport = null;\n        this.renderBuffers = [];\n        this.ignoreDepthValue = false;\n        this.context = context;\n        this.target = context.gl.FRAMEBUFFER;\n        this.buffer = context.gl.createFramebuffer();\n        // @see\n        // https://github.com/oframe/ogl/blob/master/src/core/Renderer.js#L214\n        this.msaaTextureExtension = XRRenderTarget.USE_MSAA_TEXTURE_WHEN_EXIST\n            ? context.getExtension('WEBGL_multisampled_render_to_texture')\n            : null;\n    }\n    get depth() {\n        return !!this.depthTexture;\n    }\n    get width() {\n        var _a;\n        return this.subImageAttachment ? this.subImageAttachment.viewport.width : ((_a = this.referencedTexture) === null || _a === void 0 ? void 0 : _a.width) || 0;\n    }\n    get height() {\n        var _a;\n        return this.subImageAttachment ? this.subImageAttachment.viewport.height : ((_a = this.referencedTexture) === null || _a === void 0 ? void 0 : _a.height) || 0;\n    }\n    get isVirtual() {\n        return !this.subImageAttachment && !!this.referencedTexture;\n    }\n    get texture() {\n        var _a, _b;\n        return ((_a = this.subImageAttachment) === null || _a === void 0 ? void 0 : _a.colorTexture) || ((_b = this.referencedTexture) === null || _b === void 0 ? void 0 : _b.texture);\n    }\n    get depthTexture() {\n        var _a;\n        return (_a = this.subImageAttachment) === null || _a === void 0 ? void 0 : _a.depthStencilTexture;\n    }\n    attach(subImage, msaa = false) {\n        var _a;\n        const mssaChanged = msaa !== this.isMSAA;\n        if (!mssaChanged) {\n            if (subImage === this.subImageAttachment) {\n                return;\n            }\n            if (subImage.colorTexture === ((_a = this.subImageAttachment) === null || _a === void 0 ? void 0 : _a.colorTexture)) {\n                this.subImageAttachment = subImage;\n                return;\n            }\n        }\n        const { gl } = this.context;\n        const { msaaTextureExtension } = this;\n        this.isMSAA = msaa && !msaaTextureExtension;\n        this.subImageAttachment = subImage;\n        if (this.renderBuffers.length > 0) {\n            this.renderBuffers.forEach((buffer) => gl.deleteRenderbuffer(buffer));\n            this.renderBuffers = [];\n        }\n        if (this.isMSAA && !this.copyBuffer) {\n            this.copyBuffer = gl.createFramebuffer();\n        }\n        /**\n         * Create NON MSAA buffer and bind it\n         *\n         */\n        this.context.bindFramebuffer({\n            buffer: this.isMSAA ? this.copyBuffer : this.buffer,\n            target: gl.FRAMEBUFFER,\n        });\n        if (msaaTextureExtension) {\n            msaaTextureExtension.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, subImage.colorTexture, 0, 4);\n        }\n        else {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, subImage.colorTexture, 0);\n        }\n        if (subImage.depthStencilTexture) {\n            if (msaaTextureExtension)\n                msaaTextureExtension.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, subImage.depthStencilTexture, 0, 4);\n            else\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, subImage.depthStencilTexture, 0);\n        }\n        if (this.referencedTexture) {\n            this.copyFrom(this.referencedTexture);\n        }\n        /**\n         * MSAA\n         */\n        if (this.isMSAA) {\n            const samples = gl.getParameter(gl.MAX_SAMPLES);\n            // bind MSAA buffer\n            this.context.bindFramebuffer(this);\n            const rb = (this.renderBuffers[0] = gl.createRenderbuffer());\n            gl.bindRenderbuffer(gl.RENDERBUFFER, rb);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl.RGBA8, subImage.textureWidth, subImage.textureHeight);\n            if (subImage.depthStencilTexture) {\n                const rb = (this.renderBuffers[1] = gl.createRenderbuffer());\n                gl.bindRenderbuffer(gl.RENDERBUFFER, rb);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl.DEPTH_COMPONENT24, subImage.textureWidth, subImage.textureHeight);\n            }\n        }\n        this.context.bindFramebuffer();\n        this.referencedTexture = null;\n    }\n    copyFrom(texture) {\n        if (!texture.texture || texture.width * texture.width <= 0) {\n            return;\n        }\n        if (!this.subImageAttachment) {\n            this.referencedTexture = texture;\n        }\n        const { gl } = this.context;\n        this.context.bindFramebuffer({\n            buffer: this.isMSAA ? this.copyBuffer : this.buffer,\n            target: gl.FRAMEBUFFER,\n        });\n        // be sure that texture is actual\n        texture.update();\n        texture.bind();\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.texture, 0);\n        this.context.bind2DTextureDirect(this.subImageAttachment.colorTexture);\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, this.width, this.height);\n        // revert back\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.subImageAttachment.colorTexture, 0);\n        // unbind state\n        this.context.bindFramebuffer();\n    }\n    blit() {\n        if (!this.isMSAA) {\n            return;\n        }\n        const { gl } = this.context;\n        const { textureHeight, textureWidth } = this.subImageAttachment;\n        this.context.bindFramebuffer({ target: gl.READ_FRAMEBUFFER, buffer: this.buffer });\n        this.context.bindFramebuffer({ target: gl.DRAW_FRAMEBUFFER, buffer: this.copyBuffer });\n        let blitMask = gl.COLOR_BUFFER_BIT;\n        if (this.ignoreDepthValue === false) {\n            // eslint-disable-next-line no-bitwise\n            blitMask |= gl.DEPTH_BUFFER_BIT;\n        }\n        gl.blitFramebuffer(0, 0, textureWidth, textureHeight, 0, 0, textureWidth, textureHeight, blitMask, gl.NEAREST);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n        // unbind state\n        this.context.bindFramebuffer();\n    }\n    destroy() {\n        if (!this.buffer) {\n            return;\n        }\n        const { gl } = this.context;\n        gl.deleteFramebuffer(this.buffer);\n        this.copyBuffer && gl.deleteFramebuffer(this.copyBuffer);\n        this.renderBuffers.forEach((rb) => {\n            gl.deleteRenderbuffer(rb);\n        });\n        this.subImageAttachment = null;\n        this.target = 0;\n        this.viewport = null;\n        this.referencedTexture = null;\n        this.copyBuffer = null;\n        this.buffer = null;\n        this.renderBuffers = [];\n    }\n}\nXRRenderTarget.USE_MSAA_TEXTURE_WHEN_EXIST = true;\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/XRRenderTarget.ts?");

/***/ }),

/***/ "./src/xr/XRRenderer.ts":
/*!******************************!*\
  !*** ./src/xr/XRRenderer.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XRRenderer\": () => (/* binding */ XRRenderer)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var _layers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layers */ \"./src/xr/layers/index.ts\");\n/* harmony import */ var _XRState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XRState */ \"./src/xr/XRState.ts\");\n/* eslint-disable no-bitwise */\n/* eslint-disable no-restricted-globals */\n\n\n\nconst tempVec3 = new ogl__WEBPACK_IMPORTED_MODULE_2__.Vec3();\nconst ID = 1;\nclass XRRenderer extends ogl__WEBPACK_IMPORTED_MODULE_3__.Renderer {\n    constructor(options) {\n        super(options);\n        this.layers = [];\n        this._sortedLayers = [];\n        this._rafCallbacks = new Map();\n        this._callbackID = 0;\n        this._clearLoopDel = null;\n        this._multiviewAA = false;\n        this._activeLayerID = 0;\n        this.frustumCull = false;\n        this.xr = new _XRState__WEBPACK_IMPORTED_MODULE_1__.XRState(this);\n        this._onLayerDestroy = this._onLayerDestroy.bind(this);\n        this._internalLoop = this._internalLoop.bind(this);\n        this.xr.addEventListener('xrend', this.onSessionLost.bind(this));\n        this.xr.addEventListener('xrstart', this.onSessionStart.bind(this));\n        this.attrs = this.gl.getContextAttributes();\n        Object.values(XRRenderer.layersCtors).forEach((ctor) => {\n            ctor && (ctor.context = this);\n        });\n        this.state.clearColor = [0, 0, 0, 0];\n        /*\n        this._multiview = this.gl.getExtension('OCULUS_multiview');\n        this._multiviewAA = !!this._multiview;\n        this._multiview = this.gl.getExtension('OVR_multiview2');\n\n        if (this._multiview) {\n            console.debug('[MULTIVEW] ' + this.gl.getParameter(this._multiview.MAX_VIEWS_OVR));\n        }\n        */\n    }\n    setClearColor(r = 0, g = r, b = r, a = r) {\n        const { clearColor } = this.state;\n        clearColor[0] = Math.max(Math.min(1, r || 0));\n        clearColor[1] = Math.max(Math.min(1, g || 0));\n        clearColor[2] = Math.max(Math.min(1, b || 0));\n        clearColor[3] = Math.max(Math.min(1, a || 0));\n    }\n    _internalLoop(time, frame) {\n        const callbacks = [...this._rafCallbacks.values()];\n        this._rafCallbacks.clear();\n        callbacks.forEach((c) => c(time, frame));\n        this._attachLoop();\n    }\n    _clearLoop() {\n        var _a;\n        (_a = this._clearLoopDel) === null || _a === void 0 ? void 0 : _a.call(this);\n        this._clearLoopDel = null;\n    }\n    _attachLoop() {\n        this._clearLoop();\n        if (this.xr.active) {\n            this._clearLoopDel = this.xr.requestAnimationFrame(this._internalLoop);\n            return;\n        }\n        const id = window.requestAnimationFrame(this._internalLoop);\n        this._clearLoopDel = () => {\n            window.cancelAnimationFrame(id);\n        };\n    }\n    /**\n     * @deprecated use layer constructor instead\n     * @param type\n     * @param options\n     * @returns\n     */\n    createLayer(type = 'quad', options = {}) {\n        if (!this.xr) {\n            throw new Error('Layers can be requested ONLY in XR mode');\n        }\n        const Ctor = XRRenderer.layersCtors[type];\n        if (!Ctor) {\n            return null;\n        }\n        const layer = new Ctor(options);\n        return layer;\n    }\n    /**\n     * Try to bind virtual layer to native layer when XR is enabled and layer supported\n     */\n    /* internal */ bindNativeLayerTo(layer) {\n        // eslint-disable-next-line prefer-const\n        let { type, options, needsUpdateNative, useNative } = layer;\n        if (!useNative) {\n            layer.bindLayer(null);\n            return false;\n        }\n        if (!needsUpdateNative) {\n            return false;\n        }\n        let nativeLayer;\n        if (_XRState__WEBPACK_IMPORTED_MODULE_1__.XRState.layersSupport && !nativeLayer) {\n            options.space = this.xr.space;\n            try {\n                nativeLayer = this.xr.getLayer(type, options);\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                console.error('[LAYER Binding Error]', e);\n            }\n        }\n        layer.bindLayer(nativeLayer);\n        return !!nativeLayer;\n    }\n    registerLayer(layer) {\n        if (this.layers.indexOf(layer) > -1) {\n            this.layers.splice(this.layers.indexOf(layer), 1);\n        }\n        layer.onLayerDestroy = this._onLayerDestroy;\n        return this.layers.unshift(layer);\n    }\n    /* called by layer internal */\n    _onLayerDestroy(layer, nativeOnly) {\n        if (!nativeOnly) {\n            this.layers = this.layers.filter((e) => layer !== e);\n        }\n        this.xr.onLayerDestroy(layer.nativeLayer);\n    }\n    onSessionLost() {\n        this._clearLoop();\n        for (const layer of this.layers) {\n            // clear refs to native\n            layer.bindLayer(null);\n        }\n        // rerun render loop\n        this._attachLoop();\n        console.warn('XR Session end');\n    }\n    onSessionStart() {\n        this._attachLoop();\n        // must be, because we should render\n        this.xr.getLayer('base');\n        this.layers.forEach((l) => this.bindNativeLayerTo(l));\n    }\n    async requestXR(options) {\n        if (this.xr.active) {\n            return Promise.resolve();\n        }\n        await this.gl.makeXRCompatible();\n        this._clearLoop();\n        try {\n            await this.xr.requestSession(options);\n        }\n        finally {\n            this._attachLoop();\n        }\n        return this.xr;\n    }\n    requestAnimationFrame(callback) {\n        const id = this._callbackID++;\n        this._rafCallbacks.set(id, callback);\n        if (!this._clearLoopDel) {\n            this._attachLoop();\n        }\n        return id;\n    }\n    cancelAnimationFrame(id) {\n        this._rafCallbacks.delete(id);\n    }\n    setViewportUnchecked({ width, height, x = 0, y = 0 }) {\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n    bind2DTextureDirect(texture, slot = 0) {\n        // force update slot\n        this.state.activeTextureUnit = -1;\n        this.activeTexture(slot);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n        this.state.textureUnits[this.state.activeTextureUnit] = -1;\n    }\n    rebuildLayersState(frame) {\n        if (!this.xr.active) {\n            return;\n        }\n        const sortedLayers = [];\n        /**\n         * Dirty! This should be prepared in XRState\n         */\n        // check that layers is visible and need reconstruct state\n        // @todo need to deep traversing over layer rigid\n        for (const layer of this.layers) {\n            // allocate only visible layers\n            if (layer.visible && layer.willRender) {\n                this.bindNativeLayerTo(layer);\n                // has layers and should be sorted\n                if (layer.nativeLayer) {\n                    sortedLayers.push(layer);\n                }\n            }\n        }\n        // sort\n        sortedLayers.sort(this.sortTransparent);\n        // check that changes in order\n        const isOrderChanged = sortedLayers.length !== this._sortedLayers.length ||\n            sortedLayers.some((a, i) => this._sortedLayers[i] !== a);\n        // reconcile state\n        // all invisible layers MUST be killed or hidden\n        isOrderChanged && this.xr.setLayersOrder(sortedLayers.map((l) => l.nativeLayer));\n        this._sortedLayers = sortedLayers;\n        // update only known layers\n        for (const layer of sortedLayers) {\n            layer.update(frame);\n        }\n    }\n    /* internal */\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        const layerID = this._activeLayerID;\n        let renderList = [];\n        if (camera && frustumCull)\n            camera.updateFrustum();\n        // Get visible\n        scene.traverse((node) => {\n            node.willRender = true;\n            if (node.parent && !node.parent.willRender) {\n                node.willRender = false;\n                return;\n            }\n            if (!node.visible || (node.layerID != null && layerID !== node.layerID)) {\n                node.willRender = false;\n                return;\n            }\n            if (!node.draw) {\n                return;\n            }\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node))\n                    return;\n            }\n            renderList.push(node);\n        });\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                }\n                else if (node.program.depthTest) {\n                    transparent.push(node);\n                }\n                else {\n                    ui.push(node);\n                }\n                node.zDepth = 0;\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera)\n                    return;\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n            renderList = opaque.concat(transparent, ui);\n        }\n        return renderList;\n    }\n    _renderRenderListXR(renderlist, options) {\n        const { xr, gl } = this;\n        if (!xr.lastXRFrame || !xr.active) {\n            return;\n        }\n        const { camera } = options;\n        const { lastXRFrame, space, baseLayer, glBinding, baseLayerTarget } = xr;\n        const poses = lastXRFrame.getViewerPose(space);\n        if (!poses) {\n            return;\n        }\n        // move out\n        // or ok?\n        xr.inputSources.forEach((source) => { var _a; return (_a = source.viewTransformNode) === null || _a === void 0 ? void 0 : _a.update(xr); });\n        poses.views.forEach((view, i) => {\n            const { projectionMatrix, transform, eye } = view;\n            const { position, orientation } = transform;\n            let target;\n            let viewport;\n            if (baseLayer instanceof self.XRWebGLLayer) {\n                viewport = baseLayer.getViewport(view);\n                target = {\n                    target: gl.FRAMEBUFFER,\n                    buffer: baseLayer.framebuffer,\n                    width: viewport.width,\n                    height: viewport.height,\n                };\n            }\n            else {\n                const glSubImage = glBinding.getViewSubImage(baseLayer, view);\n                viewport = glSubImage.viewport;\n                target = baseLayerTarget;\n                if (i === 0) {\n                    baseLayerTarget.attach(glSubImage, this.attrs.antialias);\n                }\n            }\n            camera.projectionMatrix.copy(projectionMatrix);\n            camera.position.set(position.x, position.y, position.z);\n            camera.quaternion.set(orientation.x, orientation.y, orientation.z, orientation.w);\n            camera.updateMatrixWorld(true);\n            this.bindFramebuffer(target);\n            this.setViewportUnchecked(viewport);\n            // clear only once\n            if (i === 0 && (options.clear || (this.autoClear && options.clear !== false))) {\n                this._clear(target);\n            }\n            renderlist.forEach((n) => {\n                // set specific eye\n                n.program.eye = eye;\n                n.draw({ camera });\n            });\n        });\n        if (baseLayerTarget) {\n            baseLayerTarget.blit();\n        }\n        this.resetLayerPolyfillState();\n        this.rebuildLayersState(lastXRFrame);\n    }\n    // there some bugs in XR Layers polyfill\n    resetLayerPolyfillState() {\n        // reset state, XRLayer polyfill will corrupt state\n        this.currentGeometry = null;\n        this.bindVertexArray(null);\n        this.bindFramebuffer();\n        // Reset current active texture\n        // https://github.com/immersive-web/webxr-layers-polyfill/issues/25\n        this.bind2DTextureDirect(null, 0);\n    }\n    render({ scene, camera, target = null, update = true, sort = true, \n    /* frustumCull = this */\n    clear, }) {\n        const renderXR = !target && this.xr.active;\n        this.gl.clearColor(...this.state.clearColor);\n        if (!renderXR) {\n            // update regular layers\n            // without bounding\n            this.layers.forEach((e) => e.update(null));\n        }\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            // for XR not make sense anyway\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        }\n        else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n        if (renderXR || clear || (this.autoClear && clear !== false)) {\n            this._clear(target);\n        }\n        // updates all scene graph matrices\n        if (update)\n            scene.updateMatrixWorld();\n        // Update camera separately, in case not in scene graph\n        if (camera)\n            camera.updateMatrixWorld();\n        const renderList = this.getRenderList({ scene, frustumCull: this.frustumCull, sort, camera });\n        // render list\n        if (renderXR) {\n            this._renderRenderListXR(renderList, { scene, camera });\n        }\n        else {\n            renderList.forEach((n) => n.draw({ camera }));\n        }\n        // reset after loop, because can be bugged\n        this.currentProgram = -1;\n    }\n    _clear(target = null) {\n        // Ensure depth buffer writing is enabled so it can be cleared\n        if (this.depth && (!target || target.depth)) {\n            this.enable(this.gl.DEPTH_TEST);\n            this.setDepthMask(true);\n        }\n        this.gl.clear((this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n            (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n            (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0));\n    }\n}\nXRRenderer.layersCtors = {\n    cube: null,\n    sphere: null,\n    quad: _layers__WEBPACK_IMPORTED_MODULE_0__.OGLQuadLayer,\n};\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/XRRenderer.ts?");

/***/ }),

/***/ "./src/xr/XRState.ts":
/*!***************************!*\
  !*** ./src/xr/XRState.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XRState\": () => (/* binding */ XRState),\n/* harmony export */   \"getXR\": () => (/* binding */ getXR)\n/* harmony export */ });\n/* harmony import */ var webxr_layers_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webxr-layers-polyfill */ \"./node_modules/webxr-layers-polyfill/build/webxr-layers-polyfill.module.js\");\n/* harmony import */ var _XRRenderTarget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XRRenderTarget */ \"./src/xr/XRRenderTarget.ts\");\n\n\nfunction getXR() {\n    return navigator.xr;\n}\n/* Polyfill when needed */\ngetXR() && new webxr_layers_polyfill__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\nclass XRState extends EventTarget {\n    constructor(context) {\n        super();\n        /**\n         * All allocated layers\n         */\n        this.allocatedLayers = [];\n        /**\n         * Active presented layers\n         */\n        this.activeLayers = [];\n        this.baseLayer = null;\n        this.lastXRFrame = null;\n        this.scaleFactor = 1;\n        this.context = context;\n        this.onEnd = this.onEnd.bind(this);\n        this.onInputChanged = this.onInputChanged.bind(this);\n        this.onVisibleChanged = this.onVisibleChanged.bind(this);\n    }\n    /**\n     * Active layer without Projection\n     */\n    get activeCompositeLayerCount() {\n        return this.activeLayers.length;\n    }\n    async requestSession({ mode = 'immersive-vr', space = 'local', options = {\n        requiredFeatures: ['local'],\n        optionalFeatures: ['layers'],\n    }, } = {}) {\n        if (this.session) {\n            this.end();\n        }\n        const session = await getXR().requestSession(mode, options);\n        XRState.layersSupport = !!session.renderState.layers;\n        const refSpace = await session.requestReferenceSpace(space);\n        this.init(session, refSpace);\n        return this;\n    }\n    init(session, space) {\n        if (this.session) {\n            this.clear();\n        }\n        this.scaleFactor = window.XRWebGLLayer.getNativeFramebufferScaleFactor(session);\n        this.space = space;\n        this.session = session;\n        this.session.addEventListener('end', this.onEnd);\n        this.session.addEventListener('inputsourceschange', this.onInputChanged);\n        this.session.addEventListener('visibilitychange', this.onVisibleChanged);\n        this.dispatchEvent(new CustomEvent('xrstart', {\n            detail: this,\n        }));\n    }\n    get active() {\n        return !!this.session;\n    }\n    addEventListener(type, listener, options) {\n        super.addEventListener(type, listener, options);\n    }\n    removeEventListener(type, listener, options) {\n        super.addEventListener(type, listener, options);\n    }\n    onInputChanged() {\n        var _a;\n        this.dispatchEvent(new CustomEvent('xrinputsourceschange', {\n            detail: ((_a = this.session) === null || _a === void 0 ? void 0 : _a.inputSources) || [],\n        }));\n    }\n    onVisibleChanged() {\n        this.dispatchEvent(new CustomEvent('xrvisibilitychange', { detail: this.session.visibilityState }));\n    }\n    onEnd() {\n        this.clear();\n        this.onInputChanged();\n        this.dispatchEvent(new CustomEvent('xrend'));\n    }\n    get inputSources() {\n        var _a;\n        return ((_a = this.session) === null || _a === void 0 ? void 0 : _a.inputSources) || [];\n    }\n    // called from layer binding for dropping layer from state\n    /* internal */ onLayerDestroy(layer) {\n        if (!XRState.layersSupport || !this.session) {\n            return;\n        }\n        layer === null || layer === void 0 ? void 0 : layer.destroy();\n        if (!layer) {\n            return;\n        }\n        let index = this.allocatedLayers.indexOf(layer);\n        index > -1 && this.allocatedLayers.splice(index, 1);\n        index = this.activeLayers.indexOf(layer);\n        index > -1 && this.activeLayers.splice(index, 1);\n        this.updateRenderState();\n    }\n    /* internal */ setLayersOrder(layers) {\n        const count = Math.min(this.activeLayers.length, layers.length);\n        let orderChanged = this.activeLayers.length !== layers.length;\n        for (let i = 0; i < count && !orderChanged; i++) {\n            if (!layers[i]) {\n                throw new Error('Layer value is undef, invalid state!');\n            }\n            if (layers[i] !== this.activeLayers[i]) {\n                orderChanged = true;\n                break;\n            }\n        }\n        if (!orderChanged) {\n            return false;\n        }\n        this.activeLayers.length = 0;\n        this.activeLayers.push(...layers);\n        this.updateRenderState();\n        return true;\n    }\n    updateRenderState() {\n        if (XRState.layersSupport) {\n            this.session.updateRenderState({ layers: [...this.activeLayers, this.baseLayer] });\n        }\n        else {\n            this.session.updateRenderState({\n                baseLayer: this.baseLayer,\n            });\n        }\n        // eslint-disable-next-line no-console\n        console.debug('Regenerate render state');\n    }\n    /* internal */ getLayer(type = 'base', options = {\n        space: this.space,\n        viewPixelHeight: 100,\n        viewPixelWidth: 100,\n    }) {\n        options = Object.assign({ space: this.space, viewPixelHeight: 100, viewPixelWidth: 100 }, options);\n        if (!XRState.layersSupport && (type !== 'base' || this.allocatedLayers.length > 1)) {\n            // eslint-disable-next-line no-console\n            console.warn('[XR] Only single base layer is supported!');\n            return null;\n        }\n        let layer;\n        if (!XRState.layersSupport) {\n            this.baseLayer = new self.XRWebGLLayer(this.session, this.context.gl, {\n                framebufferScaleFactor: this.scaleFactor,\n            });\n        }\n        else if (!options) {\n            throw new Error('Only base layer can miss options!');\n        }\n        else {\n            this.glBinding = this.glBinding || new self.XRWebGLBinding(this.session, this.context.gl);\n            switch (type) {\n                case 'base': {\n                    this.baseLayer = this.glBinding.createProjectionLayer({ scaleFactor: this.scaleFactor });\n                    this.baseLayerTarget = new _XRRenderTarget__WEBPACK_IMPORTED_MODULE_1__.XRRenderTarget(this.context);\n                    this.baseLayerTarget.ignoreDepthValue = this.baseLayer.ignoreDepthValues;\n                    // eslint-disable-next-line no-console\n                    console.debug('Allocate presentation layer', this.baseLayer);\n                    break;\n                }\n                case 'quad': {\n                    layer = this.glBinding.createQuadLayer(options);\n                    break;\n                }\n                default:\n                    throw new Error(`Unsupported yet:${type}`);\n            }\n        }\n        // push front\n        if (layer) {\n            this.allocatedLayers.unshift(layer);\n            this.activeLayers.unshift(layer);\n        }\n        this.updateRenderState();\n        return layer;\n    }\n    /* internal */ requestAnimationFrame(callback) {\n        if (!this.session) {\n            throw new Error('Try to request anim frame on disabled XRState');\n        }\n        const loopid = this.session.requestAnimationFrame((time, frame) => {\n            this.lastXRFrame = frame;\n            callback(time, frame);\n            this.lastXRFrame = null;\n        });\n        return () => {\n            var _a;\n            (_a = this.session) === null || _a === void 0 ? void 0 : _a.cancelAnimationFrame(loopid);\n        };\n    }\n    end() {\n        if (!this.session) {\n            return;\n        }\n        const { session } = this;\n        this.clear();\n        this.onInputChanged();\n        session.end();\n    }\n    clear() {\n        var _a, _b, _c;\n        if (!this.session) {\n            return;\n        }\n        this.session.removeEventListener('end', this.onEnd);\n        this.session.removeEventListener('inputsourceschange', this.onInputChanged);\n        this.session.removeEventListener('visibilitychange', this.onVisibleChanged);\n        for (const layer of this.activeLayers) {\n            layer.destroy && layer.destroy();\n        }\n        this.allocatedLayers.length = 0;\n        this.activeLayers.length = 0;\n        this.session = null;\n        this.space = null;\n        (_a = this.baseLayerTarget) === null || _a === void 0 ? void 0 : _a.destroy();\n        (_c = (_b = this.baseLayer) === null || _b === void 0 ? void 0 : _b.destroy) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.baseLayerTarget = null;\n        this.baseLayer = null;\n        this.glBinding = null;\n    }\n}\nXRState.layersSupport = false;\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/XRState.ts?");

/***/ }),

/***/ "./src/xr/core/ExtendedProgram.ts":
/*!****************************************!*\
  !*** ./src/xr/core/ExtendedProgram.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ExtendedProgram\": () => (/* binding */ ExtendedProgram)\n/* harmony export */ });\n/* harmony import */ var _ProgramData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProgramData */ \"./src/xr/core/ProgramData.ts\");\n\nlet ID = 1;\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\nclass ExtendedProgram {\n    constructor(gl, { vertex = '', fragment = '', programData = null, uniforms = {}, transparent = false, cullFace = gl.BACK, frontFace = gl.CCW, depthTest = true, depthWrite = true, depthFunc = gl.LESS, } = {}) {\n        this.blendFunc = {};\n        this.blendEquation = {};\n        if (!gl.canvas)\n            console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n        if (!programData) {\n            if (!vertex)\n                console.warn('vertex shader not supplied');\n            if (!fragment)\n                console.warn('fragment shader not supplied');\n        }\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha)\n                this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else\n                this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n        this.programData = programData || _ProgramData__WEBPACK_IMPORTED_MODULE_0__.ProgramData.create(gl, { vertex, fragment });\n    }\n    set programData(p) {\n        if (p === this._programData) {\n            return;\n        }\n        if (!p) {\n            throw new Error('ProgramData MUST be valid');\n        }\n        if (this._programData) {\n            this._programData.usage--;\n        }\n        this._programData = p;\n        this._programData.usage++;\n    }\n    get programData() {\n        return this._programData;\n    }\n    /**\n     * Only for backward compatibility\n     * Internally we not should use this\n     */\n    get uniformLocations() {\n        return this.programData.uniformLocations;\n    }\n    get attributeLocations() {\n        // we need this because Geometry use it\n        return this.programData.attributeLocations;\n    }\n    get attributeOrder() {\n        // we need this because a Geometry use it\n        return this.programData.attributeOrder;\n    }\n    /**\n     * WebGLProgram instance, can be shared\n     * Only for backward compatibility\n     * Internally we not should use this\n     */\n    get program() {\n        return this.programData.program;\n    }\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n    }\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n    /**\n     * Fixed version\n     * @see https://github.com/oframe/ogl/issues/140\n     */\n    applyState() {\n        if (this.depthTest)\n            this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else\n            this.gl.renderer.disable(this.gl.DEPTH_TEST);\n        if (this.cullFace)\n            this.gl.renderer.enable(this.gl.CULL_FACE);\n        else\n            this.gl.renderer.disable(this.gl.CULL_FACE);\n        if (this.transparent)\n            this.gl.renderer.enable(this.gl.BLEND);\n        else\n            this.gl.renderer.disable(this.gl.BLEND);\n        if (this.cullFace)\n            this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.transparent)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const { gl, uniforms, programData } = this;\n        const { uniformLocations } = this.programData;\n        const programActive = gl.renderer.state.currentProgram === programData.id;\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            gl.useProgram(programData.program);\n            gl.renderer.state.currentProgram = programData.id;\n        }\n        // Set only the active uniforms found in the shader\n        uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n            // get supplied uniform\n            let uniform = uniforms[name];\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n            if (uniform.value.texture) {\n                // eslint-disable-next-line operator-assignment\n                textureUnit = textureUnit + 1;\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(gl, activeUniform.type, location, textureUnit);\n            }\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    // eslint-disable-next-line operator-assignment\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n                return setUniform(gl, activeUniform.type, location, textureUnits);\n            }\n            return setUniform(gl, activeUniform.type, location, uniform.value);\n        });\n        this.applyState();\n        if (flipFaces)\n            gl.renderer.setFrontFace(this.frontFace === gl.CCW ? gl.CW : gl.CCW);\n    }\n    remove() {\n        this.programData && this.programData.remove();\n        this.programData = null;\n    }\n}\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        }\n        else {\n            if (arraysEqual(setValue, value))\n                return void 0;\n            // Update cached array values\n            if (setValue.set) {\n                setValue.set(value);\n            }\n            else {\n                setArray(setValue, value);\n            }\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    }\n    else {\n        if (setValue === value)\n            return void 0;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n        default:\n            return void 0;\n    }\n}\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined)\n        return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value)\n        arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++)\n        value.set(a[i], i * valueLen);\n    return value;\n}\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100)\n        return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100)\n        console.warn('More than 100 program warnings - stopping logs.');\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/core/ExtendedProgram.ts?");

/***/ }),

/***/ "./src/xr/core/ProgramData.ts":
/*!************************************!*\
  !*** ./src/xr/core/ProgramData.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ProgramData\": () => (/* binding */ ProgramData)\n/* harmony export */ });\n/* eslint-disable no-console */\n/* eslint-disable prefer-destructuring */\n/**\n * Internal program data class, storing shader data for each Program instance\n * Used for reusing a native program for different Ogl programs without re-use of base shader.\n */\n// generate more stable UUID\n// eslint-disable-next-line no-bitwise\nconst genID = () => [...Array(4)].reduce((acc, _, i) => acc | (((Math.random() * 256) | 0) << i), 0);\nclass ProgramData {\n    constructor(gl, { vertex, fragment }) {\n        this.uniformLocations = new Map();\n        this.attributeLocations = new Map();\n        // eslint-disable-next-line no-bitwise\n        this.id = genID();\n        this.attributeOrder = '';\n        this.usage = 0;\n        this.gl = gl;\n        this.vertex = vertex;\n        this.fragment = fragment;\n        ProgramData.CACHE.set(this.vertex + this.fragment, this);\n        this.compile();\n    }\n    /**\n     * Create or return already existed program data for current shaders source\n     * @param { WebGLRenderingContext | WebGL2RenderingContext } gl\n     * @param {{ vertex: string, fragment: string}} param1\n     * @returns\n     */\n    static create(gl, { vertex, fragment }) {\n        return this.CACHE.get(vertex + fragment) || new ProgramData(gl, { vertex, fragment });\n    }\n    compile() {\n        if (this.program) {\n            return this;\n        }\n        const { gl, vertex, fragment } = this;\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            // eslint-disable-next-line no-use-before-define\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            // eslint-disable-next-line no-use-before-define\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            console.warn(gl.getProgramInfoLog(this.program));\n            return this;\n        }\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n        // Get active uniform locations\n        const numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            const uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n            // eslint-disable-next-line prefer-destructuring\n            uniform.uniformName = split[0];\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            }\n            else if (split.length === 2 && Number.isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n        // Get active attribute locations\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n        return this;\n    }\n    remove() {\n        this.usage--;\n        if (this.usage <= 0 && this.program) {\n            this.gl.deleteProgram(this.program);\n            ProgramData.CACHE.delete(this.vertex + this.fragment);\n        }\n        this.id = -1;\n        this.fragment = null;\n        this.vertex = null;\n        this.attributeLocations.clear();\n        this.attributeOrder = '';\n        this.uniformLocations.clear();\n    }\n}\n/**\n * @type {Map<string, ProgramData>}\n */\nProgramData.CACHE = new Map();\nfunction addLineNumbers(string) {\n    const lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        // eslint-disable-next-line prefer-template\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/core/ProgramData.ts?");

/***/ }),

/***/ "./src/xr/index.ts":
/*!*************************!*\
  !*** ./src/xr/index.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OGLQuadLayer\": () => (/* reexport safe */ _layers__WEBPACK_IMPORTED_MODULE_4__.OGLQuadLayer),\n/* harmony export */   \"OGLXRLayer\": () => (/* reexport safe */ _layers__WEBPACK_IMPORTED_MODULE_4__.OGLXRLayer),\n/* harmony export */   \"XRInputTransform\": () => (/* reexport safe */ _XRInputTransform__WEBPACK_IMPORTED_MODULE_0__.XRInputTransform),\n/* harmony export */   \"XRRenderTarget\": () => (/* reexport safe */ _XRRenderTarget__WEBPACK_IMPORTED_MODULE_2__.XRRenderTarget),\n/* harmony export */   \"XRRenderer\": () => (/* reexport safe */ _XRRenderer__WEBPACK_IMPORTED_MODULE_1__.XRRenderer),\n/* harmony export */   \"XRState\": () => (/* reexport safe */ _XRState__WEBPACK_IMPORTED_MODULE_3__.XRState),\n/* harmony export */   \"getXR\": () => (/* reexport safe */ _XRState__WEBPACK_IMPORTED_MODULE_3__.getXR)\n/* harmony export */ });\n/* harmony import */ var _XRInputTransform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./XRInputTransform */ \"./src/xr/XRInputTransform.ts\");\n/* harmony import */ var _XRRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XRRenderer */ \"./src/xr/XRRenderer.ts\");\n/* harmony import */ var _XRRenderTarget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./XRRenderTarget */ \"./src/xr/XRRenderTarget.ts\");\n/* harmony import */ var _XRState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./XRState */ \"./src/xr/XRState.ts\");\n/* harmony import */ var _layers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./layers */ \"./src/xr/layers/index.ts\");\n\n\n\n\n\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/index.ts?");

/***/ }),

/***/ "./src/xr/layers/OGLQuadLayer.ts":
/*!***************************************!*\
  !*** ./src/xr/layers/OGLQuadLayer.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OGLQuadLayer\": () => (/* binding */ OGLQuadLayer)\n/* harmony export */ });\n/* harmony import */ var _primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./primitives */ \"./src/xr/layers/primitives/index.ts\");\n/* harmony import */ var _OGLXRLayer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OGLXRLayer */ \"./src/xr/layers/OGLXRLayer.ts\");\n\n\nclass OGLQuadLayer extends _OGLXRLayer__WEBPACK_IMPORTED_MODULE_1__.OGLXRLayer {\n    constructor(options) {\n        // force RGBA\n        super(Object.assign(Object.assign({}, options), { colorFormat: WebGLRenderingContext.prototype.RGBA }));\n        this.type = 'quad';\n        this.initDone();\n    }\n    onTextureUpdate() {\n        super.onTextureUpdate();\n        const t = this._texture;\n        if (!t) {\n            return;\n        }\n        if (!this.useContentSize) {\n            return;\n        }\n        const { width, height } = this._texture;\n        if (width * height > 0 && this.viewPixelWidth !== width && this.viewPixelHeight !== height) {\n            this.viewPixelHeight = height;\n            this.viewPixelWidth = width;\n            // eslint-disable-next-line no-console\n            console.debug(`[Quad ${this.label}] Will update dimension follow texture size:`, width, height);\n        }\n    }\n    get isValid() {\n        // layer can be valid only with valid dimensions\n        // layer that less that 100 pixels area can't allocate native\n        return (this.options.width * this.options.height > 0 &&\n            this.options.viewPixelHeight * this.options.viewPixelWidth > 100);\n    }\n    set layout(v) {\n        this.options.layout = v;\n        this.dimensionsDirty = true;\n    }\n    get layout() {\n        return this.options.layout;\n    }\n    set width(v) {\n        this.options.width = v;\n        this.dimensionsDirty = true;\n    }\n    get width() {\n        return this.options.width;\n    }\n    set height(v) {\n        this.options.height = v;\n        this.dimensionsDirty = true;\n    }\n    get height() {\n        return this.options.height;\n    }\n    set viewPixelWidth(v) {\n        this.options.viewPixelWidth = v;\n        this.dimensionsDirty = true;\n        this.layerNeedReconstruct = true;\n    }\n    get viewPixelWidth() {\n        return this.options.viewPixelWidth;\n    }\n    set viewPixelHeight(v) {\n        this.options.viewPixelHeight = v;\n        this.dimensionsDirty = true;\n        this.layerNeedReconstruct = true;\n    }\n    get viewPixelHeight() {\n        return this.options.viewPixelHeight;\n    }\n    _createClipMesh() {\n        return new _primitives__WEBPACK_IMPORTED_MODULE_0__.QuadPrimitive(this.context.gl, this.options);\n    }\n    _updateNative(frame = null) {\n        var _a, _b;\n        super._updateNative(frame);\n        this.nativeLayer.transform = this.nativeTransform;\n        const redrawContent = this.contentDirty || ((_a = this._texture) === null || _a === void 0 ? void 0 : _a.needsUpdate);\n        if ((this.nativeLayer.needsRedraw || redrawContent) && frame && this._texture) {\n            if (!((_b = this.options.layout) === null || _b === void 0 ? void 0 : _b.includes('stereo'))) {\n                this.getRenderTarget(frame, 'none').copyFrom(this._texture);\n            }\n            else {\n                for (const key of ['left', 'right']) {\n                    this.getRenderTarget(frame, key).copyFrom(this._texture);\n                }\n            }\n            this.contentDirty = false;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/layers/OGLQuadLayer.ts?");

/***/ }),

/***/ "./src/xr/layers/OGLXRLayer.ts":
/*!*************************************!*\
  !*** ./src/xr/layers/OGLXRLayer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OGLXRLayer\": () => (/* binding */ OGLXRLayer)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Quat.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _XRRenderTarget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../XRRenderTarget */ \"./src/xr/XRRenderTarget.ts\");\n/* eslint-disable no-restricted-globals */\n\n\nconst tmpQuat = new ogl__WEBPACK_IMPORTED_MODULE_1__.Quat();\nconst tmpPos = new ogl__WEBPACK_IMPORTED_MODULE_2__.Vec3();\nlet ID = 0;\nclass OGLXRLayer extends ogl__WEBPACK_IMPORTED_MODULE_3__.Transform {\n    constructor(options) {\n        super();\n        this.type = 'none';\n        this.willRender = true;\n        this.id = 0;\n        this.contentDirty = false;\n        this.useNative = true;\n        this.clipMode = 'alpha';\n        // update layer pixel size depends of texture that attached to it\n        this.useContentSize = false;\n        // marked when needs call onLayerConstruct\n        this._needsCallReconstruct = false;\n        // called when layer was update by any reason\n        // or when native layer was constructed\n        this.onLayerConstruct = null;\n        this._texture = null;\n        this.dimensionsDirty = false;\n        this.transformDirty = true;\n        // marked when native layers must be reallocated\n        this.layerNeedReconstruct = false;\n        this.targets = {};\n        this.options = options || {};\n        this.context = this.constructor.context;\n        if (!this.context) {\n            throw new Error('Layer not registered in XRRenderer or called before init');\n        }\n        this.onLayerDestroy = () => undefined;\n        this.id = ID++;\n        this.label = `layer_${this.id}_${this.type}`;\n    }\n    set label(v) {\n        this._label = v || `layer_${this.id}_${this.type}`;\n    }\n    get label() {\n        return this._label;\n    }\n    /**\n     * @deprecated\n     * @see contentDirty\n     */\n    set dirty(v) {\n        this.contentDirty = true;\n    }\n    get dirty() {\n        return this.contentDirty;\n    }\n    get texture() {\n        return this._texture;\n    }\n    set texture(v) {\n        this.contentDirty = this.contentDirty || v !== this._texture || (v === null || v === void 0 ? void 0 : v.needsUpdate);\n        this._attachTexture(v);\n    }\n    get isNative() {\n        return !!this.nativeLayer;\n    }\n    get needsUpdateNative() {\n        return (OGLXRLayer.ALLOW_NATIVE &&\n            this.useNative &&\n            (!this.nativeLayer || this.layerNeedReconstruct) &&\n            this.isValid);\n    }\n    get isValid() {\n        return false;\n    }\n    /**\n     * External texture onUpdate event, fired when texture load to GPU\n     */\n    onTextureUpdate() {\n        this.contentDirty = true;\n    }\n    _attachTexture(texture) {\n        if (texture === this._texture) {\n            return;\n        }\n        const old = this._texture;\n        if (old) {\n            old.onUpdate = old._onUpdateCached;\n            old._onUpdateCached = null;\n        }\n        if (texture) {\n            texture._onUpdateCached = texture.onUpdate;\n            texture.onUpdate = () => {\n                var _a;\n                (_a = texture._onUpdateCached) === null || _a === void 0 ? void 0 : _a.call(texture);\n                this.onTextureUpdate();\n            };\n        }\n        this._needsCallReconstruct = true;\n        this._texture = texture;\n    }\n    initDone() {\n        this.id = this.context.registerLayer(this);\n        this.createClipMesh();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    _removeClipMesh(layers) { }\n    _createClipMesh() {\n        throw new Error('Not implemented');\n    }\n    getRenderTarget(frame, eye = 'none') {\n        const target = this.targets[eye] || new _XRRenderTarget__WEBPACK_IMPORTED_MODULE_0__.XRRenderTarget(this.context);\n        target.referencedTexture = this._texture;\n        target.attach(this.context.xr.glBinding.getSubImage(this.nativeLayer, frame, eye));\n        this.targets[eye] = target;\n        return target;\n    }\n    // bind layer, if layer is null - native will be unbound and dropped\n    /* internal */ bindLayer(layer) {\n        var _a;\n        if (layer === this.nativeLayer && (!this.layerNeedReconstruct || !layer)) {\n            return;\n        }\n        if (this.nativeLayer) {\n            (_a = this.onLayerDestroy) === null || _a === void 0 ? void 0 : _a.call(this, this, true);\n            this._destroyNative();\n        }\n        this.nativeLayer = layer;\n        if (layer) {\n            this._updateNative(null);\n        }\n        this.createClipMesh();\n        // if layer is presented, use clip mesh only as depth clipper\n        // eslint-disable-next-line no-nested-ternary\n        this.clipMesh.maskMode = layer\n            ? OGLXRLayer.ALLOW_ALPHA_CLIP && this.clipMode === 'alpha'\n                ? 'alpha'\n                : 'depth'\n            : 'none';\n        // always must be visible for intersection\n        this.clipMesh.visible = true; // !layer || (this.useDepthClip && OGLXRLayer.ALLOW_DEPTH_CLIP);\n        this.layerNeedReconstruct = false;\n        // force update layer after binding\n        this.contentDirty = true;\n        this._needsCallReconstruct = true;\n    }\n    _updateClipMesh(frame) {\n        // no update when not exis\n        if (this.nativeLayer) {\n            return;\n        }\n        if (this.dimensionsDirty) {\n            this.clipMesh.apply(this.options);\n        }\n        this.clipMesh.texture = this._texture;\n    }\n    _updateNative(frame = null) {\n        // we can pool it, XRRig not allow pooling\n        // need has a invalidate stat, but this is not implemented\n        if (this.transformDirty || !this.nativeTransform) {\n            this.updateMatrixWorld(true);\n            this.worldMatrix.getRotation(tmpQuat);\n            this.worldMatrix.getTranslation(tmpPos);\n            this.nativeTransform = new self.XRRigidTransform(tmpPos, tmpQuat);\n        }\n        if (this.dimensionsDirty) {\n            for (const key in this.nativeLayer) {\n                if (key in this.options) {\n                    this.nativeLayer[key] = this.options[key];\n                }\n            }\n            this._needsCallReconstruct = true;\n        }\n        this.nativeLayer.transform = this.nativeTransform;\n        if (this.label === 'right') {\n            const p = this.nativeTransform.position;\n            console.debug('right pos:', [p.x, p.y, p.z].map((e) => e.toFixed(3)).join(','));\n        }\n    }\n    update(frame) {\n        var _a;\n        // skip update\n        if (!(this.willRender && this.visible)) {\n            return;\n        }\n        this.clipMesh && this._updateClipMesh(frame);\n        this.nativeLayer && this._updateNative(frame);\n        // should be applied in top\n        this.dimensionsDirty = false;\n        if (this._needsCallReconstruct) {\n            (_a = this.onLayerConstruct) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n        this._needsCallReconstruct = false;\n    }\n    needUpdateTransform() {\n        this.transformDirty = true;\n    }\n    _destroyNative() {\n        this.nativeLayer = null;\n        this.nativeTransform = null;\n        this._needsCallReconstruct = true;\n    }\n    createClipMesh() {\n        if (this.clipMesh) {\n            return;\n        }\n        this.clipMesh = this._createClipMesh();\n        if (this.clipMesh) {\n            this.addChild(this.clipMesh);\n            this._updateClipMesh(null);\n        }\n    }\n    destroyClipMesh() {\n        var _a;\n        if (!this.clipMesh) {\n            return;\n        }\n        this._removeClipMesh(this.clipMesh);\n        (_a = this.clipMesh) === null || _a === void 0 ? void 0 : _a.setParent(null);\n        this.clipMesh = null;\n    }\n    destroy() {\n        var _a;\n        console.log('destroy native layer instance');\n        (_a = this.onLayerDestroy) === null || _a === void 0 ? void 0 : _a.call(this, this, false);\n        this._destroyNative();\n        for (const key in this.targets) {\n            this.targets[key].destroy();\n        }\n        this.targets = null;\n        this._texture = null;\n    }\n    dispose() {\n        this.destroy();\n    }\n}\nOGLXRLayer.ALLOW_NATIVE = true;\nOGLXRLayer.ALLOW_ALPHA_CLIP = true;\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/layers/OGLXRLayer.ts?");

/***/ }),

/***/ "./src/xr/layers/index.ts":
/*!********************************!*\
  !*** ./src/xr/layers/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OGLQuadLayer\": () => (/* reexport safe */ _OGLQuadLayer__WEBPACK_IMPORTED_MODULE_1__.OGLQuadLayer),\n/* harmony export */   \"OGLXRLayer\": () => (/* reexport safe */ _OGLXRLayer__WEBPACK_IMPORTED_MODULE_0__.OGLXRLayer)\n/* harmony export */ });\n/* harmony import */ var _OGLXRLayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OGLXRLayer */ \"./src/xr/layers/OGLXRLayer.ts\");\n/* harmony import */ var _OGLQuadLayer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OGLQuadLayer */ \"./src/xr/layers/OGLQuadLayer.ts\");\n\n\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/layers/index.ts?");

/***/ }),

/***/ "./src/xr/layers/primitives/ILayerPrimitive.ts":
/*!*****************************************************!*\
  !*** ./src/xr/layers/primitives/ILayerPrimitive.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/layers/primitives/ILayerPrimitive.ts?");

/***/ }),

/***/ "./src/xr/layers/primitives/PrimitiveMaterial.ts":
/*!*******************************************************!*\
  !*** ./src/xr/layers/primitives/PrimitiveMaterial.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PrimitiveMaterial\": () => (/* binding */ PrimitiveMaterial)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Texture.js\");\n/* harmony import */ var _core_ExtendedProgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../core/ExtendedProgram */ \"./src/xr/core/ExtendedProgram.ts\");\n/* eslint-disable no-use-before-define */\n/* eslint-disable max-classes-per-file */\n\n\nconst vertex = /* glsl */ `#version 300 es\r\n\tin vec3 position;\r\n\tin vec3 normal;\r\n\tin vec2 uv;\r\n\r\n\tuniform mat4 viewMatrix;\r\n\tuniform mat4 modelMatrix;\r\n\tuniform mat4 projectionMatrix;\r\n\r\n\tout vec2 vUv;\r\n\r\n\tvoid main() {\r\n\t\tvUv = uv;\r\n\t\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\r\n\t}\r\n`;\nconst fragment = /* glsl */ `#version 300 es\r\n\tprecision highp float;\r\n\tuniform sampler2D uTexture;\r\n\tuniform float uEye;\r\n\tuniform float uAlphaClip;\r\n\r\n\tin vec2 vUv;\r\n\tout vec4 color;\r\n\r\n\tvoid main() {\r\n\t\tvec2 uv = vUv;\r\n\r\n\t\tif (uEye > -1.0) {\r\n\t\t\tuv.x = clamp(0.0, 1., 0.5 * (uv.x + uEye));\r\n\t\t}\r\n\r\n\t\tcolor = texture(uTexture, uv);\r\n\r\n\t\tif (uAlphaClip > 0.0) {\r\n\t\t\tif (color.a < uAlphaClip) discard;\r\n\r\n\t\t\tcolor *= 0.0;\r\n\t\t}\r\n\t}\r\n`;\nconst EYE_SIDE_MAP = {\n    none: -1,\n    left: 0,\n    right: 1,\n};\nclass PrimitiveMaterial extends _core_ExtendedProgram__WEBPACK_IMPORTED_MODULE_0__.ExtendedProgram {\n    // MUST BE\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    constructor(context, texture = null) {\n        const uniforms = {\n            uTexture: {\n                value: texture,\n            },\n            uEye: {\n                value: -1,\n            },\n            uAlphaClip: {\n                value: 0,\n            },\n        };\n        super(context, { depthTest: true, transparent: true, cullFace: null, fragment, vertex, uniforms });\n        this.eye = 'none';\n        this.forcedEye = 'none';\n        this._maskMode = 'none';\n        this.cachedBlendState = null;\n        this.texture =\n            texture || PrimitiveMaterial.emptyTexture || (PrimitiveMaterial.emptyTexture = new ogl__WEBPACK_IMPORTED_MODULE_1__.Texture(context));\n        this.cachedBlendState = Object.assign({}, this.blendFunc);\n        this.maskMode = 'none';\n        this.depthTest = true;\n    }\n    /**\n     * Alpha only setter switch program to Alpha, witch allow render only alpha (fully transparent)\n     * Needed for sorting a layers\n     */\n    set maskMode(v) {\n        this._maskMode = v;\n        this.updateClipState();\n    }\n    get maskMode() {\n        return this._maskMode;\n    }\n    updateClipState() {\n        if (this._maskMode === 'alpha') {\n            this.setBlendFunc(WebGLRenderingContext.prototype.ZERO, WebGLRenderingContext.prototype.ONE_MINUS_SRC_ALPHA, WebGLRenderingContext.prototype.ZERO, // use only source alpha\n            WebGLRenderingContext.prototype.ONE_MINUS_SRC_ALPHA);\n            this.transparent = true;\n        }\n        else {\n            this.setBlendFunc(this.cachedBlendState.src, this.cachedBlendState.dst, this.cachedBlendState.srcAlpha, this.cachedBlendState.dstAlpha);\n        }\n        this.uniforms.uAlphaClip.value = this._maskMode === 'depth' ? 0.5 : 0;\n        this.transparent = this._maskMode !== 'depth';\n    }\n    use(options) {\n        var _a;\n        this.uniforms.uTexture.value = this.texture || PrimitiveMaterial.emptyTexture;\n        this.uniforms.uEye.value = (_a = EYE_SIDE_MAP[this.forcedEye || this.eye]) !== null && _a !== void 0 ? _a : EYE_SIDE_MAP.none;\n        super.use(options);\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/layers/primitives/PrimitiveMaterial.ts?");

/***/ }),

/***/ "./src/xr/layers/primitives/QuadPrimitive.ts":
/*!***************************************************!*\
  !*** ./src/xr/layers/primitives/QuadPrimitive.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"QuadPrimitive\": () => (/* binding */ QuadPrimitive)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/extras/Plane.js\");\n/* harmony import */ var _PrimitiveMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PrimitiveMaterial */ \"./src/xr/layers/primitives/PrimitiveMaterial.ts\");\n\n\nclass QuadPrimitive extends ogl__WEBPACK_IMPORTED_MODULE_1__.Mesh {\n    constructor(context, options = {}) {\n        super(context, {\n            // WebXR Layers size is in 2 times more that our\n            geometry: new ogl__WEBPACK_IMPORTED_MODULE_2__.Plane(context, { width: 2, height: 2 }),\n            program: new _PrimitiveMaterial__WEBPACK_IMPORTED_MODULE_0__.PrimitiveMaterial(context, null),\n        });\n        this.options = options;\n        this._renderOrder = 0;\n        this.apply(options);\n    }\n    set renderOrder(v) {\n        this._renderOrder = v;\n    }\n    get renderOrder() {\n        return this.maskMode !== 'none' ? 0 : this._renderOrder;\n    }\n    set maskMode(v) {\n        this.program.maskMode = v;\n    }\n    get maskMode() {\n        return this.program.maskMode;\n    }\n    set eye(v) {\n        var _a, _b;\n        if ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.includes('stereo')) {\n            this.program.forcedEye = null;\n            this.program.eye = v;\n        }\n        else {\n            this.program.forcedEye = 'none';\n        }\n    }\n    get eye() {\n        return this.program.eye;\n    }\n    set texture(v) {\n        this.program.texture = v;\n    }\n    get texture() {\n        return this.program.texture;\n    }\n    apply({ width = 1, height = 1 }) {\n        this.scale.set(width, height, 1);\n    }\n}\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/layers/primitives/QuadPrimitive.ts?");

/***/ }),

/***/ "./src/xr/layers/primitives/index.ts":
/*!*******************************************!*\
  !*** ./src/xr/layers/primitives/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PrimitiveMaterial\": () => (/* reexport safe */ _PrimitiveMaterial__WEBPACK_IMPORTED_MODULE_2__.PrimitiveMaterial),\n/* harmony export */   \"QuadPrimitive\": () => (/* reexport safe */ _QuadPrimitive__WEBPACK_IMPORTED_MODULE_1__.QuadPrimitive)\n/* harmony export */ });\n/* harmony import */ var _ILayerPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ILayerPrimitive */ \"./src/xr/layers/primitives/ILayerPrimitive.ts\");\n/* harmony import */ var _QuadPrimitive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QuadPrimitive */ \"./src/xr/layers/primitives/QuadPrimitive.ts\");\n/* harmony import */ var _PrimitiveMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PrimitiveMaterial */ \"./src/xr/layers/primitives/PrimitiveMaterial.ts\");\n\n\n\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/layers/primitives/index.ts?");

/***/ }),

/***/ "./src/xr/xrInputCorrection.ts":
/*!*************************************!*\
  !*** ./src/xr/xrInputCorrection.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CORRECTIONS\": () => (/* binding */ CORRECTIONS),\n/* harmony export */   \"DUMMY_CORRECTION\": () => (/* binding */ DUMMY_CORRECTION),\n/* harmony export */   \"addCorrection\": () => (/* binding */ addCorrection),\n/* harmony export */   \"getCorrection\": () => (/* binding */ getCorrection)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Euler.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Quat.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"./node_modules/ogl/src/math/Mat4.js\");\n\nconst DUMMY_CORRECTION = {\n    offset: new ogl__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n    rotation: new ogl__WEBPACK_IMPORTED_MODULE_1__.Euler(),\n    quat: new ogl__WEBPACK_IMPORTED_MODULE_2__.Quat(),\n    scale: new ogl__WEBPACK_IMPORTED_MODULE_0__.Vec3(1, 1, 1),\n    matrix: new ogl__WEBPACK_IMPORTED_MODULE_3__.Mat4(),\n};\nconst CORRECTIONS = new Map();\nconst getCorrection = (input, ray = false) => {\n    const correction = CORRECTIONS.get(input.profiles[0] + input.handedness);\n    if (!correction)\n        return DUMMY_CORRECTION;\n    const record = ray ? correction.ray : correction.controller;\n    if (!record)\n        return DUMMY_CORRECTION;\n    if (!record.matrix) {\n        record.matrix = new ogl__WEBPACK_IMPORTED_MODULE_3__.Mat4();\n        record.matrix.compose(record.quat, record.offset, record.scale);\n    }\n    return record;\n};\nconst normalize = (record) => {\n    const rotation = new ogl__WEBPACK_IMPORTED_MODULE_1__.Euler(...(record.rotation || [0, 0, 0]));\n    rotation.x *= Math.PI / 180;\n    rotation.y *= Math.PI / 180;\n    rotation.z *= Math.PI / 180;\n    rotation.order = 'XYZ';\n    // update lazy\n    return {\n        matrix: null,\n        offset: new ogl__WEBPACK_IMPORTED_MODULE_0__.Vec3(...(record.offset || [0, 0, 0])),\n        scale: new ogl__WEBPACK_IMPORTED_MODULE_0__.Vec3(...(record.scale || [1, 1, 1])),\n        quat: new ogl__WEBPACK_IMPORTED_MODULE_2__.Quat().fromEuler(rotation),\n        rotation,\n    };\n};\nconst addCorrection = (record) => {\n    if (!record.profile) {\n        throw new Error('Correction profile must have valid profile name');\n    }\n    if (!record.handedness)\n        return;\n    for (const name in record.handedness) {\n        const key = record.profile + name;\n        const subRecords = record.handedness[name];\n        CORRECTIONS.set(key, {\n            ray: subRecords.ray ? normalize(subRecords.ray) : null,\n            controller: subRecords.controller ? normalize(subRecords.controller) : null,\n        });\n    }\n};\n// oculus-touch-v3\naddCorrection({\n    profile: 'oculus-touch-v3',\n    handedness: {\n        left: {\n            ray: { offset: [0.0175, 0., 0.0], rotation: [0, -7, 0] },\n        },\n        right: {\n            ray: { offset: [-0.0175, 0., 0.0], rotation: [0, 7, 0] },\n        },\n    },\n});\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./src/xr/xrInputCorrection.ts?");

/***/ }),

/***/ "./node_modules/webxr-layers-polyfill/build/webxr-layers-polyfill.module.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/webxr-layers-polyfill/build/webxr-layers-polyfill.module.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @license\n * webxr-layers-polyfill\n * Version 1.0.2\n * Copyright (c) 2021 Facebook, Inc. and its affiliates.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n*/\n\n/**\n * @license\n * gl-matrix \n * Version 3.3.0\n * Copyright (c) 2015-2020, Brandon Jones, Colin MacKenzie IV.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n*/ \n\nvar XRTextureType;\n(function (XRTextureType) {\n    XRTextureType[\"texture\"] = \"texture\";\n    XRTextureType[\"texture-array\"] = \"texture-array\";\n})(XRTextureType || (XRTextureType = {}));\nvar XRLayerLayout;\n(function (XRLayerLayout) {\n    XRLayerLayout[\"default\"] = \"default\";\n    XRLayerLayout[\"mono\"] = \"mono\";\n    XRLayerLayout[\"stereo\"] = \"stereo\";\n    XRLayerLayout[\"stereo-left-right\"] = \"stereo-left-right\";\n    XRLayerLayout[\"stereo-top-bottom\"] = \"stereo-top-bottom\";\n})(XRLayerLayout || (XRLayerLayout = {}));\n\nconst isReferenceSpace = (arg) => {\n    return arg && typeof arg.getOffsetReferenceSpace === 'function';\n};\n\nconst getGlobal = () => {\n    return typeof __webpack_require__.g !== 'undefined'\n        ? __webpack_require__.g\n        : typeof self !== 'undefined'\n            ? self\n            : typeof window !== 'undefined'\n                ? window\n                : {};\n};\n\nclass XRCompositionLayerPolyfill {\n    constructor() {\n        this._hasRunDeferredInitialize = false;\n        this._media = null;\n    }\n    initialize(session, context) {\n        this.session = session;\n        if (context) {\n            this.context = context;\n        }\n        this.blendTextureSourceAlpha = true;\n        this.chromaticAberrationCorrection = false;\n    }\n    destroy() {\n        this._colorTextures = [];\n        this._depthStencilTextures = [];\n    }\n    addEventListener(type, listener, options) { }\n    dispatchEvent(event) {\n        return false;\n    }\n    removeEventListener(type, callback, options) { }\n    getContext() {\n        return this.context;\n    }\n    getTextureType() {\n        throw new Error('Unimplemented');\n    }\n    get colorTextures() {\n        return this._colorTextures;\n    }\n    get depthStencilTextures() {\n        return this._depthStencilTextures;\n    }\n    get colorTexturesMeta() {\n        return this._texturesMeta;\n    }\n    get media() {\n        if (!this.isMediaLayer()) {\n            console.warn('Attempted to retrieve media from a non-media layer');\n        }\n        return this._media;\n    }\n    determineLayoutAttribute(textureType, context, layout) {\n        if (!(context instanceof WebGL2RenderingContext) &&\n            textureType === XRTextureType['texture-array']) {\n            throw new TypeError();\n        }\n        if (layout === XRLayerLayout.mono) {\n            return layout;\n        }\n        if (layout === XRLayerLayout.default) {\n            if (this.session.internalViews && this.session.internalViews.length === 1) {\n                return XRLayerLayout['mono'];\n            }\n            if (textureType === XRTextureType['texture-array']) {\n                return layout;\n            }\n        }\n        if (layout === XRLayerLayout.default || layout === XRLayerLayout.stereo) {\n            return XRLayerLayout['stereo-left-right'];\n        }\n        return layout;\n    }\n    isMediaLayer() {\n        return this._media !== null;\n    }\n    _deferredInitialize() { }\n    initializeIfNeeded() {\n        if (!this._hasRunDeferredInitialize) {\n            this._hasRunDeferredInitialize = true;\n            this._deferredInitialize();\n        }\n    }\n    _allocateColorTexturesInternal(textureType, init) {\n        let session = this.session;\n        let views = session.internalViews;\n        if (!views || views.length === 0) {\n            console.warn(\"We can't allocate color textures without views\");\n            return;\n        }\n        this.initializeIfNeeded();\n        if (this.layout === XRLayerLayout.mono) {\n            if (textureType === XRTextureType['texture-array']) {\n                const newTexture = this._createNewColorTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.colorFormat);\n                this._texturesMeta = [newTexture];\n                this._colorTextures = [newTexture.texture];\n                return;\n            }\n            else {\n                const newTexture = this._createNewColorTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.colorFormat);\n                this._texturesMeta = [newTexture];\n                this._colorTextures = [newTexture.texture];\n                return;\n            }\n        }\n        else if (this.layout === XRLayerLayout.stereo) {\n            if (textureType === XRTextureType['texture-array']) {\n                const newTexture = this._createNewColorTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.colorFormat, 2);\n                this._texturesMeta = [newTexture];\n                this._colorTextures = [newTexture.texture];\n                return;\n            }\n            else {\n                const texture1 = this._createNewColorTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.colorFormat);\n                const texture2 = this._createNewColorTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.colorFormat);\n                this._texturesMeta = [texture1, texture2];\n                this._colorTextures = [texture1.texture, texture2.texture];\n                return;\n            }\n        }\n        else if (this.layout === XRLayerLayout['stereo-left-right']) {\n            const newTexture = this._createNewColorTexture(init.viewPixelWidth * 2, init.viewPixelHeight, textureType, init.colorFormat);\n            this._texturesMeta = [newTexture];\n            this._colorTextures = [newTexture.texture];\n            return;\n        }\n        else if (this.layout === XRLayerLayout['stereo-top-bottom']) {\n            const newTexture = this._createNewColorTexture(init.viewPixelWidth, init.viewPixelHeight * 2, textureType, init.colorFormat);\n            this._texturesMeta = [newTexture];\n            this._colorTextures = [newTexture.texture];\n            return;\n        }\n    }\n    _allocateDepthStencilTexturesInternal(textureType, init) {\n        if (!init.depthFormat) {\n            this._depthStencilTextures = [];\n            return;\n        }\n        if (this._getSupportedDepthFormats().indexOf(init.depthFormat) < 0) {\n            throw new Error('Depth format provided is not supported in non-projection layers.');\n        }\n        if (init.mipLevels < 1) {\n            throw new Error('Invalid miplevel. Miplevel needs to be >= 1');\n        }\n        if (this.layout === XRLayerLayout.mono) {\n            if (textureType === XRTextureType['texture-array']) {\n                const newTexture = this._createNewDepthStencilTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.depthFormat);\n                this._depthStencilTextures = [newTexture.texture];\n                return;\n            }\n            else {\n                const newTexture = this._createNewColorTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.depthFormat);\n                this._depthStencilTextures = [newTexture.texture];\n                return;\n            }\n        }\n        else if (this.layout === XRLayerLayout.stereo) {\n            if (textureType === XRTextureType['texture-array']) {\n                const newTexture = this._createNewDepthStencilTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.depthFormat, 2);\n                this._depthStencilTextures = [newTexture.texture];\n                return;\n            }\n            else {\n                const texture1 = this._createNewDepthStencilTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.depthFormat);\n                const texture2 = this._createNewDepthStencilTexture(init.viewPixelWidth, init.viewPixelHeight, textureType, init.depthFormat);\n                this._depthStencilTextures = [texture1.texture, texture2.texture];\n                return;\n            }\n        }\n        else if (this.layout === XRLayerLayout['stereo-left-right']) {\n            const newTexture = this._createNewDepthStencilTexture(init.viewPixelWidth * 2, init.viewPixelHeight, textureType, init.depthFormat);\n            this._depthStencilTextures = [newTexture.texture];\n            return;\n        }\n        else if (this.layout === XRLayerLayout['stereo-top-bottom']) {\n            const newTexture = this._createNewDepthStencilTexture(init.viewPixelWidth, init.viewPixelHeight * 2, textureType, init.depthFormat);\n            this._depthStencilTextures = [newTexture.texture];\n            return;\n        }\n    }\n    _createNewColorTexture(width, height, textureType, colorFormat, layers = 1) {\n        return this._createGenericPolyfillTexture(textureType, width, height, colorFormat, 0, layers);\n    }\n    _createNewDepthStencilTexture(width, height, textureType, depthFormat, layers = 1) {\n        return this._createGenericPolyfillTexture(textureType, width, height, depthFormat, 0, layers);\n    }\n    _createGenericPolyfillTexture(textureType, width, height, textureFormat, mipmapLevel = 0, numLayers = 1) {\n        if (textureType === XRTextureType['texture-array'] && numLayers <= 1) {\n            console.warn('creating a texture array with a single layer...');\n        }\n        if (textureType === XRTextureType['texture-array'] &&\n            this.context instanceof WebGLRenderingContext) {\n            throw new Error('WebGL 1 does not support texture array');\n        }\n        let texture = this.context.createTexture();\n        let textureMeta = {\n            width,\n            height,\n            layers: numLayers,\n            type: textureType,\n            textureFormat: textureFormat,\n            texture,\n        };\n        let internalFormat = textureFormat;\n        if (this.context instanceof WebGL2RenderingContext) {\n            if (internalFormat === this.context.DEPTH_COMPONENT) {\n                internalFormat = this.context.DEPTH_COMPONENT24;\n            }\n            if (internalFormat === this.context.DEPTH_STENCIL) {\n                internalFormat = this.context.DEPTH24_STENCIL8;\n            }\n        }\n        let texImageType = this.context.UNSIGNED_BYTE;\n        if (textureFormat === this.context.DEPTH_COMPONENT) {\n            texImageType = this.context.UNSIGNED_INT;\n        }\n        if (this.context instanceof WebGL2RenderingContext) {\n            if (textureFormat === this.context.DEPTH_COMPONENT24) {\n                texImageType = this.context.UNSIGNED_INT;\n            }\n            if (textureFormat === this.context.DEPTH24_STENCIL8 ||\n                textureFormat === this.context.DEPTH_STENCIL) {\n                texImageType = this.context.UNSIGNED_INT_24_8;\n            }\n        }\n        else {\n            if (textureFormat === this.context.DEPTH_STENCIL) {\n                texImageType = this.context.UNSIGNED_INT_24_8_WEBGL;\n            }\n        }\n        if (textureType === XRTextureType['texture-array'] &&\n            this.context instanceof WebGL2RenderingContext) {\n            console.warn('texture-array layers are supported...questionably in the polyfill at the moment. Use at your own risk.');\n            const existingTextureBinding = this.context.getParameter(this.context.TEXTURE_BINDING_2D_ARRAY);\n            this.context.bindTexture(this.context.TEXTURE_2D_ARRAY, texture);\n            if (this._getSupportedDepthFormats().indexOf(textureFormat) >= 0) {\n                this.context.texStorage3D(this.context.TEXTURE_2D_ARRAY, 1, internalFormat, width, height, numLayers);\n            }\n            else {\n                this.context.texImage3D(this.context.TEXTURE_2D_ARRAY, 0, internalFormat, width, height, numLayers, 0, textureFormat, texImageType, null);\n            }\n            this.context.bindTexture(this.context.TEXTURE_2D_ARRAY, existingTextureBinding);\n        }\n        else {\n            const existingTextureBinding = this.context.getParameter(this.context.TEXTURE_BINDING_2D);\n            this.context.bindTexture(this.context.TEXTURE_2D, texture);\n            this.context.texImage2D(this.context.TEXTURE_2D, 0, internalFormat, width, height, 0, textureFormat, texImageType, null);\n            this.context.bindTexture(this.context.TEXTURE_2D, existingTextureBinding);\n        }\n        return textureMeta;\n    }\n    _getSupportedDepthFormats() {\n        const supportedDepthFormats = [];\n        if (this.context instanceof WebGLRenderingContext) {\n            if (!this.context.getExtension('WEBGL_depth_texture')) {\n                return supportedDepthFormats;\n            }\n        }\n        supportedDepthFormats.push(this.context.DEPTH_COMPONENT, this.context.DEPTH_STENCIL);\n        if (this.context instanceof WebGL2RenderingContext) {\n            supportedDepthFormats.push(this.context.DEPTH_COMPONENT24, this.context.DEPTH24_STENCIL8);\n        }\n        return supportedDepthFormats;\n    }\n}\n\nconst defaultCylinderLayerInit = {\n    colorFormat: 0x1908,\n    mipLevels: 1,\n    layout: XRLayerLayout.mono,\n    isStatic: false,\n    space: null,\n    viewPixelHeight: 0,\n    viewPixelWidth: 0,\n    textureType: XRTextureType.texture,\n    radius: 2.0,\n    centralAngle: 0.78539,\n    aspectRatio: 2.0,\n};\nconst defaultMediaCylinderLayerInit = {\n    layout: XRLayerLayout.mono,\n    invertStereo: false,\n    space: null,\n    radius: 2.0,\n    centralAngle: 0.78539,\n};\nclass XRCylinderLayer extends XRCompositionLayerPolyfill {\n    constructor(init, media) {\n        super();\n        this._media = media !== null && media !== void 0 ? media : null;\n        if (this.isMediaLayer()) {\n            this.init = Object.assign(Object.assign({}, defaultMediaCylinderLayerInit), init);\n        }\n        else {\n            this.init = Object.assign(Object.assign({}, defaultCylinderLayerInit), init);\n        }\n        this.radius = this.init.radius;\n        this.centralAngle = this.init.centralAngle;\n        this.aspectRatio = this.init.aspectRatio;\n        this.space = this.init.space;\n        this.layout = this.init.layout;\n        const _global = getGlobal();\n        if (this.init.transform) {\n            this.transform = new _global.XRRigidTransform(init.transform.position, init.transform.orientation);\n        }\n        else {\n            this.transform = new _global.XRRigidTransform({\n                x: 0,\n                y: 0,\n                z: 0,\n                w: 1,\n            });\n        }\n        if (!this.isMediaLayer()) {\n            this.isStatic = init.isStatic;\n        }\n    }\n    getTextureType() {\n        if (this.isMediaLayer()) {\n            return XRTextureType.texture;\n        }\n        return this.init.textureType;\n    }\n    _deferredInitialize() {\n        let layout = this.determineLayoutAttribute(this.init.textureType, this.context, this.init.layout);\n        this.layout = layout;\n        this.needsRedraw = true;\n    }\n    get colorTextures() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._colorTextures || !this._colorTextures.length) {\n            this._allocateColorTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._colorTextures;\n    }\n    get depthStencilTextures() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._depthStencilTextures || !this._depthStencilTextures.length) {\n            this._allocateDepthStencilTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._depthStencilTextures;\n    }\n    get colorTexturesMeta() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._colorTextures || !this._colorTextures.length) {\n            this._allocateColorTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._texturesMeta;\n    }\n    get width() {\n        const circumference = 2 * this.radius * Math.PI;\n        const percentage = this.centralAngle / (2 * Math.PI);\n        return circumference * percentage;\n    }\n    get height() {\n        return this.width / this.aspectRatio;\n    }\n}\n\nconst defaultEquirectLayerInit = {\n    colorFormat: 0x1908,\n    mipLevels: 1,\n    layout: XRLayerLayout.mono,\n    isStatic: false,\n    space: null,\n    viewPixelHeight: 0,\n    viewPixelWidth: 0,\n    textureType: XRTextureType.texture,\n    radius: 0,\n    centralHorizontalAngle: 6.28318,\n    upperVerticalAngle: 1.570795,\n    lowerVerticalAngle: -1.570795,\n};\nconst defaultMediaEquirectLayerInit = {\n    space: null,\n    layout: XRLayerLayout.mono,\n    invertStereo: false,\n    radius: 0,\n    centralHorizontalAngle: 6.28318,\n    upperVerticalAngle: 1.570795,\n    lowerVerticalAngle: -1.570795,\n};\nclass XREquirectLayer extends XRCompositionLayerPolyfill {\n    constructor(init, media) {\n        super();\n        this._media = media !== null && media !== void 0 ? media : null;\n        if (this.isMediaLayer()) {\n            this.init = Object.assign(Object.assign({}, defaultMediaEquirectLayerInit), init);\n        }\n        else {\n            this.init = Object.assign(Object.assign({}, defaultEquirectLayerInit), init);\n        }\n        if (!isReferenceSpace(this.init.space)) {\n            throw new TypeError(\"Equirect layer's space needs to be an XRReferenceSpace\");\n        }\n        this.radius = this.init.radius;\n        this.centralHorizontalAngle = this.init.centralHorizontalAngle;\n        this.upperVerticalAngle = this.init.upperVerticalAngle;\n        this.lowerVerticalAngle = this.init.lowerVerticalAngle;\n        this.space = this.init.space;\n        this.layout = this.init.layout;\n        const _global = getGlobal();\n        if (init.transform) {\n            this.transform = new _global.XRRigidTransform(init.transform.position, init.transform.orientation);\n        }\n        else {\n            this.transform = new _global.XRRigidTransform({\n                x: 0,\n                y: 0,\n                z: 0,\n                w: 1,\n            });\n        }\n        if (!this.isMediaLayer()) {\n            this.isStatic = init.isStatic;\n        }\n    }\n    getTextureType() {\n        if (this.isMediaLayer()) {\n            return XRTextureType.texture;\n        }\n        return this.init.textureType;\n    }\n    _deferredInitialize() {\n        let layout = this.determineLayoutAttribute(this.init.textureType, this.context, this.init.layout);\n        this.layout = layout;\n        this.needsRedraw = true;\n    }\n    get colorTextures() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._colorTextures || !this._colorTextures.length) {\n            this._allocateColorTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._colorTextures;\n    }\n    get depthStencilTextures() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._depthStencilTextures || !this._depthStencilTextures.length) {\n            this._allocateDepthStencilTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._depthStencilTextures;\n    }\n    get colorTexturesMeta() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._colorTextures || !this._colorTextures.length) {\n            this._allocateColorTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._texturesMeta;\n    }\n}\n\nconst defaultQuadLayerInit = {\n    colorFormat: 0x1908,\n    mipLevels: 1,\n    layout: XRLayerLayout.mono,\n    isStatic: false,\n    space: null,\n    viewPixelHeight: 0,\n    viewPixelWidth: 0,\n    textureType: XRTextureType.texture,\n    width: 1.0,\n    height: 1.0,\n};\nconst defaultMediaQuadLayerInit = {\n    space: null,\n    layout: XRLayerLayout.mono,\n    invertStereo: false,\n};\nclass XRQuadLayer extends XRCompositionLayerPolyfill {\n    constructor(init, media) {\n        super();\n        this._media = media !== null && media !== void 0 ? media : null;\n        if (this.isMediaLayer()) {\n            this.init = Object.assign(Object.assign({}, defaultMediaQuadLayerInit), init);\n        }\n        else {\n            this.init = Object.assign(Object.assign({}, defaultQuadLayerInit), init);\n        }\n        this.width = this.init.width;\n        this.height = this.init.height;\n        this.space = this.init.space;\n        this.layout = this.init.layout;\n        const _global = getGlobal();\n        if (this.init.transform) {\n            this.transform = new _global.XRRigidTransform(init.transform.position, init.transform.orientation);\n        }\n        else {\n            this.transform = new _global.XRRigidTransform({\n                x: 0,\n                y: 0,\n                z: 0,\n                w: 1,\n            });\n        }\n        if (!this.isMediaLayer()) {\n            this.isStatic = init.isStatic;\n        }\n    }\n    getTextureType() {\n        if (this.isMediaLayer()) {\n            return XRTextureType.texture;\n        }\n        return this.init.textureType;\n    }\n    _deferredInitialize() {\n        let layout = this.determineLayoutAttribute(this.init.textureType, this.context, this.init.layout);\n        this.layout = layout;\n        this.needsRedraw = true;\n    }\n    get colorTextures() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._colorTextures || !this._colorTextures.length) {\n            this._allocateColorTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._colorTextures;\n    }\n    get depthStencilTextures() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._depthStencilTextures || !this._depthStencilTextures.length) {\n            this._allocateDepthStencilTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._depthStencilTextures;\n    }\n    get colorTexturesMeta() {\n        if (this.isMediaLayer()) {\n            throw new Error('Media layers do not have associated textures');\n        }\n        if (!this._colorTextures || !this._colorTextures.length) {\n            this._allocateColorTexturesInternal(this.getTextureType(), this.init);\n        }\n        return this._texturesMeta;\n    }\n}\n\nclass XRMediaBindingPolyfill {\n    constructor(session) {\n        this.session = session;\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n    }\n    createQuadLayer(video, init) {\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n        if (init.layout === XRLayerLayout.default) {\n            throw new TypeError('Media Quad layer cannot be created with layout of default');\n        }\n        let aspectRatio = this.calculateAspectRatio(video, init.layout);\n        if (init.width === undefined && init.height === undefined) {\n            init.width = 1;\n        }\n        if (init.height === undefined) {\n            init.height = init.width / aspectRatio;\n        }\n        if (init.width === undefined) {\n            init.width = init.height / aspectRatio;\n        }\n        let layer = new XRQuadLayer(init, video);\n        layer.needsRedraw = false;\n        layer.initialize(this.session);\n        return layer;\n    }\n    createCylinderLayer(video, init) {\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n        if (init.layout === XRLayerLayout.default) {\n            throw new TypeError('Media Cylinder layer cannot be created with layout of default');\n        }\n        let aspectRatio = this.calculateAspectRatio(video, init.layout);\n        if (init.aspectRatio === undefined) {\n            init.aspectRatio = aspectRatio;\n        }\n        let layer = new XRCylinderLayer(init, video);\n        layer.needsRedraw = false;\n        layer.initialize(this.session);\n        return layer;\n    }\n    createEquirectLayer(video, init) {\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n        if (init.layout === XRLayerLayout.default) {\n            throw new TypeError('Media Equirect layer cannot be created with layout of default');\n        }\n        if (!isReferenceSpace(init.space)) {\n            throw new Error(\"Media Equirect layer's space must be of type XRReferenceSpace\");\n        }\n        let layer = new XREquirectLayer(init, video);\n        layer.needsRedraw = false;\n        layer.initialize(this.session);\n        return layer;\n    }\n    calculateAspectRatio(video, layout) {\n        let width = video.videoWidth;\n        let height = video.videoHeight;\n        if (layout === XRLayerLayout['stereo-left-right']) {\n            width /= 2;\n        }\n        if (layout === XRLayerLayout['stereo-top-bottom']) {\n            height /= 2;\n        }\n        return width / height;\n    }\n}\n\nconst defaultXRProjectionLayerInit = {\n    textureType: XRTextureType.texture,\n    colorFormat: 0x1908,\n    depthFormat: 0x1902,\n    scaleFactor: 1.0,\n};\nclass XRProjectionLayer extends XRCompositionLayerPolyfill {\n    constructor(init = defaultXRProjectionLayerInit) {\n        super();\n        this.init = Object.assign(Object.assign({}, defaultXRProjectionLayerInit), init);\n    }\n    _allocateProjectionColorTextures() {\n        let array = [];\n        let polyFillArray = [];\n        const createTextureArray = () => {\n            array = [];\n            for (let tex of polyFillArray) {\n                array.push(tex.texture);\n            }\n        };\n        let session = this.session;\n        let views = session.internalViews;\n        if (!views || views.length === 0) {\n            console.warn(\"We can't allocate color textures without views\");\n            return;\n        }\n        this.initializeIfNeeded();\n        let baseLayer = session.getBaseLayer();\n        let numViews = views.length;\n        let width = baseLayer.framebufferWidth * this.init.scaleFactor;\n        let height = baseLayer.framebufferHeight * this.init.scaleFactor;\n        if (this.layout === XRLayerLayout.mono || this.layout === XRLayerLayout.default) {\n            if (this.init.textureType === XRTextureType['texture-array']) {\n                let texture = this._createNewColorTexture(width, height, XRTextureType['texture-array'], this.init.colorFormat, numViews);\n                polyFillArray = [texture];\n            }\n            else {\n                for (let view of views) {\n                    let texture = this._createNewColorTexture(width, height, XRTextureType.texture, this.init.colorFormat);\n                    polyFillArray.push(texture);\n                }\n            }\n            createTextureArray();\n            this._colorTexturesMeta = polyFillArray;\n            this._colorTextures = array;\n            return;\n        }\n        if (this.layout === XRLayerLayout['stereo-left-right']) {\n            let texture = this._createNewColorTexture(width * numViews, height, this.init.textureType, this.init.colorFormat);\n            polyFillArray = [texture];\n        }\n        else if (this.layout === XRLayerLayout['stereo-top-bottom']) {\n            let texture = this._createNewColorTexture(width, height * numViews, this.init.textureType, this.init.colorFormat);\n            polyFillArray = [texture];\n        }\n        createTextureArray();\n        this._colorTexturesMeta = polyFillArray;\n        this._colorTextures = array;\n        return;\n    }\n    _allocateProjectionDepthStencilTextures() {\n        let session = this.session;\n        let views = session.internalViews;\n        if (!views || views.length === 0) {\n            return;\n        }\n        if (this.init.depthFormat === 0) {\n            this._depthStencilTextures = [];\n            return;\n        }\n        if (this.context instanceof WebGLRenderingContext) {\n            let depthExtension = this.context.getExtension('WEBGL_depth_texture');\n            if (!depthExtension) {\n                this._depthStencilTextures = [];\n                return;\n            }\n        }\n        let array = [];\n        let polyFillArray = [];\n        const createTextureArray = () => {\n            array = [];\n            for (let tex of polyFillArray) {\n                array.push(tex.texture);\n            }\n        };\n        this.initializeIfNeeded();\n        let baseLayer = session.getBaseLayer();\n        let numViews = views.length;\n        let width = baseLayer.framebufferWidth * this.init.scaleFactor;\n        let height = baseLayer.framebufferHeight * this.init.scaleFactor;\n        if (this.layout === XRLayerLayout.mono || this.layout === XRLayerLayout.default) {\n            if (this.init.textureType === XRTextureType['texture-array']) {\n                let texture = this._createNewDepthStencilTexture(width, height, this.init.textureType, this.init.depthFormat, numViews);\n                polyFillArray = [texture];\n            }\n            else {\n                for (let view of views) {\n                    let texture = this._createNewDepthStencilTexture(width, height, this.init.textureType, this.init.depthFormat);\n                    polyFillArray.push(texture);\n                }\n            }\n            createTextureArray();\n            this._depthStencilTextures = array;\n            return;\n        }\n        if (this.layout === XRLayerLayout['stereo-left-right']) {\n            let texture = this._createNewDepthStencilTexture(width * numViews, height, this.init.textureType, this.init.depthFormat);\n            polyFillArray = [texture];\n        }\n        else if (this.layout === XRLayerLayout['stereo-top-bottom']) {\n            let texture = this._createNewDepthStencilTexture(width, height * numViews, this.init.textureType, this.init.depthFormat);\n            polyFillArray = [texture];\n        }\n        createTextureArray();\n        this._depthStencilTextures = array;\n        return;\n    }\n    get colorTextures() {\n        if (!this._colorTextures || !this._colorTextures.length) {\n            this._allocateProjectionColorTextures();\n        }\n        return this._colorTextures;\n    }\n    get depthStencilTextures() {\n        if (this._depthStencilTextures === undefined) {\n            this._allocateProjectionDepthStencilTextures();\n        }\n        return this._depthStencilTextures || [];\n    }\n    get colorTexturesMeta() {\n        if (!this._colorTextures || !this._colorTextures.length) {\n            this._allocateProjectionColorTextures();\n        }\n        return this._colorTexturesMeta;\n    }\n    getTextureType() {\n        return this.init.textureType;\n    }\n    _deferredInitialize() {\n        this.isStatic = false;\n        if (!this.init.depthFormat) {\n            this.ignoreDepthValues = false;\n        }\n        else {\n            this.ignoreDepthValues = true;\n        }\n        this.fixedFoveation = 0;\n        let layout = this.determineLayoutAttribute(this.init.textureType, this.context, XRLayerLayout.default);\n        this.layout = layout;\n        this.needsRedraw = true;\n        let maxScaleFactor = this.determineMaximumScaleFactor();\n        let scaleFactor = Math.min(this.init.scaleFactor, maxScaleFactor);\n        this.init.scaleFactor = scaleFactor;\n    }\n    determineMaximumScaleFactor() {\n        let baseLayer = this.session.getBaseLayer(this.context);\n        let largestWidth = baseLayer.framebufferWidth;\n        let largestHeight = baseLayer.framebufferHeight;\n        if (this.layout === XRLayerLayout['stereo-left-right']) {\n            largestWidth *= 2;\n        }\n        if (this.layout === XRLayerLayout['stereo-top-bottom']) {\n            largestHeight *= 2;\n        }\n        let largestViewDimension = Math.max(largestWidth, largestHeight);\n        let largestTextureDimension = this.context.getParameter(this.context.MAX_TEXTURE_SIZE);\n        return largestTextureDimension / largestViewDimension;\n    }\n}\n\nconst initializeViewport = (viewport, texture, layout, offset, numViews) => {\n    let x = 0;\n    let y = 0;\n    let width = texture.width;\n    let height = texture.height;\n    if (layout === XRLayerLayout['stereo-left-right']) {\n        x = (texture.width * offset) / numViews;\n        width = texture.width / numViews;\n    }\n    else if (layout === XRLayerLayout['stereo-top-bottom']) {\n        y = (texture.height * offset) / numViews;\n        height = texture.height / numViews;\n    }\n    viewport.x = x;\n    viewport.y = y;\n    viewport.width = width;\n    viewport.height = height;\n};\n\nconst compileShader = (gl, shaderSource, shaderType) => {\n    var shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!success) {\n        throw 'could not compile shader:' + gl.getShaderInfoLog(shader);\n    }\n    return shader;\n};\nconst createProgram = (gl, vertexShader, fragmentShader) => {\n    const program = gl.createProgram();\n    const compiledVS = compileShader(gl, vertexShader, gl.VERTEX_SHADER);\n    const compiledFS = compileShader(gl, fragmentShader, gl.FRAGMENT_SHADER);\n    gl.attachShader(program, compiledVS);\n    gl.attachShader(program, compiledFS);\n    gl.deleteShader(compiledVS);\n    gl.deleteShader(compiledFS);\n    gl.linkProgram(program);\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!success) {\n        throw 'program failed to link:' + gl.getProgramInfoLog(program);\n    }\n    return program;\n};\nconst setRectangle = (gl, x, y, width, height) => {\n    var x1 = x;\n    var x2 = x + width;\n    var y1 = y;\n    var y2 = y + height;\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]), gl.DYNAMIC_DRAW);\n};\nconst applyVAOExtension = (gl) => {\n    if (gl instanceof WebGL2RenderingContext) {\n        return gl;\n    }\n    const ext = gl.getExtension('OES_vertex_array_object');\n    if (!ext) {\n        throw new Error('Cannot use VAOs.');\n    }\n    return {\n        bindVertexArray: ext.bindVertexArrayOES.bind(ext),\n        createVertexArray: ext.createVertexArrayOES.bind(ext),\n        deleteVertexArray: ext.deleteVertexArrayOES.bind(ext),\n        isVertexArray: ext.isVertexArrayOES.bind(ext),\n    };\n};\n\nconst glsl = (x) => x;\nconst vertexShader = glsl `\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n   // convert the rectangle from pixels to 0.0 to 1.0\n   vec2 zeroToOne = a_position;\n\n   // convert from 0->1 to 0->2\n   vec2 zeroToTwo = zeroToOne * 2.0;\n\n   // convert from 0->2 to -1->+1 (clipspace)\n   vec2 clipSpace = zeroToTwo - 1.0;\n\n   gl_Position = vec4(clipSpace * vec2(1, 1), 0, 1);\n\n   // pass the texCoord to the fragment shader\n   // The GPU will interpolate this value between points.\n   v_texCoord = a_texCoord;\n}\n`;\nconst fragmentShader = glsl `\nprecision mediump float;\n\n// our texture\nuniform sampler2D u_image;\n\n// the texCoords passed in from the vertex shader.\nvarying vec2 v_texCoord;\n\nvoid main() {\n   \tvec4 tex = texture2D(u_image, v_texCoord);\n\tgl_FragColor = vec4(tex.rgb, tex.a);\n}\n`;\nclass ProjectionRenderer {\n    constructor(layer, context) {\n        this.gl = context;\n        this.layer = layer;\n        this.program = createProgram(this.gl, vertexShader, fragmentShader);\n        this.programInfo = {\n            attribLocations: {\n                a_position: this.gl.getAttribLocation(this.program, 'a_position'),\n                a_texCoord: this.gl.getAttribLocation(this.program, 'a_texCoord'),\n            },\n        };\n        this._createVAOs();\n    }\n    render(session) {\n        let gl = this.gl;\n        let baseLayer = session.getBaseLayer();\n        gl.viewport(0, 0, baseLayer.framebufferWidth, baseLayer.framebufferHeight);\n        const textureType = this.layer.getTextureType();\n        const existingTextureBinding = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        if (textureType === XRTextureType.texture) {\n            gl.bindTexture(gl.TEXTURE_2D, this.layer.colorTextures[0]);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        }\n        else {\n            throw new Error(`Created a texture projection renderer instead of a texture-array projection renderer for a texture-array layer. \nThis is probably an error with the polyfill itself; please file an issue on Github if you run into this.`);\n        }\n        for (let view of session.internalViews) {\n            let viewport = baseLayer.getViewport(view);\n            gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n            if (this._shouldUseStereoTexturePoints()) {\n                this._renderInternalStereo(view);\n            }\n            else {\n                this._renderInternal();\n            }\n        }\n        gl.bindTexture(gl.TEXTURE_2D, existingTextureBinding);\n    }\n    _renderInternal() {\n        let gl = this.gl;\n        const existingProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        gl.useProgram(this.program);\n        this.vaoGl.bindVertexArray(this.vao);\n        var primitiveType = gl.TRIANGLES;\n        var offset = 0;\n        var count = 6;\n        gl.drawArrays(primitiveType, offset, count);\n        this.vaoGl.bindVertexArray(null);\n        gl.useProgram(existingProgram);\n    }\n    _renderInternalStereo(view) {\n        if (view.eye === 'none') {\n            return this._renderInternal();\n        }\n        let gl = this.gl;\n        this.vaoGl.bindVertexArray(this.vao);\n        const existingProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        gl.useProgram(this.program);\n        this._setStereoTextureBuffer(view.eye === 'right' ? 1 : 0);\n        var primitiveType = gl.TRIANGLES;\n        var offset = 0;\n        var count = 6;\n        gl.drawArrays(primitiveType, offset, count);\n        this.vaoGl.bindVertexArray(null);\n        gl.useProgram(existingProgram);\n    }\n    _createVAOs() {\n        this._createTextureUVs();\n        let gl = this.gl;\n        this.vaoGl = applyVAOExtension(gl);\n        let positionBuffer = gl.createBuffer();\n        this.vao = this.vaoGl.createVertexArray();\n        this.vaoGl.bindVertexArray(this.vao);\n        gl.enableVertexAttribArray(this.programInfo.attribLocations.a_position);\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        setRectangle(gl, 0, 0, 1.0, 1.0);\n        let size = 2;\n        let type = gl.FLOAT;\n        let normalize = false;\n        let stride = 0;\n        let offset = 0;\n        gl.vertexAttribPointer(this.programInfo.attribLocations.a_position, size, type, normalize, stride, offset);\n        this.texcoordBuffer = gl.createBuffer();\n        gl.enableVertexAttribArray(this.programInfo.attribLocations.a_texCoord);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.texturePoints, gl.DYNAMIC_DRAW);\n        gl.vertexAttribPointer(this.programInfo.attribLocations.a_texCoord, size, type, normalize, stride, offset);\n        this.vaoGl.bindVertexArray(null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n    _setStereoTextureBuffer(index) {\n        let gl = this.gl;\n        gl.enableVertexAttribArray(this.programInfo.attribLocations.a_texCoord);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.stereoTexturePoints[index], gl.STATIC_DRAW);\n        var size = 2;\n        var type = gl.FLOAT;\n        var normalize = false;\n        var stride = 0;\n        var offset = 0;\n        gl.vertexAttribPointer(this.programInfo.attribLocations.a_texCoord, size, type, normalize, stride, offset);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n    _createTextureUVs() {\n        this.texturePoints = new Float32Array([\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            0.0,\n            1.0,\n            0.0,\n            1.0,\n            1.0,\n            0.0,\n            1.0,\n            1.0,\n        ]);\n        const viewport = {\n            x: 0,\n            y: 0,\n            width: 1,\n            height: 1,\n        };\n        if (this._shouldUseStereoTexturePoints()) {\n            this.stereoTexturePoints = [];\n            initializeViewport(viewport, this.layer.colorTexturesMeta[0], this.layer.layout, 0, 2);\n            this.stereoTexturePoints[0] = this._offsetTextureUVsByRect(this.layer.colorTexturesMeta[0], this.texturePoints, viewport);\n            initializeViewport(viewport, this.layer.colorTexturesMeta[0], this.layer.layout, 1, 2);\n            this.stereoTexturePoints[1] = this._offsetTextureUVsByRect(this.layer.colorTexturesMeta[0], this.texturePoints, viewport);\n        }\n    }\n    _offsetTextureUVsByRect(texture, inArray, textureRect) {\n        textureRect = textureRect !== null && textureRect !== void 0 ? textureRect : {\n            x: 0,\n            y: 0,\n            width: texture.width,\n            height: texture.height,\n        };\n        const uX = textureRect.x / texture.width;\n        const vY = textureRect.y / texture.height;\n        const uW = textureRect.width / texture.width;\n        const vH = textureRect.height / texture.height;\n        const outArray = [];\n        for (let i = 0; i < inArray.length; i += 2) {\n            let u = inArray[i];\n            let v = inArray[i + 1];\n            let newU = u * uW + uX;\n            let newV = v * vH + vY;\n            outArray[i] = newU;\n            outArray[i + 1] = newV;\n        }\n        return new Float32Array(outArray);\n    }\n    _shouldUseStereoTexturePoints() {\n        return (this.layer.layout === XRLayerLayout['stereo-left-right'] ||\n            this.layer.layout === XRLayerLayout['stereo-top-bottom']);\n    }\n}\nconst texArrayVertexShader = glsl `#version 300 es\n\nin vec2 a_position;\nin vec2 a_texCoord;\n\nout vec2 v_texCoord;\n\nvoid main() {\n\t// convert the rectangle from pixels to 0.0 to 1.0\n\tvec2 zeroToOne = a_position;\n\n\t// convert from 0->1 to 0->2\n\tvec2 zeroToTwo = zeroToOne * 2.0;\n \n\t// convert from 0->2 to -1->+1 (clipspace)\n\tvec2 clipSpace = zeroToTwo - 1.0;\n \n\tgl_Position = vec4(clipSpace * vec2(1, 1), 0, 1);\n \n\t// pass the texCoord to the fragment shader\n\t// The GPU will interpolate this value between points.\n\tv_texCoord = a_texCoord;\n}\n`;\nconst texArrayFragmentShader = glsl `#version 300 es\nprecision mediump float;\nprecision mediump int;\nprecision mediump sampler2DArray;\n\nuniform sampler2DArray u_image;\nuniform int u_layer;\n\nin vec2 v_texCoord;\n\nout vec4 fragColor;\n\nvoid main() {\n\tvec4 tex = texture(u_image, vec3(v_texCoord.x, v_texCoord.y, u_layer));\n \tfragColor = vec4(tex.rgb, tex.a);\n}\n\n`;\nclass ProjectionTextureArrayRenderer extends ProjectionRenderer {\n    constructor(layer, context) {\n        super(layer, context);\n        this.program = createProgram(this.gl, texArrayVertexShader, texArrayFragmentShader);\n        this._createVAOs();\n        this.u_layerInfo = this.gl.getUniformLocation(this.program, 'u_layer');\n    }\n    render(session) {\n        let gl = this.gl;\n        let textureType = this.layer.getTextureType();\n        if (textureType === XRTextureType.texture) {\n            throw new Error('Using texture array projection renderer on a layer without texture array.');\n        }\n        let baseLayer = session.getBaseLayer();\n        const existingTextureBinding = gl.getParameter(gl.TEXTURE_BINDING_2D_ARRAY);\n        gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.layer.colorTextures[0]);\n        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        for (let view of session.internalViews) {\n            let index = session.getViewIndex(view);\n            let viewport = baseLayer.getViewport(view);\n            gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n            this._renderInternal(index);\n        }\n        gl.bindTexture(gl.TEXTURE_2D_ARRAY, existingTextureBinding);\n    }\n    _renderInternal(layer = 0) {\n        let gl = this.gl;\n        const existingProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        gl.useProgram(this.program);\n        gl.bindVertexArray(this.vao);\n        gl.uniform1i(this.u_layerInfo, layer);\n        var primitiveType = gl.TRIANGLES;\n        var offset = 0;\n        var count = 6;\n        gl.drawArrays(primitiveType, offset, count);\n        gl.bindVertexArray(null);\n        gl.useProgram(existingProgram);\n    }\n}\nconst createProjectionRenderer = (layer, context) => {\n    if (layer.getTextureType() === XRTextureType['texture-array']) {\n        if (context instanceof WebGL2RenderingContext) {\n            return new ProjectionTextureArrayRenderer(layer, context);\n        }\n    }\n    return new ProjectionRenderer(layer, context);\n};\n\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n  return Math.sqrt(y);\n};\n\nfunction create() {\n  var out = new ARRAY_TYPE(16);\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\nfunction create$1() {\n  var out = new ARRAY_TYPE(2);\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n(function () {\n  var vec = create$1();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n    if (!stride) {\n      stride = 2;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n    return a;\n  };\n})();\n\nconst glsl$1 = (x) => x;\nconst vertexShader$1 = glsl$1 `\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\n\nuniform mat4 u_matrix;\nuniform mat4 u_projectionMatrix;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n  // Multiply the position by the matrix.\n  gl_Position = u_projectionMatrix * u_matrix * a_position;\n\n   // pass the texCoord to the fragment shader\n   // The GPU will interpolate this value between points.\n   v_texCoord = a_texCoord;\n}\n`;\nconst fragmentShader$1 = glsl$1 `\nprecision mediump float;\n\n// our texture\nuniform sampler2D u_image;\n\n// the texCoords passed in from the vertex shader.\nvarying vec2 v_texCoord;\n\nvoid main() {\n   \tvec4 tex = texture2D(u_image, v_texCoord);\n\tgl_FragColor = vec4(tex.rgb, tex.a);\n\t// gl_FragColor = vec4(1.0, 0, 0, 1.0);\n}\n`;\nconst texArrayVertexShader$1 = glsl$1 `#version 300 es\n\nin vec4 a_position;\nin vec2 a_texCoord;\n\nuniform mat4 u_matrix;\nuniform mat4 u_projectionMatrix;\n\nout vec2 v_texCoord;\n\nvoid main() {\n\t// Multiply the position by the matrix.\n    gl_Position = u_projectionMatrix * u_matrix * a_position;\n \n\t// pass the texCoord to the fragment shader\n\t// The GPU will interpolate this value between points.\n\tv_texCoord = a_texCoord;\n}\n`;\nconst texArrayFragmentShader$1 = glsl$1 `#version 300 es\nprecision mediump float;\nprecision mediump int;\nprecision mediump sampler2DArray;\n\nuniform sampler2DArray u_image;\nuniform int u_layer;\n\nin vec2 v_texCoord;\n\nout vec4 fragColor;\n\nvoid main() {\n\tvec4 tex = texture(u_image, vec3(v_texCoord.x, v_texCoord.y, u_layer));\n \tfragColor = vec4(tex.rgb, tex.a);\n}\n\n`;\nclass CompositionLayerRenderer {\n    constructor(layer, context) {\n        this.usesTextureArrayShaders = false;\n        this.gl = context;\n        this.layer = layer;\n        let gl = this.gl;\n        this.transformMatrix = create();\n        if (context instanceof WebGL2RenderingContext &&\n            this.layer.getTextureType() === XRTextureType['texture-array']) {\n            this.usesTextureArrayShaders = true;\n        }\n        if (this.usesTextureArrayShaders) {\n            this.program = createProgram(gl, texArrayVertexShader$1, texArrayFragmentShader$1);\n        }\n        else {\n            this.program = createProgram(gl, vertexShader$1, fragmentShader$1);\n        }\n        this.programInfo = {\n            attribLocations: {\n                a_position: gl.getAttribLocation(this.program, 'a_position'),\n                a_texCoord: gl.getAttribLocation(this.program, 'a_texCoord'),\n            },\n            uniformLocations: {\n                u_matrix: gl.getUniformLocation(this.program, 'u_matrix'),\n                u_projectionMatrix: gl.getUniformLocation(this.program, 'u_projectionMatrix'),\n            },\n        };\n        if (this.usesTextureArrayShaders) {\n            this.programInfo.uniformLocations.u_layer = gl.getUniformLocation(this.program, 'u_layer');\n        }\n    }\n    initialize() {\n        let gl = this.gl;\n        if (this.layer.isMediaLayer()) {\n            this.mediaTexture = gl.createTexture();\n            this.mediaTexturePolyfill = {\n                texture: this.mediaTexture,\n                textureFormat: gl.RGBA,\n                width: this.layer.media.videoWidth,\n                height: this.layer.media.videoHeight,\n                type: XRTextureType.texture,\n            };\n            const existingTextureBinding = gl.getParameter(gl.TEXTURE_BINDING_2D);\n            gl.bindTexture(gl.TEXTURE_2D, this.mediaTexture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.layer.media.videoWidth, this.layer.media.videoHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            gl.bindTexture(gl.TEXTURE_2D, existingTextureBinding);\n        }\n        this._createVAOs();\n    }\n    render(session, frame) {\n        let gl = this.gl;\n        let baseLayer = session.getBaseLayer();\n        let basePose = frame.getViewerPose(session.getReferenceSpace());\n        for (let view of basePose.views) {\n            let viewport = baseLayer.getViewport(view);\n            gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n            gl.activeTexture(gl.TEXTURE0);\n            if (this.usesTextureArrayShaders) {\n                if (gl instanceof WebGLRenderingContext) {\n                    throw new Error('This should never happen; texture-arrays only supported on WebGL2.');\n                }\n                if (this.layer.isMediaLayer()) {\n                    throw new Error('This should never happen. Media layers should never be created with texture-array');\n                }\n                const existingTextureBinding = gl.getParameter(gl.TEXTURE_BINDING_2D_ARRAY);\n                gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.layer.colorTextures[0]);\n                gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                let layer = 0;\n                if (this.layer.layout === XRLayerLayout.stereo) {\n                    switch (view.eye) {\n                        case 'right':\n                            layer = 1;\n                            break;\n                    }\n                }\n                if (this._shouldUseStereoTexturePoints()) {\n                    this._renderInternalStereo(session, frame, view, layer);\n                }\n                else {\n                    this._renderInternal(session, frame, view, layer);\n                }\n                gl.bindTexture(gl.TEXTURE_2D_ARRAY, existingTextureBinding);\n            }\n            else {\n                const existingTextureBinding = gl.getParameter(gl.TEXTURE_BINDING_2D);\n                if (this.layer.isMediaLayer()) {\n                    gl.bindTexture(gl.TEXTURE_2D, this.mediaTexture);\n                    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n                    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.layer.media.videoWidth, this.layer.media.videoHeight, gl.RGBA, gl.UNSIGNED_BYTE, this.layer.media);\n                }\n                else if (this.layer.layout === XRLayerLayout.stereo) {\n                    switch (view.eye) {\n                        case 'right':\n                            gl.bindTexture(gl.TEXTURE_2D, this.layer.colorTextures[1]);\n                            break;\n                        default:\n                            gl.bindTexture(gl.TEXTURE_2D, this.layer.colorTextures[0]);\n                    }\n                }\n                else {\n                    gl.bindTexture(gl.TEXTURE_2D, this.layer.colorTextures[0]);\n                }\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                if (this._shouldUseStereoTexturePoints()) {\n                    this._renderInternalStereo(session, frame, view);\n                }\n                else {\n                    this._renderInternal(session, frame, view);\n                }\n                gl.bindTexture(gl.TEXTURE_2D, existingTextureBinding);\n            }\n        }\n    }\n    createPositionPoints() {\n        return new Float32Array([]);\n    }\n    createTextureUVs() {\n        return new Float32Array([]);\n    }\n    _offsetTextureUVsByRect(texture, inArray, textureRect) {\n        textureRect = textureRect !== null && textureRect !== void 0 ? textureRect : {\n            x: 0,\n            y: 0,\n            width: texture.width,\n            height: texture.height,\n        };\n        const uX = textureRect.x / texture.width;\n        const vY = textureRect.y / texture.height;\n        const uW = textureRect.width / texture.width;\n        const vH = textureRect.height / texture.height;\n        const outArray = [];\n        for (let i = 0; i < inArray.length; i += 2) {\n            let u = inArray[i];\n            let v = inArray[i + 1];\n            let newU = u * uW + uX;\n            let newV = v * vH + vY;\n            outArray[i] = newU;\n            outArray[i + 1] = newV;\n        }\n        return new Float32Array(outArray);\n    }\n    _shouldUseStereoTexturePoints() {\n        return (this.layer.layout === XRLayerLayout['stereo-left-right'] ||\n            this.layer.layout === XRLayerLayout['stereo-top-bottom']);\n    }\n    _setStereoTextureBuffer(index) {\n        let gl = this.gl;\n        gl.enableVertexAttribArray(this.programInfo.attribLocations.a_texCoord);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.stereoTexturePoints[index], gl.STATIC_DRAW);\n        var size = 2;\n        var type = gl.FLOAT;\n        var normalize = false;\n        var stride = 0;\n        var offset = 0;\n        gl.vertexAttribPointer(this.programInfo.attribLocations.a_texCoord, size, type, normalize, stride, offset);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n    _recalculateVertices() {\n        this.positionPoints = this.createPositionPoints();\n        this.texturePoints = this.createTextureUVs();\n        const viewport = {\n            x: 0,\n            y: 0,\n            width: 1,\n            height: 1,\n        };\n        if (this._shouldUseStereoTexturePoints()) {\n            this.stereoTexturePoints = [];\n            if (this.layer.isMediaLayer()) {\n                initializeViewport(viewport, this.mediaTexturePolyfill, this.layer.layout, 0, 2);\n                this.stereoTexturePoints[0] = this._offsetTextureUVsByRect(this.mediaTexturePolyfill, this.texturePoints, viewport);\n                initializeViewport(viewport, this.mediaTexturePolyfill, this.layer.layout, 1, 2);\n                this.stereoTexturePoints[1] = this._offsetTextureUVsByRect(this.mediaTexturePolyfill, this.texturePoints, viewport);\n                if (this.layer.layout === XRLayerLayout['stereo-top-bottom']) {\n                    [this.stereoTexturePoints[0], this.stereoTexturePoints[1]] = [\n                        this.stereoTexturePoints[1],\n                        this.stereoTexturePoints[0],\n                    ];\n                }\n                return;\n            }\n            initializeViewport(viewport, this.layer.colorTexturesMeta[0], this.layer.layout, 0, 2);\n            this.stereoTexturePoints[0] = this._offsetTextureUVsByRect(this.layer.colorTexturesMeta[0], this.texturePoints, viewport);\n            initializeViewport(viewport, this.layer.colorTexturesMeta[0], this.layer.layout, 1, 2);\n            this.stereoTexturePoints[1] = this._offsetTextureUVsByRect(this.layer.colorTexturesMeta[0], this.texturePoints, viewport);\n            if (this.layer.layout === XRLayerLayout['stereo-top-bottom']) {\n                [this.stereoTexturePoints[0], this.stereoTexturePoints[1]] = [\n                    this.stereoTexturePoints[1],\n                    this.stereoTexturePoints[0],\n                ];\n            }\n        }\n    }\n    _createVAOs() {\n        this._recalculateVertices();\n        let gl = this.gl;\n        this.vaoGl = applyVAOExtension(gl);\n        let positionBuffer = gl.createBuffer();\n        this.vao = this.vaoGl.createVertexArray();\n        this.vaoGl.bindVertexArray(this.vao);\n        gl.enableVertexAttribArray(this.programInfo.attribLocations.a_position);\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        const positions = this.positionPoints;\n        gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n        var size = 3;\n        var type = gl.FLOAT;\n        var normalize = false;\n        var stride = 0;\n        var offset = 0;\n        gl.vertexAttribPointer(this.programInfo.attribLocations.a_position, size, type, normalize, stride, offset);\n        gl.enableVertexAttribArray(this.programInfo.attribLocations.a_texCoord);\n        this.texcoordBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.texturePoints, gl.STATIC_DRAW);\n        var size = 2;\n        var type = gl.FLOAT;\n        var normalize = false;\n        var stride = 0;\n        var offset = 0;\n        gl.vertexAttribPointer(this.programInfo.attribLocations.a_texCoord, size, type, normalize, stride, offset);\n        this.vaoGl.bindVertexArray(null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n    _renderInternal(session, frame, view, layer) {\n        let gl = this.gl;\n        const existingProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        gl.useProgram(this.program);\n        this.vaoGl.bindVertexArray(this.vao);\n        if (this.usesTextureArrayShaders) {\n            gl.uniform1i(this.programInfo.uniformLocations.u_layer, layer);\n        }\n        this._setTransformMatrix(session, frame, view);\n        gl.uniformMatrix4fv(this.programInfo.uniformLocations.u_matrix, false, this.transformMatrix);\n        gl.uniformMatrix4fv(this.programInfo.uniformLocations.u_projectionMatrix, false, view.projectionMatrix);\n        var primitiveType = gl.TRIANGLES;\n        var offset = 0;\n        var count = this.positionPoints.length / 3;\n        gl.drawArrays(primitiveType, offset, count);\n        this.vaoGl.bindVertexArray(null);\n        gl.useProgram(existingProgram);\n    }\n    _renderInternalStereo(session, frame, view, layer) {\n        if (view.eye === 'none') {\n            return this._renderInternal(session, frame, view);\n        }\n        let gl = this.gl;\n        this.vaoGl.bindVertexArray(this.vao);\n        const existingProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        gl.useProgram(this.program);\n        this._setStereoTextureBuffer(view.eye === 'right' ? 1 : 0);\n        if (this.usesTextureArrayShaders) {\n            gl.uniform1i(this.programInfo.uniformLocations.u_layer, layer);\n        }\n        this._setTransformMatrix(session, frame, view);\n        gl.uniformMatrix4fv(this.programInfo.uniformLocations.u_matrix, false, this.transformMatrix);\n        gl.uniformMatrix4fv(this.programInfo.uniformLocations.u_projectionMatrix, false, view.projectionMatrix);\n        var primitiveType = gl.TRIANGLES;\n        var offset = 0;\n        var count = this.positionPoints.length / 3;\n        gl.drawArrays(primitiveType, offset, count);\n        this.vaoGl.bindVertexArray(null);\n        gl.useProgram(existingProgram);\n    }\n    _setTransformMatrix(session, frame, view) {\n        let objPose = frame.getPose(this.layer.space, session.getReferenceSpace());\n        multiply(this.transformMatrix, objPose.transform.matrix, this.layer.transform.matrix);\n        multiply(this.transformMatrix, view.transform.inverse.matrix, this.transformMatrix);\n    }\n}\n\nclass QuadRenderer extends CompositionLayerRenderer {\n    constructor(layer, context) {\n        super(layer, context);\n        this.initialize();\n    }\n    createPositionPoints() {\n        const width = this.layer.width;\n        const height = this.layer.height;\n        const z = 0;\n        const positions = [\n            -width,\n            -height,\n            z,\n            width,\n            -height,\n            z,\n            -width,\n            height,\n            z,\n            -width,\n            height,\n            z,\n            width,\n            -height,\n            z,\n            width,\n            height,\n            z,\n        ];\n        return new Float32Array(positions);\n    }\n    createTextureUVs() {\n        return new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]);\n    }\n}\n\nclass CylinderRenderer extends CompositionLayerRenderer {\n    constructor(layer, context) {\n        super(layer, context);\n        this.segments = 16;\n        this.initialize();\n    }\n    createPositionPoints() {\n        const positions = [];\n        const angle = this.layer.centralAngle;\n        const height = this.layer.height;\n        const radius = this.layer.radius;\n        const radiansPerSegment = angle / this.segments;\n        const theta = Math.PI / 2 - angle / 2;\n        const unitCirclePositions = [];\n        const firstUnitPoint = create$1();\n        firstUnitPoint[0] = radius * Math.cos(theta);\n        firstUnitPoint[1] = -radius * Math.sin(theta);\n        unitCirclePositions.push(firstUnitPoint);\n        for (let i = 0; i < this.segments; i++) {\n            const nextPoint = create$1();\n            nextPoint[0] = radius * Math.cos(theta + radiansPerSegment * (i + 1));\n            nextPoint[1] = -radius * Math.sin(theta + radiansPerSegment * (i + 1));\n            unitCirclePositions.push(nextPoint);\n        }\n        unitCirclePositions.reverse();\n        for (let i = 0; i < this.segments; i++) {\n            const u = unitCirclePositions[i];\n            const v = unitCirclePositions[i + 1];\n            positions.push(u[0], -height / 2, u[1]);\n            positions.push(v[0], -height / 2, v[1]);\n            positions.push(u[0], height / 2, u[1]);\n            positions.push(u[0], height / 2, u[1]);\n            positions.push(v[0], -height / 2, v[1]);\n            positions.push(v[0], height / 2, v[1]);\n        }\n        return new Float32Array(positions);\n    }\n    createTextureUVs() {\n        let textureUVs = [];\n        const texturePercent = 1.0 / this.segments;\n        for (let i = 0; i < this.segments; i++) {\n            let leftX = texturePercent * i;\n            let rightX = texturePercent * (i + 1);\n            textureUVs.push(leftX, 0);\n            textureUVs.push(rightX, 0);\n            textureUVs.push(leftX, 1);\n            textureUVs.push(leftX, 1);\n            textureUVs.push(rightX, 0);\n            textureUVs.push(rightX, 1);\n        }\n        return new Float32Array(textureUVs);\n    }\n}\n\nclass EquirectRenderer extends CompositionLayerRenderer {\n    constructor(layer, context) {\n        super(layer, context);\n        this.segmentsPerAxis = 40;\n        this.initialize();\n    }\n    createPositionPoints() {\n        const positions = [];\n        const radius = this.layer.radius || 1;\n        const horizAngle = this.layer.centralHorizontalAngle;\n        const phi1 = this.layer.upperVerticalAngle + Math.PI / 2;\n        const phi2 = this.layer.lowerVerticalAngle + Math.PI / 2;\n        const startPhi = phi1;\n        const endPhi = phi2;\n        const startTheta = Math.PI / 2 - horizAngle / 2;\n        const endTheta = startTheta + horizAngle;\n        const phiRange = endPhi - startPhi;\n        const thetaRange = endTheta - startTheta;\n        const basePoints = [];\n        for (let y = 0; y <= this.segmentsPerAxis; y++) {\n            for (let x = 0; x <= this.segmentsPerAxis; x++) {\n                const u = x / this.segmentsPerAxis;\n                const v = y / this.segmentsPerAxis;\n                let r = radius;\n                let theta = endTheta - thetaRange * u;\n                let phi = phiRange * v + startPhi;\n                const ux = Math.cos(theta) * Math.sin(phi);\n                const uy = Math.cos(phi);\n                const uz = -Math.sin(theta) * Math.sin(phi);\n                basePoints.push([r * ux, r * uy, r * uz]);\n            }\n        }\n        const numVertsAround = this.segmentsPerAxis + 1;\n        for (let x = 0; x < this.segmentsPerAxis; x++) {\n            for (let y = 0; y < this.segmentsPerAxis; y++) {\n                positions.push(...basePoints[y * numVertsAround + x]);\n                positions.push(...basePoints[y * numVertsAround + x + 1]);\n                positions.push(...basePoints[(y + 1) * numVertsAround + x]);\n                positions.push(...basePoints[(y + 1) * numVertsAround + x]);\n                positions.push(...basePoints[y * numVertsAround + x + 1]);\n                positions.push(...basePoints[(y + 1) * numVertsAround + x + 1]);\n            }\n        }\n        return new Float32Array(positions);\n    }\n    createTextureUVs() {\n        const triUVs = [];\n        const baseUVs = [];\n        for (let y = 0; y <= this.segmentsPerAxis; y++) {\n            for (let x = 0; x <= this.segmentsPerAxis; x++) {\n                const u = x / this.segmentsPerAxis;\n                const v = y / this.segmentsPerAxis;\n                baseUVs.push([u, v]);\n            }\n        }\n        const numVertsAround = this.segmentsPerAxis + 1;\n        for (let x = 0; x < this.segmentsPerAxis; x++) {\n            for (let y = 0; y < this.segmentsPerAxis; y++) {\n                triUVs.push(...baseUVs[y * numVertsAround + x]);\n                triUVs.push(...baseUVs[y * numVertsAround + x + 1]);\n                triUVs.push(...baseUVs[(y + 1) * numVertsAround + x]);\n                triUVs.push(...baseUVs[(y + 1) * numVertsAround + x]);\n                triUVs.push(...baseUVs[y * numVertsAround + x + 1]);\n                triUVs.push(...baseUVs[(y + 1) * numVertsAround + x + 1]);\n            }\n        }\n        return new Float32Array(triUVs);\n    }\n}\n\nconst defaultCubeLayerInit = {\n    colorFormat: 0x1908,\n    mipLevels: 1,\n    layout: XRLayerLayout.mono,\n    isStatic: false,\n    space: null,\n    viewPixelHeight: 0,\n    viewPixelWidth: 0,\n};\nclass XRCubeLayer extends XRCompositionLayerPolyfill {\n    constructor(init = defaultCubeLayerInit) {\n        super();\n        if (!isReferenceSpace(init.space)) {\n            throw new TypeError(\"XRCubeLayer's space needs to be an XRReferenceSpace\");\n        }\n        this.init = Object.assign(Object.assign({}, defaultCubeLayerInit), init);\n        this.space = this.init.space;\n        this.isStatic = this.init.isStatic;\n        if (this.init.orientation) {\n            this.orientation = DOMPointReadOnly.fromPoint(this.init.orientation);\n        }\n        else {\n            this.orientation = new DOMPointReadOnly();\n        }\n        switch (this.init.layout) {\n            case XRLayerLayout.default:\n            case XRLayerLayout['stereo-left-right']:\n            case XRLayerLayout['stereo-top-bottom']:\n                throw new TypeError('Invalid layout format for XRCubeLayer');\n        }\n        this.layout = this.init.layout;\n        this.needsRedraw = true;\n    }\n    initialize(session, context) {\n        super.initialize(session, context);\n        this._allocateColorTexturesInternal();\n        this._allocateDepthStencilTexturesInternal();\n    }\n    _allocateColorTexturesInternal() {\n        this._colorTextures = [];\n        this._texturesMeta = [];\n        if (this.layout === XRLayerLayout.mono) {\n            const colorTexture = this._createCubeColorTexture();\n            this._texturesMeta.push(colorTexture);\n            this._colorTextures.push(colorTexture.texture);\n            return;\n        }\n        else {\n            const texture1 = this._createCubeColorTexture();\n            const texture2 = this._createCubeColorTexture();\n            this._texturesMeta.push(texture1, texture2);\n            this._colorTextures.push(texture1.texture, texture2.texture);\n            return;\n        }\n    }\n    _allocateDepthStencilTexturesInternal() {\n        this._depthStencilTextures = [];\n        if (!this.init.depthFormat) {\n            return;\n        }\n        if (this.context instanceof WebGLRenderingContext) {\n            let depthExtension = this.context.getExtension('WEBGL_depth_texture');\n            if (!depthExtension) {\n                throw new TypeError('Depth textures not supported in the current context');\n            }\n        }\n        if (this.layout === XRLayerLayout.mono) {\n            const depthTexture = this._createCubeDepthTexture();\n            this._depthStencilTextures.push(depthTexture.texture);\n            return;\n        }\n        else {\n            const texture1 = this._createCubeDepthTexture();\n            const texture2 = this._createCubeDepthTexture();\n            this._depthStencilTextures.push(texture1.texture, texture2.texture);\n            return;\n        }\n    }\n    _createCubeColorTexture() {\n        let texture = this.context.createTexture();\n        let textureMeta = {\n            width: this.init.viewPixelWidth,\n            height: this.init.viewPixelHeight,\n            layers: 1,\n            type: XRTextureType.texture,\n            textureFormat: this.init.colorFormat,\n            texture,\n        };\n        const existingTextureBinding = this.context.getParameter(this.context.TEXTURE_BINDING_CUBE_MAP);\n        this.context.bindTexture(this.context.TEXTURE_CUBE_MAP, texture);\n        for (let i = 0; i < 6; i++) {\n            this.context.texImage2D(this.context.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, textureMeta.textureFormat, textureMeta.width, textureMeta.height, 0, textureMeta.textureFormat, this.context.UNSIGNED_BYTE, null);\n        }\n        this.context.bindTexture(this.context.TEXTURE_CUBE_MAP, existingTextureBinding);\n        return textureMeta;\n    }\n    _createCubeDepthTexture() {\n        let texture = this.context.createTexture();\n        let textureMeta = {\n            width: this.init.viewPixelWidth,\n            height: this.init.viewPixelHeight,\n            layers: 1,\n            type: XRTextureType.texture,\n            textureFormat: this.init.depthFormat,\n            texture,\n        };\n        const existingTextureBinding = this.context.getParameter(this.context.TEXTURE_BINDING_CUBE_MAP);\n        this.context.bindTexture(this.context.TEXTURE_CUBE_MAP, texture);\n        let internalFormat = this.init.depthFormat;\n        if (this.context instanceof WebGL2RenderingContext) {\n            if (internalFormat === this.context.DEPTH_COMPONENT) {\n                internalFormat = this.context.DEPTH_COMPONENT24;\n            }\n            if (internalFormat === this.context.DEPTH_STENCIL) {\n                internalFormat = this.context.DEPTH24_STENCIL8;\n            }\n        }\n        for (let i = 0; i < 6; i++) {\n            this.context.texImage2D(this.context.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, internalFormat, textureMeta.width, textureMeta.height, 0, textureMeta.textureFormat, this.context.UNSIGNED_INT, null);\n        }\n        this.context.bindTexture(this.context.TEXTURE_CUBE_MAP, existingTextureBinding);\n        return textureMeta;\n    }\n    getTextureType() {\n        return XRTextureType.texture;\n    }\n}\n\nconst glsl$2 = (x) => x;\nconst vertexShader$2 = glsl$2 `\nattribute vec4 a_position;\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_matrix;\nvarying vec3 v_normal;\n\nvoid main() {\n   gl_Position = u_projectionMatrix * u_matrix * a_position;\n\n   v_normal = normalize(a_position.xyz);\n}\n`;\nconst fragmentShader$2 = glsl$2 `\nprecision mediump float;\n\nvarying vec3 v_normal;\n\nuniform samplerCube u_texture;\n\nvoid main() {\n   gl_FragColor = textureCube(u_texture, normalize(v_normal));\n}\n`;\nclass CubeRenderer {\n    constructor(layer, gl) {\n        this.layer = layer;\n        this.gl = gl;\n        this.transformMatrix = create();\n        this.program = createProgram(gl, vertexShader$2, fragmentShader$2);\n        this.programInfo = {\n            attribLocations: {\n                a_position: gl.getAttribLocation(this.program, 'a_position'),\n            },\n            uniformLocations: {\n                u_matrix: gl.getUniformLocation(this.program, 'u_matrix'),\n                u_texture: gl.getUniformLocation(this.program, 'u_texture'),\n                u_projectionMatrix: gl.getUniformLocation(this.program, 'u_projectionMatrix'),\n            },\n        };\n        this._createVAOs();\n    }\n    render(session, frame) {\n        let gl = this.gl;\n        let baseLayer = session.getBaseLayer();\n        let basePose = frame.getViewerPose(session.getReferenceSpace());\n        for (let view of basePose.views) {\n            let viewport = baseLayer.getViewport(view);\n            gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n            gl.activeTexture(gl.TEXTURE0);\n            const existingTextureBinding = gl.getParameter(gl.TEXTURE_BINDING_CUBE_MAP);\n            if (this.layer.layout === XRLayerLayout.stereo) {\n                const index = view.eye === 'right' ? 1 : 0;\n                gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.layer.colorTextures[index]);\n            }\n            else {\n                gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.layer.colorTextures[0]);\n            }\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            this._renderInternal(this.layer.orientation, view);\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, existingTextureBinding);\n        }\n    }\n    createPositionPoints() {\n        const w = 0.5;\n        const positions = [\n            -w, -w, -w,\n            -w, w, -w,\n            w, -w, -w,\n            -w, w, -w,\n            w, w, -w,\n            w, -w, -w,\n            -w, -w, w,\n            w, -w, w,\n            -w, w, w,\n            -w, w, w,\n            w, -w, w,\n            w, w, w,\n            -w, w, -w,\n            -w, w, w,\n            w, w, -w,\n            -w, w, w,\n            w, w, w,\n            w, w, -w,\n            -w, -w, -w,\n            w, -w, -w,\n            -w, -w, w,\n            -w, -w, w,\n            w, -w, -w,\n            w, -w, w,\n            -w, -w, -w,\n            -w, -w, w,\n            -w, w, -w,\n            -w, -w, w,\n            -w, w, w,\n            -w, w, -w,\n            w, -w, -w,\n            w, w, -w,\n            w, -w, w,\n            w, -w, w,\n            w, w, -w,\n            w, w, w,\n        ];\n        return new Float32Array(positions);\n    }\n    _renderInternal(orientation, view) {\n        let gl = this.gl;\n        const existingProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        gl.useProgram(this.program);\n        this.vaoGl.bindVertexArray(this.vao);\n        fromQuat(this.transformMatrix, [\n            orientation.x,\n            orientation.y,\n            orientation.z,\n            orientation.w,\n        ]);\n        if (!this._poseOrientationMatrix) {\n            this._poseOrientationMatrix = create();\n        }\n        fromQuat(this._poseOrientationMatrix, [\n            view.transform.inverse.orientation.x,\n            view.transform.inverse.orientation.y,\n            view.transform.inverse.orientation.z,\n            view.transform.inverse.orientation.w,\n        ]);\n        multiply(this.transformMatrix, this.transformMatrix, this._poseOrientationMatrix);\n        gl.uniformMatrix4fv(this.programInfo.uniformLocations.u_matrix, false, this.transformMatrix);\n        gl.uniformMatrix4fv(this.programInfo.uniformLocations.u_projectionMatrix, false, view.projectionMatrix);\n        gl.uniform1i(this.programInfo.uniformLocations.u_texture, 0);\n        var primitiveType = gl.TRIANGLES;\n        var offset = 0;\n        var count = this.positionPoints.length / 3;\n        gl.drawArrays(primitiveType, offset, count);\n        this.vaoGl.bindVertexArray(null);\n        gl.useProgram(existingProgram);\n    }\n    _recalculateVertices() {\n        this.positionPoints = this.createPositionPoints();\n    }\n    _createVAOs() {\n        this._recalculateVertices();\n        let gl = this.gl;\n        this.vaoGl = applyVAOExtension(gl);\n        let positionBuffer = gl.createBuffer();\n        this.vao = this.vaoGl.createVertexArray();\n        this.vaoGl.bindVertexArray(this.vao);\n        gl.enableVertexAttribArray(this.programInfo.attribLocations.a_position);\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        const positions = this.positionPoints;\n        gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n        var size = 3;\n        var type = gl.FLOAT;\n        var normalize = false;\n        var stride = 0;\n        var offset = 0;\n        gl.vertexAttribPointer(this.programInfo.attribLocations.a_position, size, type, normalize, stride, offset);\n        this.vaoGl.bindVertexArray(null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n}\n\nclass XRSessionWithLayer {\n    constructor() {\n        this.mode = 'inline';\n        this.layers = [];\n        this.views = [];\n        this.initializedViews = false;\n        this.isPolyfillActive = false;\n        this.taskQueue = [];\n    }\n    requestAnimationFrame(animationFrameCallback) {\n        if (!this.injectedFrameCallback) {\n            this.injectedFrameCallback = (time, frame) => {\n                let gl = this.context;\n                if (!this.initializedViews && this.referenceSpace) {\n                    let pose = frame.getViewerPose(this.referenceSpace);\n                    if (pose) {\n                        this.views = pose.views;\n                        this.initializedViews = true;\n                    }\n                }\n                if (this.isPolyfillActive) {\n                    if (!this.tempFramebuffer) {\n                        this.tempFramebuffer = gl.createFramebuffer();\n                    }\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, this.tempFramebuffer);\n                    const existingClearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);\n                    gl.clearColor(0, 0, 0, 0);\n                    for (let layer of this.layers) {\n                        if (!(layer instanceof XRProjectionLayer)) {\n                            continue;\n                        }\n                        for (let i = 0; i < layer.colorTextures.length; i++) {\n                            let textureType = layer.colorTexturesMeta[i].type;\n                            if (textureType === XRTextureType['texture-array']) ;\n                            else {\n                                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, layer.colorTextures[i], 0);\n                                if (layer.depthStencilTextures && i < layer.depthStencilTextures.length) {\n                                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, layer.depthStencilTextures[i], 0);\n                                }\n                                else {\n                                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, null, 0);\n                                }\n                                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n                            }\n                        }\n                    }\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getBaseLayer().framebuffer);\n                    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n                    gl.clearColor(existingClearColor[0], existingClearColor[1], existingClearColor[2], existingClearColor[3]);\n                }\n                animationFrameCallback(time, frame);\n                if (this.isPolyfillActive && this.initializedViews) {\n                    let prevBlend = gl.isEnabled(gl.BLEND);\n                    let prevDepthTest = gl.isEnabled(gl.DEPTH_TEST);\n                    let prevCullFace = gl.isEnabled(gl.CULL_FACE);\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getBaseLayer().framebuffer);\n                    gl.enable(gl.BLEND);\n                    gl.disable(gl.DEPTH_TEST);\n                    gl.disable(gl.CULL_FACE);\n                    let prevBlendSrcRGB = gl.getParameter(gl.BLEND_SRC_RGB);\n                    let prevBlendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\n                    let prevBlendDestRGB = gl.getParameter(gl.BLEND_DST_RGB);\n                    let prevBlendDestAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\n                    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                    for (let layer of this.layers) {\n                        if (!this.renderers) {\n                            this.renderers = new WeakMap();\n                        }\n                        if (layer instanceof XRProjectionLayer) {\n                            if (!this.renderers.has(layer)) {\n                                this.renderers.set(layer, createProjectionRenderer(layer, this.context));\n                            }\n                            const renderer = this.renderers.get(layer);\n                            renderer.render(this);\n                        }\n                        else if (layer instanceof XRQuadLayer) {\n                            if (!this.renderers.has(layer)) {\n                                this.renderers.set(layer, new QuadRenderer(layer, this.context));\n                            }\n                            const renderer = this.renderers.get(layer);\n                            renderer.render(this, frame);\n                        }\n                        else if (layer instanceof XRCylinderLayer) {\n                            if (!this.renderers.has(layer)) {\n                                this.renderers.set(layer, new CylinderRenderer(layer, this.context));\n                            }\n                            const renderer = this.renderers.get(layer);\n                            renderer.render(this, frame);\n                        }\n                        else if (layer instanceof XREquirectLayer) {\n                            if (!this.renderers.has(layer)) {\n                                this.renderers.set(layer, new EquirectRenderer(layer, this.context));\n                            }\n                            const renderer = this.renderers.get(layer);\n                            renderer.render(this, frame);\n                        }\n                        else if (layer instanceof XRCubeLayer) {\n                            if (!this.renderers.has(layer)) {\n                                this.renderers.set(layer, new CubeRenderer(layer, this.context));\n                            }\n                            const renderer = this.renderers.get(layer);\n                            renderer.render(this, frame);\n                        }\n                        else {\n                            const webglLayer = layer;\n                            if (webglLayer.framebuffer === null) {\n                                continue;\n                            }\n                            if (gl instanceof WebGL2RenderingContext) {\n                                gl.bindFramebuffer(gl.READ_FRAMEBUFFER, webglLayer.framebuffer);\n                                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.getBaseLayer().framebuffer);\n                                gl.blitFramebuffer(0, 0, webglLayer.framebufferWidth, webglLayer.framebufferHeight, 0, 0, this.getBaseLayer().framebufferWidth, this.getBaseLayer().framebufferHeight, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.LINEAR);\n                            }\n                            else {\n                                console.warn('GL blitFramebuffer is not supported on WebGL1, so XRWebGLLayers may not show up properly when polyfilled.');\n                            }\n                        }\n                    }\n                    if (!prevBlend) {\n                        gl.disable(gl.BLEND);\n                    }\n                    if (prevDepthTest) {\n                        gl.enable(gl.DEPTH_TEST);\n                    }\n                    if (prevCullFace) {\n                        gl.enable(gl.CULL_FACE);\n                    }\n                    gl.blendFuncSeparate(prevBlendSrcRGB, prevBlendDestRGB, prevBlendSrcAlpha, prevBlendDestAlpha);\n                    while (this.taskQueue.length > 0) {\n                        const task = this.taskQueue.shift();\n                        task();\n                    }\n                }\n            };\n        }\n        this._requestAnimationFrame(this.injectedFrameCallback);\n    }\n    updateRenderState(XRRenderStateInit) {\n        this.existingBaseLayer = XRRenderStateInit.baseLayer;\n        this.layers = XRRenderStateInit.layers || [];\n        if (!this.activeRenderState) {\n            this.createActiveRenderState();\n        }\n        this.activeRenderState = Object.assign(Object.assign({}, this.activeRenderState), XRRenderStateInit);\n        if (!XRRenderStateInit.layers) {\n            this._updateRenderState(XRRenderStateInit);\n            return;\n        }\n        let layerRenderStateInit = Object.assign({}, XRRenderStateInit);\n        delete layerRenderStateInit.layers;\n        let context = undefined;\n        for (let layer of this.layers) {\n            if (layer instanceof XRCompositionLayerPolyfill) {\n                context = layer.getContext();\n                break;\n            }\n        }\n        if (!context && !this.context) {\n            console.log('No existing context! Have the session make one');\n            const canvas = document.createElement('canvas');\n            context = canvas.getContext('webgl2', { xrCompatible: true });\n            if (!context) {\n                context = canvas.getContext('webgl', { xrCompatible: true });\n            }\n            if (!context) {\n                throw new Error('No webGL support detected.');\n            }\n            document.body.appendChild(context.canvas);\n            function onResize() {\n                context.canvas.width = context.canvas.clientWidth * window.devicePixelRatio;\n                context.canvas.height = context.canvas.clientHeight * window.devicePixelRatio;\n            }\n            window.addEventListener('resize', onResize);\n            onResize();\n        }\n        this.createInternalLayer(context);\n        this.isPolyfillActive = true;\n        this._updateRenderState(Object.assign(Object.assign({}, layerRenderStateInit), { baseLayer: this.internalLayer }));\n    }\n    initializeSession(mode) {\n        this.mode = mode;\n        this\n            .requestReferenceSpace('local')\n            .then((refSpace) => {\n            this.referenceSpace = refSpace;\n        })\n            .catch((e) => {\n        });\n        this.requestReferenceSpace('viewer').then((viewerSpace) => {\n            this.viewerSpace = viewerSpace;\n        });\n    }\n    getBaseLayer(context) {\n        if (!this.internalLayer && !this.existingBaseLayer && context) {\n            this.createInternalLayer(context);\n        }\n        return this.internalLayer || this.existingBaseLayer;\n    }\n    getReferenceSpace() {\n        return !this.referenceSpace ? this.viewerSpace : this.referenceSpace;\n    }\n    getViewerSpace() {\n        return this.viewerSpace;\n    }\n    queueTask(task) {\n        this.taskQueue.push(task);\n    }\n    get renderState() {\n        if (!this.activeRenderState) {\n            this.createActiveRenderState();\n        }\n        return this.activeRenderState;\n    }\n    get internalViews() {\n        return this.views;\n    }\n    getViewIndex(view) {\n        for (let i = 0; i < this.views.length; i++) {\n            let testView = this.views[i];\n            if (view.eye === testView.eye &&\n                view.recommendedViewportScale === testView.recommendedViewportScale) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    createInternalLayer(context) {\n        if (!context && this.internalLayer) {\n            return this.internalLayer;\n        }\n        if (context === this.context && this.internalLayer) {\n            return this.internalLayer;\n        }\n        const _global = getGlobal();\n        this.internalLayer = new _global.XRWebGLLayer(this, context);\n        this.setContext(context);\n        return this.internalLayer;\n    }\n    setContext(context) {\n        this.context = context;\n        this.tempFramebuffer = context.createFramebuffer();\n        this.renderers = new WeakMap();\n    }\n    createActiveRenderState() {\n        const _global = getGlobal();\n        let prototypeNames = Object.getOwnPropertyNames(_global.XRRenderState.prototype);\n        const renderStateClone = {};\n        for (let item of prototypeNames) {\n            renderStateClone[item] = this._renderState[item];\n        }\n        renderStateClone.layers = [];\n        this.activeRenderState = renderStateClone;\n    }\n}\n\nclass XRWebGLSubImagePolyfill {\n    constructor() {\n        this.viewport = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n        };\n    }\n}\n\nclass XRWebGLBindingPolyfill {\n    constructor(session, context) {\n        this.session = session;\n        this.context = context;\n        this.subImageCache = new SubImageCache();\n    }\n    createProjectionLayer(init = defaultXRProjectionLayerInit) {\n        const layer = new XRProjectionLayer(init);\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n        if (this.context.isContextLost()) {\n            throw new Error('context is lost');\n        }\n        layer.initialize(this.session, this.context);\n        return layer;\n    }\n    createQuadLayer(init = defaultQuadLayerInit) {\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n        if (this.context.isContextLost()) {\n            throw new Error('context is lost');\n        }\n        if (init.layout === XRLayerLayout.default) {\n            throw new TypeError('Trying to create a quad layer with default layout');\n        }\n        const layer = new XRQuadLayer(init);\n        layer.initialize(this.session, this.context);\n        return layer;\n    }\n    createCylinderLayer(init = defaultCylinderLayerInit) {\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n        if (this.context.isContextLost()) {\n            throw new Error('context is lost');\n        }\n        if (init.layout === XRLayerLayout.default) {\n            throw new TypeError('Cylinder Layer cannot have a default layout');\n        }\n        const layer = new XRCylinderLayer(init);\n        layer.initialize(this.session, this.context);\n        return layer;\n    }\n    createEquirectLayer(init = defaultEquirectLayerInit) {\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n        if (this.context.isContextLost()) {\n            throw new Error('context is lost');\n        }\n        if (init.layout === XRLayerLayout.default) {\n            throw new TypeError('Equirect Layer cannot have a default layout');\n        }\n        if (!isReferenceSpace(init.space)) {\n            throw new TypeError('Equirect layer requires an XRReferenceSpace');\n        }\n        let layer = new XREquirectLayer(init);\n        layer.initialize(this.session, this.context);\n        return layer;\n    }\n    createCubeLayer(init) {\n        if (this.session.ended) {\n            throw new Error('Session has ended');\n        }\n        if (this.context.isContextLost()) {\n            throw new Error('context is lost');\n        }\n        if (!(this.context instanceof WebGL2RenderingContext)) {\n            throw new Error('XRCubeLayer only work on WebGL2');\n        }\n        if (!isReferenceSpace(init.space)) {\n            throw new TypeError('XRCubeLayer requires a space of type XRReferenceSpace');\n        }\n        let layer = new XRCubeLayer(init);\n        layer.initialize(this.session, this.context);\n        return layer;\n    }\n    getSubImage(layer, frame, eye = 'none') {\n        let existingSubImage = this.subImageCache.tryGetCachedSubImage(this.context, layer, eye);\n        if (existingSubImage) {\n            return existingSubImage;\n        }\n        let subimage = new XRWebGLSubImagePolyfill();\n        if (layer instanceof XRProjectionLayer) {\n            throw new TypeError();\n        }\n        if (layer.layout === XRLayerLayout.default) {\n            throw new TypeError();\n        }\n        if (!this.validateStateofSubImageCreation(layer, frame)) {\n            throw new Error('Invalid state for subimage creation');\n        }\n        let index = 0;\n        if (layer.layout === XRLayerLayout.stereo) {\n            if (eye === 'none') {\n                throw new TypeError();\n            }\n            if (eye === 'right') {\n                index = 1;\n            }\n        }\n        if (layer.getTextureType() === XRTextureType['texture-array']) {\n            subimage.imageIndex = index;\n        }\n        else {\n            subimage.imageIndex = 0;\n        }\n        let _textureIndex = 0;\n        if (layer.getTextureType() === XRTextureType.texture) {\n            subimage.colorTexture = layer.colorTextures[index];\n            _textureIndex = index;\n        }\n        else {\n            subimage.colorTexture = layer.colorTextures[0];\n            _textureIndex = 0;\n        }\n        if (!layer.depthStencilTextures || !layer.depthStencilTextures.length) {\n            subimage.depthStencilTexture = null;\n        }\n        else if (layer.getTextureType() === XRTextureType.texture) {\n            subimage.depthStencilTexture = layer.depthStencilTextures[index];\n        }\n        else {\n            subimage.depthStencilTexture = layer.depthStencilTextures[0];\n        }\n        const layerMeta = layer.colorTexturesMeta[_textureIndex];\n        subimage.textureWidth = layerMeta.width;\n        subimage.textureHeight = layerMeta.height;\n        let viewsPerTexture = 1;\n        if (layer.layout === XRLayerLayout['stereo-left-right'] ||\n            layer.layout === XRLayerLayout['stereo-top-bottom']) {\n            viewsPerTexture = 2;\n        }\n        initializeViewport(subimage.viewport, layerMeta, layer.layout, index, viewsPerTexture);\n        this.session.queueTask(() => {\n            layer.needsRedraw = false;\n        });\n        this.subImageCache.cacheSubImage(subimage, this.context, layer, eye);\n        return subimage;\n    }\n    getViewSubImage(layer, view) {\n        let existingSubImage = this.subImageCache.tryGetCachedViewSubImage(this.context, layer, view);\n        if (existingSubImage) {\n            return existingSubImage;\n        }\n        let subimage = new XRWebGLSubImagePolyfill();\n        let session = this.session;\n        if (!session.internalViews || !session.internalViews.length) {\n            console.warn('Tried to get view sub image before we have any views');\n            return subimage;\n        }\n        let index = session.getViewIndex(view);\n        let _textureIndex = 0;\n        if (layer.getTextureType() === XRTextureType['texture-array']) {\n            subimage.imageIndex = index;\n        }\n        else {\n            subimage.imageIndex = 0;\n        }\n        if (layer.layout === XRLayerLayout.default &&\n            layer.getTextureType() === XRTextureType.texture) {\n            subimage.colorTexture = layer.colorTextures[index];\n            _textureIndex = index;\n        }\n        else {\n            subimage.colorTexture = layer.colorTextures[0];\n            _textureIndex = 0;\n        }\n        if (layer.depthStencilTextures.length === 0) {\n            subimage.depthStencilTexture = null;\n        }\n        else if (layer.layout === XRLayerLayout.default &&\n            layer.getTextureType() === XRTextureType.texture) {\n            subimage.depthStencilTexture = layer.depthStencilTextures[index];\n        }\n        else {\n            subimage.depthStencilTexture = layer.depthStencilTextures[0];\n        }\n        subimage.textureWidth = layer.colorTexturesMeta[_textureIndex].width;\n        subimage.textureHeight = layer.colorTexturesMeta[_textureIndex].height;\n        initializeViewport(subimage.viewport, layer.colorTexturesMeta[_textureIndex], layer.layout, index, session.internalViews.length);\n        layer.needsRedraw = false;\n        this.subImageCache.cacheViewSubImage(subimage, this.context, layer, view);\n        return subimage;\n    }\n    validateStateofSubImageCreation(layer, frame) {\n        if (frame.session !== layer.session) {\n            return false;\n        }\n        if (this.session !== layer.session) {\n            return false;\n        }\n        if (this.context !== layer.context) {\n            return false;\n        }\n        if (!layer.colorTextures || !layer.colorTextures.length) {\n            return false;\n        }\n        if (layer.isStatic && layer.needsRedraw === false) {\n            return false;\n        }\n        return true;\n    }\n}\nclass SubImageCache {\n    constructor() {\n        this.cache = new Map();\n        this.viewCache = new Map();\n    }\n    cacheSubImage(subimage, context, layer, eye) {\n        let eyeMap = new Map();\n        eyeMap.set(eye, subimage);\n        let layerMap = new Map();\n        layerMap.set(layer, eyeMap);\n        this.cache.set(context, layerMap);\n    }\n    tryGetCachedSubImage(context, layer, eye) {\n        var _a, _b;\n        return (_b = (_a = this.cache.get(context)) === null || _a === void 0 ? void 0 : _a.get(layer)) === null || _b === void 0 ? void 0 : _b.get(eye);\n    }\n    cacheViewSubImage(subimage, context, layer, view) {\n        let viewMap = new Map();\n        viewMap.set(view, subimage);\n        let layerMap = new Map();\n        layerMap.set(layer, viewMap);\n        this.viewCache.set(context, layerMap);\n    }\n    tryGetCachedViewSubImage(context, layer, view) {\n        var _a, _b;\n        return (_b = (_a = this.viewCache.get(context)) === null || _a === void 0 ? void 0 : _a.get(layer)) === null || _b === void 0 ? void 0 : _b.get(view);\n    }\n}\n\nconst isLayersNativelySupported = (global) => {\n    if (!global.navigator.xr) {\n        return false;\n    }\n    if (global.XRMediaBinding && global.XRWebGLBinding) {\n        return true;\n    }\n    return false;\n};\n\nclass WebXRLayersPolyfill {\n    constructor() {\n        this.injected = false;\n        const _global = getGlobal();\n        this._injectPolyfill(_global);\n    }\n    _injectPolyfill(global) {\n        if (!('xr' in global.navigator)) {\n            throw new Error('WebXR Layers polyfill requires WebXR support.');\n        }\n        if (this.injected === true) {\n            console.warn('Polyfill has already been injected...');\n        }\n        if (isLayersNativelySupported(global)) {\n            return;\n        }\n        this._polyfillRequiredLayersFeature(global);\n        this._polyfillXRSession(global);\n        global.XRWebGLBinding = XRWebGLBindingPolyfill;\n        global.XRMediaBinding = XRMediaBindingPolyfill;\n        this.injected = true;\n        console.log('Injected Layers Polyfill');\n    }\n    _polyfillXRSession(global) {\n        global.XRSession.prototype._updateRenderState = global.XRSession.prototype.updateRenderState;\n        global.XRSession.prototype._requestAnimationFrame =\n            global.XRSession.prototype.requestAnimationFrame;\n        let renderStateGetter = Object.getOwnPropertyDescriptor(global.XRSession.prototype, 'renderState');\n        Object.defineProperty(global.XRSession.prototype, '_renderState', renderStateGetter);\n        let polyfillRenderStateGetter = Object.getOwnPropertyDescriptor(XRSessionWithLayer.prototype, 'renderState');\n        Object.defineProperty(global.XRSession.prototype, 'renderState', polyfillRenderStateGetter);\n        let prototypeNames = Object.getOwnPropertyNames(XRSessionWithLayer.prototype);\n        for (let item of prototypeNames) {\n            let propertyDescriptor = Object.getOwnPropertyDescriptor(XRSessionWithLayer.prototype, item);\n            Object.defineProperty(global.XRSession.prototype, item, propertyDescriptor);\n        }\n    }\n    _polyfillRequiredLayersFeature(global) {\n        const existingRequestSession = global.navigator.xr.requestSession;\n        Object.defineProperty(global.navigator.xr, 'requestSessionInternal', { writable: true });\n        global.navigator.xr.requestSessionInternal = existingRequestSession;\n        const newRequestSession = (sessionMode, sessionInit) => {\n            const modifiedSessionPromise = (mode, init) => {\n                return global.navigator.xr.requestSessionInternal(mode, init).then((session) => {\n                    Object.assign(session, new XRSessionWithLayer());\n                    let polyfilledSession = session;\n                    polyfilledSession.initializeSession(sessionMode);\n                    return Promise.resolve(polyfilledSession);\n                });\n            };\n            if (sessionMode !== 'immersive-vr') {\n                return modifiedSessionPromise(sessionMode, sessionInit);\n            }\n            if (!sessionInit) {\n                return modifiedSessionPromise(sessionMode, sessionInit);\n            }\n            if (sessionInit.requiredFeatures && sessionInit.requiredFeatures.indexOf('layers') > -1) {\n                const sessionInitClone = Object.assign({}, sessionInit);\n                const reqFeatures = [...sessionInit.requiredFeatures];\n                const layersIndex = reqFeatures.indexOf('layers');\n                reqFeatures.splice(layersIndex, 1);\n                sessionInitClone.requiredFeatures = reqFeatures;\n                return modifiedSessionPromise(sessionMode, sessionInitClone);\n            }\n            return modifiedSessionPromise(sessionMode, sessionInit);\n        };\n        Object.defineProperty(global.navigator.xr, 'requestSession', { writable: true });\n        global.navigator.xr.requestSession = newRequestSession;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebXRLayersPolyfill);\n\n\n//# sourceURL=webpack://web-xr-ogl-js/./node_modules/webxr-layers-polyfill/build/webxr-layers-polyfill.module.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;